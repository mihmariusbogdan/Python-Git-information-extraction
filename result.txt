Initial commit, working with Maven CentralRestructure into smaller filesCorrect artifacts, moved pom to more visible areaAvoid signatures in archives unless doing mavenCentral buildRemove local testing fileMultimodule builds need a dump signing taskFix quotesUse lifecycle to add signing taskCreate branch that contains only build related filesUn-indenting HEADERMerge commit 'bc662051d8c72ea7b20350b1746e1a8f527c9244' into multi-projectMake one less thing people have to changeSonatype URL was wrongMerge pull request #3 from Randgalt/multi-project

Wrong Sonatype URL - don't know why this wasn't found beforeEnable license header pluginUpgrade to Gradle 1.1.Adding coberturaRelease pluginPointing to a repo in our controlUsing custom build of release plugin, to support building from a branchSetting default name for multi-projectChanges needed for release pluginStop relying on maven convention on projectFilling in more pom fields for SonatypeAdd local publishingPutting javadoc and sources into proper confs and setting typesFixing issue when publishing source/javadoc to maven centralUsing a better github locationAdding provided scope

Conflicts:
	gradle/convention.gradleFixing transitive-ness of providedInitial commitMerge branch 'multi-project' of github.com:Netflix/gradle-templatebuild settings for rxjava-coreInitial commitJava 5 compatibility target

We want to support Android.Organize imports and format codeRename to Observer/Observable

Observable is now a concrete abstract class rather than an interface with 1:1 relationship to a concrete class.Refactoring for consistent implementation approach.

Combined ObservableExtensions into Observable to match how Rx works (Observable.* methods)Merge pull request #1 from benjchristensen/api-and-naming

Refactoring conventionsAdd more aritiesLanguageAdaptor for Function execution

Removed dependencies on Groovy and JRuby from rxjava-coreGroovyAdaptorJRuby adaptorLicense headersJavadoc generationMerge pull request #2 from benjchristensen/language-adaptors

Language adaptorsForward from Object to Observer overload

Be more lenient in handling the overloaded methods.ClojureAdaptor

Very basic support that allows clojure/java interop using the fn function rather than Clojure code needing to use proxy/reify and implement full java interfaces.Merge pull request #3 from benjchristensen/clojure-adaptor

Clojure adaptorCreate README.mdCreate README.mdCreate README.mdVersion 0.1Update README.mdUpdate README.mdUpdate README.mdUpdate README.mdUpdate README.mdUpdate README.mdUpdate README.mdremove 'wrap' functionality

We no longer need this as we've merged the interface and abstract classes together and don't need to ensure we have the abstract class.Merge pull request #4 from benjchristensen/cleanup

remove 'wrap' functionalityRemove erroneous create method

It was a method I was playing with during refactoring and accidentally committed.

The real create methods already exist.Support multiple class types for language adaptorsMerge pull request #5 from benjchristensen/language-adaptor-classes

Support multiple class types for language adaptorschanging package to rx.*alias methods "from" for toObservablesubscribe methods with typed Action argumentsChange order of generics for Func from R, T to T, R to match C# Rxupdate language adaptors to rx.* packageMerge pull request #6 from benjchristensen/refactoring

RefactoringUpdate README.mdAdding code for scala adaptor (initial implementation)Refactoring name-space to remove 'org'Merge pull request #27 from jcacciatore/scala-adaptor

Scala adaptorPerformance optimizations for dynamic function execution.

- memoize dynamic function constructions so executions are statically typed after a single dynamic lookup instead of dynamic on every executionMerge pull request #106 from benjchristensen/function-memoization

Performance optimizations for dynamic function execution.

https://github.com/Netflix/RxJava/issues/104Refactoring towards performance improvements

- Convert operators to implement Func1 instead of extend Observable
- Change Observable to concete instead of abstract
- subscribe is now controlled by the concrete class so we can control the wrapping of a Func to be executed when subscribe is called
- removed most wrapping inside operators with AtomicObservable except for complex operators like Zip that appear to still need it

While doing these changes the util/function packages got moved a little as well to make more sense for where the Atomic* classes should goPerformance refactoring: OperatorSubscribeFunction

- migrated Func1 to OperatorSubscribeFunction for internal operator implementations
- do not wrap with AtomicObserver when it's a trusted operator

https://github.com/Netflix/RxJava/issues/104Format code, delete test classesMerge pull request #107 from benjchristensen/performance

Performance: Reduce synchronizationCreating toObservable for FutureAdding a draft of Subject class
https://github.com/Netflix/RxJava/issues/19removing the dependency on groovyupgrade from Gradle 1.1 to 1.3 to support needed Scala featuresmake scala build fork so it gets its own JVM args

The permgen needs to be increased for scala.fixing compile issues after core refactoringMerge pull request #110 from benjchristensen/build-fix

Build fixIDE support

Importing into Eclipse Juno with the Gradle plugin now gets everything setup, compiling and running correctly.ignore Scala .cache folderMerge pull request #111 from benjchristensen/dev

IDE SupportChange NullObservableSubscription to NoOpObservableSubscription

Gives stacktraces that make more sense as "null" has nothing to do with it.Start of examples with clojure and groovyMerge pull request #112 from benjchristensen/examples

Examples Submoduleadding support for also get time outs.Add the new Operation ConcatUpdate example with two observables.factory method createSubscription from Action0example code as part of "How to Use"builds for each language and examples

Use 'provided' not 'compile' for language dependencies so we don't force specific versions.Merge pull request #114 from benjchristensen/examples

ExamplesMerge commit 'b764ef1b1d76e8ecc9d7a826ee57023ea91c6327' into futureadding more details about how the toObservable behaves.Add overloaded methods and unit tests for list<observable<T>> and Observable<Observable<T>>.Merge pull request #109 from abersnaze/future

Creating toObservable for FutureMerge pull request #108 from abersnaze/subject

Adding a draft of Subject classUpdate the javadocUpdate comment in Observable for concat.Merge pull request #113 from billyy/concat

Concatmore examplesMerge pull request #115 from benjchristensen/examples

more examplessynchronization and contract refactoring

No longer will synchronization ever be added automatically. If synchronization is needed then the synchronize() operator should be used.
The AtomicObserver is added to Observables (but not internally trusted ones) to ensure compliance with the Rx contract and auto-unsubscribe. This should generally mean just 1 wrapper at the top of a sequence chain.
These changes are based on a discussion with Erik about how Rx 2.0 works in .Net.clean example so it shuts down correctlyperformance test classesremoving .observables package so main classes are just rx.*fix warningmake Observable constructor arg optional so unit tests can just override subscribe for simpler codefix package names for importsMerge pull request #116 from benjchristensen/refactor

RefactorCreate README.mdUpdate README.mdUpdate README.mdUpdate README.mdUpdate README.mdUpdate README.mddependency managementUpdate README.mdupdating jruby and scala buildsUpdate README.mdUpdate README.mdUpdate README.mdCreate README.mdCreate CONTRIBUTING.mdUpdate gradle.propertiesUpdate gradle.propertiesUpdate gradle.propertiesUpdate gradle.propertiesFixing javadocs

https://github.com/Netflix/RxJava/issues/119

- added correct links to external images
- cleaned up some of the text
- improved some function memoization that was missedMerge pull request #120 from benjchristensen/javadocs

Fixing javadocsUpdate README.mdUpdate README.mdUpdate README.mdUpdate README.mdMinor cleanup of Clojure example.

Cleaned up some formatting and spacing. Used future-cancel. Future
subscriptions were not being returned properly. Replaced use of #_ with
comment form. Fixed rest args usage for hello example.Merge pull request #121 from daveray/clj-cleanup

Minor cleanup of Clojure example.scala support in examplesCommenting out non-deterministic portion of unit tests

These verifications are non-essential so commenting out right now until I or someone else has time to fix it correctly.scala is buildingEclipse build config

- Include 'provided' in Eclipse classpath
- Upgrade to Groovy 2.+Remove scala from rxjava-examples

Groovy and Scala can't co-exist in a single Eclipse project even though Gradle handles it fine.

Perhaps the examples should go in the /test/ folder of each of the rxjava-[language] projects instead of rxjava-examples?Merge pull request #122 from benjchristensen/examples

Examples Cleanupclean-upMerge pull request #124 from jcacciatore/scala-example-cleanup

trivial syntax clean-up in scala adaptorBasic take-while implementationTakeWhile support for predicate with indexUnit tests for take whileRestored javadocUpdate READMECode cleanupMerge pull request #127 from matthewmichihara/master

Update READMEMerge pull request #129 from mairbek/code-cleanup

Code cleanupmigrate unit tests for Groovy to separate Groovy file

- testing all Groovy functionality doesn't belong as an inner class
- it was awkard to load Groovy scripts via Java (leftover from previous codebase where Groovy wasn't part of build, only a runtime library)
- establish convention for each language to have a suite of tests in /src/testremove rxjava-examples

Examples have been moved into /src/examples folders of each language-adaptor subproject.README to explain unit testsclojure example code

- examples are in /src/examples/clojure
- placeholder for unit tests in /src/testsgroovy example code

- examples are in /src/examples/groovyremove rxjava-examples submoduleclojure project build configMerge pull request #132 from benjchristensen/language-tests-and-examples

Refactoring language tests and examples layoutrestore performance optimization to reduce wrapping

Without optimization:

runCompositionTest
Sum: 710082754 Time: 42.353ms
runNonCompositionalTestWithDirectLoop
Sum: 710082754 Time: 17.719ms
runNonCompositionalTestWithArrayOfFunctions
Sum: 710082754 Time: 17.344ms

With optimization:

runCompositionTest
Sum: 710082754 Time: 23.064ms
runNonCompositionalTestWithDirectLoop
Sum: 710082754 Time: 18.059ms
runNonCompositionalTestWithArrayOfFunctions
Sum: 710082754 Time: 18.88msremove warnings and cleanupRestoring null check removed in recent commit

See https://github.com/Netflix/RxJava/commit/caf3a9434ed4b3b4efba6661891f02417aebf604 for removal

It started causing this unit test to fail:

rx.operators.OperationZip$UnitTest > testAggregatorUnsubscribe FAILED
    java.lang.NullPointerException at OperationZip.java:611

Not sure how I missed it when I reviewed the previous commit … but I did.Merge pull request #133 from benjchristensen/fixes

Various fixesRenamed takeWhile with Func2 parameter to takeWhileWithIndex

Added takeWhile and takeWhileWithIndex methods to ObservableUpdate language-adaptors/rxjava-scala/README.mdUpdate language-adaptors/rxjava-clojure/README.mdUpdate language-adaptors/rxjava-clojure/README.mdUpdate language-adaptors/rxjava-groovy/README.mdUpdate language-adaptors/rxjava-jruby/README.mdUpdate language-adaptors/rxjava-scala/README.mdCreate CHANGES.mdAdapt Groovy VideoExample to ClojureMerge pull request #134 from daveray/clj-video-example

Adapt Groovy VideoExample to ClojureIdiomatic usage of import in ns macro.Merge pull request #135 from ddeaguiar/idiomatic

Idiomatic usage of import in ns macro in rx-examples.Update language-adaptors/rxjava-jruby/README.mdUpdate language-adaptors/rxjava-scala/README.mdImplemented range operatorMerge pull request #137 from mairbek/ranges

Implemented range operator. Fixes issue #68Merge pull request #136 from myfreeweb/patch-1

Add examples for jbundler and sbtImplemented sequenceEqual methodTakeLast basic implementationAdded takeLast to ObservableFixed importAdded ordering unit teststyling: new line at the end of the fileMerge pull request #138 from mairbek/SequenceEqual

Implemented SequenceEqual OperatorMerge pull request #140 from mairbek/TakeLast

Implemented TakeLast operatorfix grammar and add success logexample (as test) of closure versus mapRxJavaErrorHandler Plugin

https://github.com/Netflix/RxJava/issues/141 Error Handler Plugin
https://github.com/Netflix/RxJava/issues/139 Plugin SystemMerge pull request #142 from benjchristensen/dev

RxJava ErrorHandler Plugin0.5.2-SNAPSHOT0.5.3-SNAPSHOTVersion 0.5.2Used mockito's inOrder to verify ordering instead of hand-written stubMerge pull request #144 from mairbek/mocks-inorder

Used mockito's inOrder to verify ordering instead of hand-written stubfix javadocs - cleanup some warningsAdd IntelliJ Idea support to Gradle build

https://github.com/Netflix/RxJava/issues/143Merge pull request #145 from benjchristensen/issue-143

Support 'provided' dependencies in IntelliJ Idea buildplay with tests in clojure -- still not hooked up or actual testsjavadocsmerge Operator TakeWhile pull request

This is a manual merge of https://github.com/Netflix/RxJava/pull/125 contributed by @mairbekMerge pull request #146 from benjchristensen/issue-87

Merge of Pull #125 for Issue #87 Operator TakeWhileadd error handling for onNext failure so exceptions don't get thrown up the stack but instead via onErrorOperator: ForEach

https://github.com/Netflix/RxJava/issues/45forEach with Action1 but not Observer

I re-read the MSDN docs and found the previous implementation wasn't complying with the contract.

http://msdn.microsoft.com/en-us/library/hh211815(v=vs.103).aspx

I believe this now does.add a comment so it doesn't look like this was left empty by accidentremoving unused verifications

https://github.com/Netflix/RxJava/pull/147/files#r3028477mark the thread as interrupted againMerge pull request #147 from benjchristensen/issue-45

Operator: forEachVersion 0.5.30.5.4-SNAPSHOTfix linksCleaned up copy-paste in merge codeBasic takeUntil implementationTests for TakeUntilMerge pull request #150 from mairbek/code-cleanup

Cleaned up copy-paste in OperationMerge codeChange target compatibility from 1.5 to 1.6

https://github.com/Netflix/RxJava/issues/153Merge pull request #155 from benjchristensen/issue-153

Change target compatibility from 1.5 to 1.6Implemented toIterable methodStatic method plus javadocImplemented single and singleOrDefault methodsMerge pull request #156 from mairbek/toIterable

Implemented ToIterable OperationMerge branch 'master' into singleUpdated single/singleOrDefault according to review requestImplemented lastOrDefaultMerge pull request #159 from mairbek/lastOrDefault

Implemented LastOrDefault OperatorMerge remote-tracking branch 'mairbek/single'
Added @throws javadocs
Suppressed rawtypes warnings

Conflicts:
	language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy
	rxjava-core/src/main/java/rx/Observable.javaUpdate README.mdMerge pull request #160 from benjchristensen/mairbek_single-merge

Manual merge of mairbek/single Pull #157Merge pull request #161 from garethbowles/master

Added build status badgesImplemented Operation NextUpdated Observable APIRenamed variableFixed bug in rangesMerge pull request #165 from mairbek/range-fix

Fixed bug in rangesMerge remote-tracking branch 'mairbek/next-new' into next-reviewAdd unit test testNoBufferingOrBlockingOfSequence

As part of reviewing the code I added another unit test.don't throw exception on iterator.hasNext()Merge pull request #166 from benjchristensen/next-review

Review of Next Operation0.5.40.5.5-SNAPSHOTMerge branch 'master' into TakeUntiFunctional

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaRefactored TakeUntil operatorReimplemented Last operationBasic MostRecent implementationUnit tests for MostRecent OperatorUpdated Observable APIImplemented GetIterator operationImplemented Defer OperationUnsubscribe behavior.

Adding correct unsubscribe behavior to the example so it models what real implementations should be doing.
Also added comments around the synchronous observable to make clear that it 'firehoses' and will not unsubscribe regardless of a take operator saying it wants less than the 50 it will send.implemented OperationDematerializeadded dematerialize api to observableunit test for OperationDematerializeupdated dematerialize unit tests to use mockitoptimize importsUpdated logic to match Rx.NETRefactored TakeUntil to use TakeWhile.Cleaned up commentDraft group by implementationConcurrency improvementsUpdated Observable APIcopyright updateMerge pull request #151 from mairbek/TakeUntiFunctional

Implemented TakeUntil operationMerge branch 'dematerialize' of git://github.com/prabirshrestha/RxJava into dematerialize-merge

- added Javadoc for @throws Exception
- suppressed unchecked warnings

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #177 from benjchristensen/dematerialize-merge

Operator: Dematerialize - review and manual mergeMerge branch 'getiterator' of git://github.com/mairbek/RxJava into GetIterator-reviewRefactored Iterator implementation out of Observable into OperatorToIterator

- Trying to keep the massively large Observable.java class focused on the API and implementation details off in small classes.Merge pull request #178 from benjchristensen/GetIterator-review

Review and Refactor of GetIteratorMerge pull request #171 from mairbek/defer

Implemented Defer OperationRemoved static methods delegationsMerge pull request #168 from mairbek/mostrecent

Implemented Most RecentMerge branch 'groupby' of git://github.com/mairbek/RxJava into groupBy-reviewRefactor to eliminate need of delegate methods for GroupedObservable0.5.6-SNAPSHOTMove GroupedObservable to rx.observablesMerge pull request #179 from benjchristensen/groupBy-review

Operator GroupBy Pull Request - Review and Refactorbulk import organize and code formattingmaking sequenceEqual private methods public

These should be public as part of issue https://github.com/Netflix/RxJava/issues/76Cleanup various compiler warnings.Merge pull request #180 from benjchristensen/formatting-and-cleanup

Formatting and cleanupAdd OSGi manifest headers

https://github.com/Netflix/RxJava/issues/154

I can't confirm that these work but submitting based on discussion on issue #154.Subscriptions utility class and rx.subscriptions package

https://github.com/Netflix/RxJava/issues/1730.6.0-SNAPSHOT

Bumping to 0.6.0 as about to commit some breaking changes and new packages.Version 0.5.5Merge pull request #181 from benjchristensen/osgi

Add OSGi manifest headersMerge pull request #182 from benjchristensen/issue-173-subscriptions

Subscriptions utility class and rx.subscriptions packageSet unsubscribed true

... should probably set it to true when unsubscribed :-$Groovy VideoExample improvements

- Make VideoExample more idiomatic for Groovy based on feedback
- Use the new BooleanSubscription objectMerge pull request #183 from benjchristensen/groovy-cleanup

Groovy VideoExample improvementsConvert 'last' from non-blocking to blocking to match Rx.Net

See https://github.com/Netflix/RxJava/issues/57#issuecomment-14253118 for background.

NOTE: This is a breaking change thus we are bumping the version from 0.5.x to 0.6.x

Manual merge of branch 'last' of git://github.com/mairbek/RxJava into issue-57-last

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #184 from benjchristensen/issue-57-last

Convert 'last' from non-blocking to blocking to match Rx.NetAdd 'Fragment-Host' to submodules for OSGi

Based on discussion on issue https://github.com/Netflix/RxJava/issues/154Merge pull request #186 from benjchristensen/issue-154-osgi

Add 'Fragment-Host' to submodules for OSGiConfusing Javadoc for `toObservable(Future)` methods

https://github.com/Netflix/RxJava/issues/148Merge pull request #187 from benjchristensen/issue-148

Confusing Javadoc for `toObservable(Future)` methodsVersion 0.6.0

This release includes some small breaking changes to the API.Subscriptions cleanup

- make createSubscription be create … as I had originally intended to do but forgot to
- make EmptySubscription a singletonupdate clojure and groovy code to subscriptions changesMerge pull request #188 from benjchristensen/issue-173

Subscriptions cleanup0.6.1-SNAPSHOTNote on versioning on road to 1.0gracefully handle null subscription on trusted onSubscribe the same as non-trusted already doesadd try/catch in example to better demonstrate error handling

… despite no errors being possible of being thrown in this codemore thorough error handling in case Func1 implementation itself fails

- Func1.call may fail (null impl, bad impl, etc)
- Func1.call may success but the implementation itself may throw an exception instead of properly catching and sending to onErrorMerge pull request #189 from benjchristensen/polishing

Handful of Improvementsupdates dematerialize so can chain correctlyMerge pull request #190 from prabirshrestha/chainDematerialize

update dematerialize so can chain correctlyVersion 0.6.1implemented OperationWhereadded where operation to ObservableNaive schedulers implementationAdd pointer regarding unit tests as inner classesConvert README to MarkdownMerge pull request #194 from sopel/patch-1

Add pointer regarding unit tests as inner classesAdd communications linksMerge pull request #191 from prabirshrestha/where

Where alias to filterNew operation Finally (issue #43)Add finally0 to Observable.java .Missing importAdded nonstatic Observable.finally0Incoporate review suggestions.

Splits a compound unit test into to parts.
Uses mockito instead of a bespoke test object.
Removes unused import statements.
Changes the order of the Finally action w.r.t. onComplete/onError.Failing test case to show bug in takeWhileCall complete on take/takeWhile observables once the predicate is true.Added ScheduledExecutorServiceSchedulerAdded to SchedulersMore testsHeadersObserveOn/SubscribeOn unit testsSome documentationDocumenting coderenamed testsExtracted ScheduledObserver as a separate classWhitespaceSynchronize Observer on OperationMerge

fixes https://github.com/Netflix/RxJava/issues/200

This is necessary because by definition Merge is subscribing to multiple sequences in parallel and is supposed to serialize them into a single Observable.Synchronization of Merge operator (fixes)

- return AtomicSubscription not MergeSubscription which I was accidentally still returning
- try/finally in unit test so threads are released even if assertion is thrownImplemented all operationUpdated Observable APIAdded groovy testUpdate codequality/checkstyle.xml

Removing as it appears to no longer be available in the latest version of checkstyle that comes with gradle 1.4Upgrading to Gradle 1.4Switching to bintray for dependencies (same as Maven Central)Move gradle-release dependency to bintrayReimplementation of Concat, improved handling of Observable<Observable<T>>.

The old version required all of the Observable<T>s to be generated and buffered
before the concat could begin.  If the outer Observable was asynchronous, items
could be dropped (test added).  The new version passes the test, and does the
best job I could (after examining several possible strategies) of achieving
clear and consistent semantics in accordance with the principle of least
surprise.Use newer version of license-gradle-plugin that fixes skipExistingHeaders fieldFailing test case to show Observable.toList breaks with multiple observers due to sharing of the buffer listFix for Observable.toList failing with multiple subscribersupdated a test and added another one, trying to get the expected behavior rightmade 'next' more typesafeAn attempt at implementing the correct combineLatest semantics. The
tests do pass again now (they had to be adapted too).Add sonatype snapshot repositoryMerge pull request #197 from thegeez/take-while

TakeWhile observables do not properly completeUsing latest features of release pluginMerge pull request #203 from mairbek/all-operation

All Operation ImplementedMerge pull request #206 from thegeez/list-subscribe

Observable.toList breaks with multiple subscribersFixed javadoc and comments, cleaned up a bit, and tried to fix
synchronization.Whoops, generics not allowed in @see javadoc...Merge pull request #207 from jmhofer/master

Implemented combineLatest semanticsRemove use of JSR 305 and dependency on com.google.code.findbugs

https://github.com/Netflix/RxJava/issues/192

The library and annotations were being used for trivial reasons so removing the usage so we don't have the dependency.Merge pull request #211 from benjchristensen/issue-192

Remove use of JSR 305 and dependency on com.google.code.findbugsAdd tests to demonstrate bugsMerge branch 'upstream' into issue43Split Take and TakeWhileIncorporate review suggestions.

- Changes finally0 to finallyDo.
- Removes unnecessary subscription-wrapping.
- Handle exceptions in onCompleted/onErrorImplement TrustedObservableTester.assertTrustedObservable()Fix violations of the Observer contract.Incorporate review feedback.

Also restore the errant change to settings.gradle.Merge branch 'upstream' into issue202take(0) subscribes to its sourceRename Subject to PublishSubjectIntroduce Subject as analogue to RX ISubjectMerge branch 'take-test' of git://github.com/johngmyers/RxJava into pull-212-take-mergeSmall reorganization of code for OperationTake and TrustedObservableTester

- removed rx.testing package (if that's going to exist that means it's bleeding into something that should live in /src/test and beyond what works well for inner class testing)
- made TrustedObservableTester part of rx.operation package and an inner UnitTest class so it doesn't become part of the public APIMerge pull request #215 from benjchristensen/pull-212-manual-merge

Manual Merge of Pull Request #212Implement RepeatSubjectExtract UnsubscribeTester to top levelBeef up UnsubscribeTesterBeef up UnsubscribeTester some moreAdd unit tests to PublishSubjectMerge branch 'master' into replay

Conflicts:
	rxjava-core/src/main/java/rx/operators/OperationTake.javaResolve merge conflictsTakeWhile protect calls to predicateMerge pull request #220 from johngmyers/takewhile-predicate

TakeWhile protect calls to predicateImprove error handling of user provided Observers

https://github.com/Netflix/RxJava/issues/216Protect subscribe/forEach implementations against user provided function failures

Related to https://github.com/Netflix/RxJava/issues/216

The new forEach unit test went into a deadlock prior to this fix.Restrict identification of "internal" operators to only the rx.operators package

- based on discussion at https://github.com/Netflix/RxJava/pull/221
- don't wrap at AtomicObserver again
- anything outside of rx.operators will be wrappedMerge pull request #221 from benjchristensen/issue-216-error-handling

Error Handling Improvements - User Provided Observers/FunctionsTrying to fix non-deterministic test

- not sure of a way other than putting Thread.sleep in here to give time after each CountDownLatch triggers for the process scheduler to execute the next line of each thread

See https://github.com/Netflix/RxJava/pull/201 for more information.Merge pull request #201 from benjchristensen/issue-200-merge-synchronization

Synchronize Observer on OperationMergeSimplified ImmediateSchedulerUpgrading release processMatching wrapper to 1.5Automatically aggregate and publish docs (java,groovy,scala)Make uploadMavenCentral task, that encompasses other tasksMerge branch 'master' of git://github.com/Netflix/RxJava into issue202Version 0.6.2Merge branch 'issue43' of https://github.com/abliss/RxJava into pull-issue-43-merge

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #222 from joshgord/pull-issue-43-merge

Pull issue 43 mergeGradle Release Plugin - pre tag commit:  'rxjava-0.6.1'.0.6.2-SNAPSHOT

Fixing build issueGradle Release Plugin - pre tag commit:  'rxjava-0.6.2'.Gradle Release Plugin - new version commit:  'rxjava-0.6.3-SNAPSHOT'.Removed SleepingAction from Abstract scheduler.
ExecutorScheduler throws exception for the delayed action.added threadPoolForComputation and threadPoolForIO schedulersMerge branch 'issue202' of https://github.com/abliss/RxJava into concat-merge1.  Update javadoc on subscribe() blocking if observables are running on the same thread.
2.  Add test case with infinity observable.
3.  Add test case to unsubscribe() with all observables running in different thread (non-blocking).RxJavaObservableExecutionHook

Allow a plugin to intercept invocations of an Observable via its subscribe method.

Use cases:
 - extra logging or metrics for start, return and error events when subscribing
 - decorate (or replace) an 'onSubscribe' function with additional behavior
 - decorate an Exception
 - decorate a Subscription

This is modeled after Hystrix Plugins: http://netflix.github.com/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/executionhook/HystrixCommandExecutionHook.html

Javadocs will be at http://netflix.github.com/RxJava/javadoc/Merge pull request #224 from benjchristensen/execution-hooks

RxJavaObservableExecutionHookVersion 0.6.3Gradle Release Plugin - pre tag commit:  'rxjava-0.6.3'.Gradle Release Plugin - new version commit:  'rxjava-0.6.4-SNAPSHOT'.Merge branch 'schedulers' of git://github.com/mairbek/RxJava into schedulers-merge

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaKeeping ScheduledObserver out of public API

For now keeping ScheduledObserver an implementation detail until it's clear we want it part of the long-term public API.Formatting to match codebaseConsolidating ExecutorScheduler and ScheduledExecutorScheduler

ScheduledExecutorScheduler is just an extension of ExecutorScheduler so keeping them together for less surface area on the API.Make ForwardingScheduler Internal

Until there is a use case other than unit testing I'm moving this to a non-public role so it's not part of the public API.Tweaks to Executor/ExecutorScheduler/IOScheduler and Javadocs

- added Javadocs
- moved some classes to package-private until they are proven necessary for the public API
- made ExecutorScheduler support Executor implementations and still work with time delays by using a system-wide scheduler/timer
- made IO thread-pool unbounded with a cached thread poolBasic unit tests

- I plan on using this to expand unit testing around various aspects of schedulers
- this is not done as an inner-class as it does not correlate with just one class but is cross-functional over many classes thus it fits best hereScheduler overloads for Subscribe, ToObservable, From, Merge, Empty

- the list of operators to add overloads to was derived from the Rx.Net docs at http://msdn.microsoft.com/en-us/library/hh212048(v=vs.103).aspxSet threads to daemons so they don't prevent system from exiting

- This applies to any pools RxJava itself creates. It will be up to users to do this for Executors they inject.Name the NewThreadScheduler threadsUse long instead of int

 … considering very long running app with lots of IO events.Fix non-deterministic unit testMerge pull request #225 from benjchristensen/schedulers-merge

Schedulers (merge of pull #199)Removing Scheduler overloads on operators (for now)

I have some outstanding questions on how these should be implemented (or even why we need them when the 'subscribeOn' operator is far cleaner) so want to remove them for now so they don't make it into the public incorrectly.0.7.0-SNAPSHOT

Bumping to 0.7.0 because Schedulers is a big feature addition.Gradle Release Plugin - pre tag commit:  'rxjava-0.7.0'.Gradle Release Plugin - new version commit:  'rxjava-0.7.1-SNAPSHOT'.Version 0.7.0avoiding some synchronization on combineLatestHandle unavailable sonatype propertiesInitial implementation for interval (#55). Needs a test scheduler...Added a TestScheduler which collects actions in a queue and has
adjustable time.Added a unit test. Fixed the implementation. Maybe still a bit naive
when it comes to intervals that are too small to keep up with?Switched to a default scheduler that actually works together with this
operator.Fixed indentation.Fixed yet more indentation issues.Oops, the test scheduler has to go into the main sources.First attempt at "sample" operator. Should probably use "interval"
operator instead of an internal clock. Also still needs tests!Added a scheduler for scheduling actions on the Swing event thread.Trying to extend the Scheduler interface according to the comments at
#19.An unsubscribed AtomicObservableSubscription.wrap() unsubscribes its argument.Merge branch 'interval' into sampleSwitched sample from internal clock to using the interval operatorAdded a unit test against the sample operatorinitial attempt at implementing periodic schedulers as discussed in #228, needs some testing next...Playing with Subject and ConnectedObservableMulticast implementedUnit tests for multicastAdded support for sever connect method callsRemoved annotationVerify before we can't take it back, use preferredVersion variablePassing status to Artifactory buildsMoved state to Observer from ObservableCorrected naming Operator -> OperationBlocking implementation of ScheduledObserverNon-blocking implementation of ScheduledObserverTrying to fix a buildFixing UnitTestMerge pull request #232 from mairbek/naming

Corrected namingMerge pull request #230 from johngmyers/wrap-unsubscribed

An unsubscribed AtomicObservableSubscription.wrap() unsubscribes its argumentMerge branch 'schedulers' of git://github.com/jmhofer/RxJava into pull-229-mergeAdd CompositeSubscription

- also a utility method for creating a Subscription around a FutureChange Scheduler implementations to use primary methods

Work done in https://github.com/Netflix/RxJava/pull/229 added the following methods:

- Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long delayTime, TimeUnit unit)}
- Subscription schedule(T state, Func2<Scheduler, T, Subscription> action)}

These are in fact the primary methods from RxNet (http://msdn.microsoft.com/en-us/library/hh211963(v=vs.103).aspx) and the others are just helper overloads.

It seems it is better to set the precedent to use these 2 methods for actual implementation logic while all other methods are just decorating and forwarding from AbstractScheduler to these methods.

I have updated the various implementations to achieve this.

Unit tests are passing … but we don't have enough unit test coverage so I won't be surprised if bugs are found.Add unit tests for recursive scheduler usage

These tests came from @mairbek at https://github.com/Netflix/RxJava/pull/229#issuecomment-16115941Fixed sleeping actionMerge Scheduler/AbstractScheduler

- using abstract class for Scheduler for same reason Observable is concrete
- discussed and decided upon at https://github.com/Netflix/RxJava/pull/235Implement Scheduler method with dueTime

- added method: schedule(T state, Func2<Scheduler, T, Subscription> action, Date dueTime)Merge pull request #235 from benjchristensen/schedulers-pull-229-merge

Schedulers Interface (Merging and Adding to Pull Request 229)Merge branch 'schedulerf' of git://github.com/mairbek/RxJava into pull-234-merge-ObserveOnRefactor test to use CountDownLatch instead of Thread.sleepMerge branch 'master' into sleepingfix

Conflicts:
	rxjava-core/src/main/java/rx/concurrency/SleepingAction.javaMerge pull request #236 from mairbek/sleepingfix

Fixed Sleeping ActionPriority of the delayed actions in CurrentThreadSchedulerObserveOn and SubscribeOn concurrency unit tests

- these are very rudimentary and may have a determinism problem due to the Thread.sleepMerge pull request #238 from benjchristensen/pull-234-merge-ObserveOn

ScheduledObserver/ObserveOn - Manual Merge of Pull 234Merge pull request #223 from billyy/concat-merge

Concat mergeCurrentThreadScheduler updates.

Unit test that mixes delayed and immediate scheduling.
Added counter to resolve conflicts in case in time between enqueueing took less than 1 ms.Merge branch 'master' into sched-priorityqueue

Conflicts:
	rxjava-core/src/main/java/rx/concurrency/SleepingAction.javaMerge pull request #239 from mairbek/sched-priorityqueue

CurrentThreadScheduler Delayed Execution FixMerge pull request #231 from mairbek/multicast

MulticastMerge pull request #228 from jmhofer/interval

IntervalUpdate TestScheduler to match merged Scheduler changes

- I accidentally merged this code before fixing it to match the changes to AbstractScheduler/SchedulerMerge pull request #240 from benjchristensen/fix-TestScheduler

Update TestScheduler to match merged Scheduler changesMerge branch 'replay' of git://github.com/johngmyers/RxJava into pull-218-merge-replay

Conflicts:
	rxjava-core/src/main/java/rx/operators/OperationTake.java
	rxjava-core/src/main/java/rx/operators/OperationTakeWhile.java
	rxjava-core/src/main/java/rx/subjects/Subject.java

- moved UnsubscribeTester into a package private class as I'm still undecided on long-term placement of this and the OperatorTester class
- merged DefaultSubject and PublishedSubject which were the same thing (lots more unit tests though from this pull request)
- still not sure what the right name is for DefaultSubject/PublishSubject
- renamed RepeatSubject to ReplaySubject to match .Net
- tweaked unit tests with InOrder while reviewing them to understand behaviorMerge pull request #241 from benjchristensen/pull-218-merge-replay

ReplaySubject - Manual Merge of Pull 218Rename DefaultSubject to PublishSubject

- https://github.com/Netflix/RxJava/issues/242Rename from Operator* to Operation* to match conventionMerge pull request #244 from benjchristensen/pre-release-changes

Pre 0.8.0 Release Changes0.8.0-SNAPSHOTGradle Release Plugin - pre tag commit:  'rxjava-0.8.0'.Gradle Release Plugin - new version commit:  'rxjava-0.8.1-SNAPSHOT'.Version 0.8.0manually merging master in...fixing the scheduler methods to fit the new patterntaken over default recursive implementationMerge branch 'master' into sampleadded missing linebreakMerge branch 'master' into combineLatestMerge branch 'master' into SwingScheduleradapted SwingScheduler to new Scheduler interfaceFixed scheduler javadoc, and one single unnecessary cast in takeWhileMerge branch 'master' into multisubscribe

Conflicts:
	rxjava-core/src/main/java/rx/operators/OperatorGroupBy.javaMerge branch 'master' into multisubscribe

Conflicts:
	rxjava-core/src/main/java/rx/operators/OperatorGroupBy.javaFixed a bug in the test scheduler that happened when advancing time by a too little amountFixed millisecond/nanosecond confusion in test scheduler, fixed schedulePeriodically to use now() instead of System.nanoTime() and added a test against scheduling periodicallyTested unsubscription, tooswitched OperationInterval implementation over to use periodic schedulingExecutorScheduler now uses scheduleAtFixedRate instead of recursion when possible.Removed unused imports.Add flatMap alias to mapMany

This is to match with what Java 8 is adding to Stream so we support the duality of Iterable/Collection to Observable.

http://download.java.net/lambda/b86/docs/api/java/util/stream/Stream.html#flatMap(java.util.function.Function)minor renaming and removing unnecessary warning suppression againfixed formatting and removed superfluous checksAdded value class wrapping timestamped valuesAdded toString to Timestampedadded copyright text to Timestamped class, added timestamp operation, reusing mappingRemoved superfluous null checkInitial implementation of AsyncSubjectObservable.toFutureMerge pull request #247 from benjchristensen/flatMap-alias-to-mapMany

Add flatMap alias to mapManyMerge pull request #245 from mairbek/multisubscribe

Moved state from Observable to ObserverMerge pull request #246 from jmhofer/schedulePeriodically

Scheduling actions periodicallyMerge pull request #252 from benjchristensen/toFuture

Observable.toFutureMerge pull request #250 from michaeldejong/subject-implementations

Initial implementation of AsyncSubjectGradle Release Plugin - pre tag commit:  'rxjava-0.8.1'.Gradle Release Plugin - new version commit:  'rxjava-0.8.2-SNAPSHOT'.Version 0.8.1Added `timestamp` method to `Observable`, too.Merge remote-tracking branch 'parent/master' into timestampMerged with master from Netflix repo.Merge branch 'master' into sampleAdded sample methods to observable.Merge branch 'master' into SwingSchedulerImplemented periodic scheduling, too. Needs testing now.Update CHANGES.mdFix multiple subscription bug on operation filter

A new subscription must be created on every subscribe call, otherwise any
subscribe call after the first directly fails.Merge pull request #253 from Treora/master

Fix multiple subscription bug on operation filterMerge pull request #248 from jmhofer/sample

Implemented Sample OperationMerge pull request #249 from jmhofer/timestamp

Timestamp operationAdded tests against periodic scheduling. I hope the delays are stable
yet fast enough...Created `extensions` subdirectory for non-core additions to RxJava and
moved `SwingScheduler` into a new subproject `rxjava-swing`.Tested whether the actions are really executed in the EDT.Increased test delays.Allow creating observables from `AbstractButton`s.Refactored implementation out from SwingObservable, as there will
probably be lots more methods in the long run.Added some api documentation.Renamed `extensions` to `rxjava-contrib`.Merge branch 'SwingScheduler' into swingMoved Swing observables to new subfolder `rxjava-contrib` after merge.Fixed links in the javadocs, mostly.Fixed everything but empty return tags.Cleaned up all empty `@return` tags, too.Removed some unused code, fixed some (Eclipse) warningsAdded key events as source for Swing observables.Added filtering for key codes.Created the initial implementation of BehaviorSubjecttrying to generalize scan, however drop is still missing...found drop (it's called skip here...) - finished with generalizing scanalso adapted type signatures of the reduce methodsAlso added aggregate (alias for reduce, see issue #20).Fixed a typo, added missing error and completion handlingCreated and wired an implementation for the throttle operation on Observables.Switched away from using take and skip again due to concurrency issues.Ensure static star imports are used for test cases.No longer using Notification<T> for scheduling throttled events.Added support for the switch operation.Cleaned up imports and removed unnecessary final keywords in the OperationThrottle class.Reverted changes to junit and mockito imports in the Observable class.Fixed a typo the UnitTest class of OperationThrottle.Merge pull request #254 from jmhofer/SwingScheduler

Swing schedulerMerge pull request #255 from jmhofer/fix-build-warnings

Cleaning up - fixing a lot of build warnings (mostly javadoc)Improved documentation of the BehaviourSubject.Removed synchronized block as per RxJava guidelines (6.7).Merge branch 'master' into improved-scanfixed method signatures and respective javadocs of various aggregate/reduce/scan overloadsMerge branch 'master' into swingMerge branch 'improved-scan' into swingAdded observable for all currently pressed keysAdded basic mouse event observables.Merge pull request #257 from jmhofer/improved-scan

Improved scan, reduce, aggregateadded a missing license headerPublish operator on Observable

https://github.com/Netflix/RxJava/issues/15Replay operator on Observable

https://github.com/Netflix/RxJava/issues/71Cache operator

Cache operator as discussed in https://github.com/Netflix/RxJava/pull/209

Similar to `replay()` except that this auto-subscribes to the source sequence. This comes with the same cautions as `toList` when dealing with infinite or very large sequences.Re-order count increment to make unit tests deterministicremove debug statements from unit testsMerge pull request #263 from benjchristensen/publish-replay-cache

Publish, Replay and Cache Operatorsmoved SwingObservable into the rx.observables packageMerge pull request #262 from jmhofer/swing

A few basic Swing observablesMerge branch 'subject-implementations' of git://github.com/michaeldejong/RxJava into pull-256-merge-BehaviorSubjectRemoving SynchronizedObserver usage from Subject implementations.

- We don't need to add synchronization as the subjects can trust their source Observables to comply with the Rx contract.
- This optimization follows Rx Design Guidelines 6.8. Avoid serializing operators

This was discussed at https://github.com/Netflix/RxJava/pull/256Merge pull request #264 from benjchristensen/pull-256-merge-BehaviorSubject

Merge BehaviorSubject from Pull 256Gradle Release Plugin - pre tag commit:  'rxjava-0.8.2'.Added observables for component events.a few minor cleanups, renamings, javadoc additionsfixing strange compilation problems by specifying the packages directlyMerge pull request #265 from jmhofer/swing

Swing - component event observables and minor cleanupchange from junit to junit-dep

- removes Hamcrest dependencies (http://saltnlight5.blogspot.com/2012/10/whats-up-with-junit-and-hamcrest.html)
- solves conflicts on our CI server (blocking release to Maven Central)Merge pull request #266 from benjchristensen/junit-dep

change from junit to junit-depGradle Release Plugin - new version commit:  'rxjava-0.8.3'.Version 0.8.2Improved key press observable to filter out events of type KEY_TYPED completely.Merge branch 'master' into combineLatesthandled combine functions that throw exceptions and added a test against this caseadded combineLatest static methods to ObservableUpdate README.mdGot rid of the last remnants of synchronization in favor of a concurrent map.Fixed a javadoc parameter.Fixed javadoc warnings.Added a helper for computing relative mouse motion.improved generics for combineLatest (PECS principle)fix concurrency bug in ScheduledObserver

- found a concurrency bug while working on https://github.com/Netflix/Hystrix/issues/123
- the following code would lock up occasionally due to onCompleted not being delivered:

```java
public class RunTest {
    public static void main(String[] args) {
        System.out.println("Starting test...");

        final ArrayList<String> strings = new ArrayList<String>(200000);

        int num = 10000;
        while (true) {
            long start = System.currentTimeMillis();
            final AtomicInteger count = new AtomicInteger();
            for (int i = 0; i < num; i++) {
                new TestService1(2, 5).toObservable().forEach(new Action1<Integer>() {

                    @Override
                    public void call(Integer v) {
                        count.addAndGet(v);
                    }
                });

                new TestService2("hello").toObservable().forEach(new Action1<String>() {

                    @Override
                    public void call(String v) {
                        strings.add(v);
                    }

                });
            }
            long time = (System.currentTimeMillis() - start);
            long executions = num * 2;
            System.out.println("Time: " + time + "ms for " + executions + " executions (" + (time * 1000) / executions + " microseconds)");
            System.out.println("   Count: " + count);
            System.out.println("   Strings: " + strings.size());
            strings.clear();
        }
    }
}
```

- Also made OperationObserveOn not use ScheduledObserver if the `ImmediateScheduler` is chosen to allow an optimization. I believe this optimization is safe because ScheduledObserver does not require knowledge of a Scheduler (such as for now()) and all we do is emit data to the Observer on a scheduler and if we know it's Immediate we can go direct and skip the enqueuing step. This allows shaving off a noticable number of microseconds per execution in the loop above.Merge pull request #268 from benjchristensen/observeOn-fixes

Fix concurrency bug in ScheduledObserverGradle Release Plugin - new version commit:  'rxjava-0.8.4'.Fix concurrency bug in ScheduledObserver

This is a followup to https://github.com/Netflix/RxJava/commit/1fa6ae3be23200c787cc1c25c0bb8cac99ae0d17 that fixed one issue (concurrency) and created another (broke Rx contract by allowing concurrent execution of onNext).

I have reverted back to the previous implementatio and then attempted to fix the concurrency issue again.

I think it ended up being a simple fix … just re-ordering the `enqueue` method to remove the race-condition between the logic protected by the AtomicInteger and adding to the queue.

It's not an atomic operation (adding then processing) so we need to just add to the queue and treat it as an async data structure and keep the AtomicInteger portion to only protecting the "process or not process" logic.

```java
        // this must happen before 'counter' is used to provide synchronization between threads
        queue.offer(notification);
```

This may still have issues but it's now working in all of my concurrency tests (the ones that broken with the original and then my modified version). The tests are not easy to build unit tests out of as they require running for many seconds and non-deterministically causing a race condition so I have not yet spend the time to try and figure out a deterministic unit test hence them not being committed.Merge pull request #269 from benjchristensen/observeOn

Fix concurrency bug in ScheduledObserverGradle Release Plugin - new version commit:  'rxjava-0.8.5'.Tried to adapt according to Ben's review comments.Moving "implementation detail" classes out of public APIMove blocking operators to BlockingObservable

- see https://github.com/Netflix/RxJava/issues/270 for backgroundDeprecating 'toObservable' duplications of 'from' methodsMigrating from 'toObservable' to 'from' and using toBlockingObservable() where neededRewrite concat operation to not block on subscribe

The concat operator previously blocked on calling subscribe until all the
sequences had finished. In quite some cases this results in unwanted (and
unexpected) behaviour, such as when prefixing an infinite Observable
with a fixed one, for example when using startWith (which calls concat):
someInputStream.startWith(123).subscribe(x -> print(x));
This statement will block indefinitely if the input stream is infinite. Also
on finite sequences it seems silly to have to wait for them to finish.

In this new approach the incoming observables are put into a queue, instead
of waiting for the whole sequence to finish. When the first observable
completes, the next one is taken from the queue and subscribed to, and so
on. The queue can be extended while processing the observables, and
onCompleted is only called when both the source of observables has completed
and all observables in the queue have been read.Make unit test more deterministicREADME on internal nature of rx.operators packageSwitch operator should now propagate onError in subsequences.Replaced tabs with spaces.Add new unit test to cover infinite observable being the first sequence.Revert "Add new unit test to cover infinite observable being the first sequence."

This reverts commit 658d824b9f632f79a2b29979a6dfbb1a0a925783.Add new unit test to check for non-blocking.Merge pull request #272 from benjchristensen/BlockingObservable

BlockingObservableMerge pull request #273 from billyy/concat

ConcatMerge pull request #259 from michaeldejong/operation-switch

Added the switch operator to ObservableMerging OperationSwitch with new class locationRemove SLF4J dependencyexclude unit tests from jarstop using deprecated methodRemove javadoc warningsFix unit tests

Not sure why the previous started having issues when removing UnitTests from jar. After spending 30+ minutes on it I just changed the test instead of trying to grok Groovy compile issues.Commenting out exclude until Scala build can be resolved

- this line causes rxjava-scala to fail building and I can't yet figure out whyMerge pull request #274 from benjchristensen/0.9-cleanup

0.9 cleanupMove forEach to BlockingObservable

- was missed in previous refactoringMerge pull request #275 from benjchristensen/forEach-BlockingObservable

Move forEach to BlockingObservable0.9.0-SNAPSHOTGradle Release Plugin - pre tag commit:  'rxjava-0.9.0'.Gradle Release Plugin - new version commit:  'rxjava-0.9.1-SNAPSHOT'.Version 0.9.0Version 0.9.0adding several marble diagrams

several new marble diagrams for previously undiagrammed methodsMerge pull request #279 from DavidMGross/master

Adding marble diagramsDiagrams and some new docs for Observable subclasses

Some marble or marblish diagrams and a bit of new documentation for the
BlockingObservable and ConnectableObservable subclasses.Merge pull request #280 from DavidMGross/master

Diagrams and some new javadoc content for Observable subclassesInitial implementation and wiring of the buffer operators.Restored static imports in Observable.Added static create methods to BufferOpenings and BufferClosings.Added license header to OperationBuffer.Add to marble diagrams

Add several new or more-specific marble diagrams, correct two bad image
links, correct some typosCommentary on constructing an Observable

- I would like to remove the no-arg constructor but not ready to pull the triggerPrevent direct instantiation of BlockingObservable via no-arg constructor

- also questioning why to allow extending this and would like to make it a private constructorCommon approach for IllegalArgumentException on subscribe methods

As brought up in https://github.com/Netflix/RxJava/issues/278 there were inconsistencies in how arguments were being validated on subscribe methods.

All arguments to subscribe are now validated correctly at the beginning of method invocation and IllegalArgumentException thrown if null arguments are injected.

According to Rx Guideline 6.5 a null argument is considered "a catastrophic error occurs that should bring down the whole program anyway" and thus we immediately throw. A null argument should be caught immediately in development and has nothing to do with subscribe invocation which is what guideline 6.5 is talking about (since a null Observer can't have onError called on it anyways).Throw if no onError handler specified

https://github.com/Netflix/RxJava/issues/198

As per Rx Design Guidelines 5.2:

 "when calling the Subscribe method that only has an onNext argument, the OnError behavior will be
 to rethrow the exception on the thread that the message comes out from the observable sequence.
 The OnCompleted behavior in this case is to do nothing."

A new OnErrorNotImplementedException was created so it is explicit as to where the exception is coming from and why.Merge pull request #285 from DavidMGross/master

Several new or more-precise marble diagramsFix PublishSubject non-deterministic behavior on concurrent modification

- changed to take snapshot of observers.values() before iterating in onNext/onError/onCompleted so that nested subscriptions that add to observers can't change the values() iteration
- single-threaded nested subscriptions are now deterministic
- multi-threaded subscriptions will no longer be allowed to race to get into an interating onNext/onError/onCompleted loop, they will always wait until the next
- also improved terminal state behavior when subscribing to a PublishSubject that has already received onError/onCompleted

https://github.com/Netflix/RxJava/issues/282Merge pull request #287 from benjchristensen/error-handling-and-validation

Error handling and validationEditing javadoc comments

Many changes to the javadoc comments, filling in blanks, making comments
more accurate & precise, making formatting more consistent, etc.Javadoc changes

Tuning up the Blocking Observable javadocs, and settling on a consistent
set of terms throughout: Observers (not subscribers) subscribe to
Observables which invoke (not call) the Observers methods (not closures
or functions) in order to make notifications (e.g. error or complete) or
to emit (not output or send) items (not elements or objects or emissions
or values).Synchronize terminalState and subscription logic

- remove the race condition that existed between a subscription coming in while onError/onCompleted was being calledMerge pull request #288 from benjchristensen/issue282-PublishSubject

Fix PublishSubject non-deterministic behavior on concurrent modificationGroupBy GroupedObservables should not re-subscribe to parent sequence

https://github.com/Netflix/RxJava/issues/282

Refactored to maintain a single subscription that propagates events to the correct child GroupedObservables.GroupBy unsubscribe logic

- support unsubscribing from parent and/or child
- The following is now possible:

```
groupBy().take(1).mapMany(group -> group.take(20))
```

- the subscription on the parent will cause new groups to stop being sent, but it will keep sending events until all previously created groups are unsubscribed fromAdd Object overloads for dynamic language support.

Need these until we finish work at https://github.com/Netflix/RxJava/issues/204Give unit test some room for scheduler variability

- I specifically want to be testing with real threads here and not virtual time or a synchronous sequence so am giving it a range of counts that are acceptableMerge pull request #284 from benjchristensen/issue282-groupBy-fixes

GroupBy fixes as reported in Issue 282Add zip of a collection of ObservablesNew BlockingObservable-specific diagram legend

A new diagram legend spells out the BlockingObservable-specific marble
diagram iconography.Unit testing what happens when the number of arguments doesn't match the number of observables.Add javadoc comments to individual OperationFoo filesdefer gets a diagram & javadoc + lots of javadoc changes in Observable

OperationDefer now has a javadoc explanation & marble diagram; I also
made a number of changes to the Observable javadocsjavadoc interlinkings and other javadoc improvementsChanged default scheduler used in buffer operation and removed printStackTrace calldiagram & description of combineLatest() operatorAdding zip(Ob<Ob<?>>)Fixing aggregateJavadocAdded JavaDoc and moved public helper classes of OperationBuffer class to rx.util package.Update Observable.isInternalImplementation, get rid of NullPointerException

NullPointerException has been encountered during my tests. It is because java.lang.Class.getPackage() may return null "... if no package information is available from the archive or codebase" (documented feature).Merge pull request #302 from rgerasimen/patch-1

Update Observable.isInternalImplementation, get rid of NullPointerExcept...Merge pull request #290 from abersnaze/issue103

Issue 103Merge branch 'combineLatest' of git://github.com/jmhofer/RxJava into pull-267-combineLatest

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/operators/OperationCombineLatest.javaMerge pull request #303 from benjchristensen/pull-267-combineLatest

Pull 267 - Merge combineLatestVersion 0.9.1Gradle Release Plugin - pre tag commit:  'rxjava-0.9.1'.Gradle Release Plugin - new version commit:  'rxjava-0.9.2-SNAPSHOT'.Trying to get rid of the Gradle warnings.Improved buffer operation test cases with checks for empty buffers.Merged master into buffer-operation branchadding marble diagram to combineLatest() javadoc

Adding a marble diagram that describes combineLatest() to the javadoc
section for that methodEnsure time is always updatedtyposMerge pull request #309 from josephwilk/typos

A little typo in a comment in the Clojure examplesMerge pull request #308 from NorthNick/master

Ensure now() is always updated in TestScheduler.advanceTo/ByMerge pull request #305 from jmhofer/master

Getting rid of one of the Gradle 1.6 deprecation warningsMerge pull request #281 from michaeldejong/operation-buffer

Operation: bufferRemove stray HEAD lineVarious Javadoc improvements and corrections.fix for case where resume is async and original is still emits events after onErrorhandle multiple onError callsGradle Release Plugin - pre tag commit:  'rxjava-0.9.2'.Gradle Release Plugin - new version commit:  'rxjava-0.9.3-SNAPSHOT'.Version 0.9.2Merge pull request #311 from daveray/update-javadoc

Various Javadoc improvements and corrections.Merge pull request #312 from petermd/fix-errorresumenext

Fix for OperatorOnErrorResumeNextViaObservable and async ResumeRename AtomicObserver to SafeObserver

Rename to be more descriptive of what it has evolved to.Better handling of map function errors

- Stop catching the error and passing to onError and instead let the SafeObserver handle it which will then prevent subsequent onNext calls and/or unsubscribe when a failure occurs.
- This also solves the OnErrorResumeNext issue fixed in https://github.com/Netflix/RxJava/pull/312 but those changes still seem valid so I'll leave them.

Related to https://github.com/Netflix/RxJava/issues/216 and https://github.com/Netflix/RxJava/pull/312Merge pull request #314 from benjchristensen/map-error-handling

Map Error HandlingRemove assertTrustedObservable

- Was no longer working once onError(Exception) changed to onError(Throwable) as the assertions throwing java.lang.Error no longer bypassed the composed Observables.
- It was confusing while locally contextual JUnit verifications as used everywhere else are clear, readable and localized to each testClarify unittest for observeOn with ImmediateScheduler

- spying was removed since it wasn't being used and ImmediateScheduler results in no scheduling being done.Change onError(Exception) to onError(Throwable)

See issue "Observer#onError should use Throwable" for background => https://github.com/Netflix/RxJava/issues/296OnExceptionResumeNext

See https://github.com/Netflix/RxJava/issues/296#issuecomment-21358856 for context.Rename exception to throwable to be clearChange hasException to hasThrowableAdd Error propagation now that we use Throwable.Test with Error instead of RuntimeException

… test the Throwable catch instead of Exception.Merge pull request #315 from benjchristensen/onError-to-throwable

Change onError(Exception) to onError(Throwable) - Issue #296Remove thread.sleep from unit test to speed it up

.. and apparently formatting and imports changed a bunch ...Merge pull request #316 from benjchristensen/fix-slow-unit-test

Remove thread.sleep from unit test to speed it up0.10.0-SNAPSHOT

The `onError(Exception)` to `onError(Throwable)` change is breaking so must bump from 0.9 to 0.10Gradle Release Plugin - pre tag commit:  'rxjava-0.10.0'.Gradle Release Plugin - new version commit:  'rxjava-0.10.1-SNAPSHOT'.Version 0.10.0Add rxjava-android build module + config

Should this be shared with other contribs through the parent module? Lots of copy and paste here.Add HandlerThreadScheduler which schedules actions on an Android Handler threadExpose main thread scheduler through AndroidSchedulers classAdd support for running Robolectric testsAdd unit tests for HandlerThreadSchedulerReduce duplication by making "schedule now" the special case

Forwards to "schedule later" with delay of 0 now.Add empty .gitignore file so that git checks out the values folderMoved sources under main android package.
Excluded the test support package from being included when building a jar or generating javadoc
Javadoc comments addedRemoved the exclude from the javadoc task as it was breaking javadoc generation from the projects root folderUpgrade to Robolectric 2.0 and remove all the things...Merge pull request #318 from mttkay/android

Initial support for scheduling on Android Handler threadsGradle Release Plugin - pre tag commit:  'rxjava-0.10.1'.AtomicObservableSubscription to SafeObservableSubscriptionMerge pull request #321 from benjchristensen/android-merge

AtomicObservableSubscription to SafeObservableSubscriptionGradle Release Plugin - new version commit:  'rxjava-0.10.2'.Create README.mdUpdate README.mdUpdate README.md

Added sample usage of Android Handler schedulers.Merge pull request #322 from mttkay/master

Update Android README.mdMake rxjava-core typesafe

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/observables/BlockingObservable.java
	rxjava-core/src/main/java/rx/subjects/PublishSubject.javaReworked Scala adaptor to use implicits in RxImplicits, rather than code generationRemoving JRuby adaptor (temporarily)Removing Java ClojureAdaptor - will be replaced by an idiomatic Clojure versionRemoving Java GroovyAdaptor - will be replaced by Groovy idiomatic versionCleaning up rxjava-swingRemove FunctionLanguageAdaptor from rxjava-coreCleaning up rxjava-android build.gradleAction interfacesAction Marker InterfaceRemove repetitive Scheduler overloads.Groovy ExtensionModule to support groovy.lang.Closure

This adds support for the Groovy closure by adding extension methods that overload Action/Function.0.11.0-SNAPSHOTObservable API reduction

- remove static methods that are not entry points (creators or combinatorial)
- remove deprecated methods

This change was done to:

- Reduce the footprint of the API
- Clarify the API so instance methods are preferred unless the static method is appropriate as an entry point
- Remove duplicate method signatures (such as a buffer method) where the only difference was one was static. This actually causes issues at the bytecode level with dynamic languages since the only difference between them is a modifier making one of them static. Some dynamic languages have a hard time choosing between the two methods when both have the same signature.Move Observable UnitTests

The Observable class is huge by nature as it is the facade for all operators. Due to this it represents all functionality and should not have it's tests inside it. They are moved to /src/test/ so as to allow breaking them up into lots of individual classes.Fix RxJava Groovy Unit Tests after static method refactorre-added combineLatest methods that got lost due to too optimistic super/extends genericsReactivated the rxjava-core testsrepaired rxjava-swing to work with new scheduler and observable apiMerge pull request #2 from jmhofer/reactivate-core-tests

Reactivate core tests and combineLatestAdded dummy Clojure class and stopped compiling Clojure examples to get rxjava-clojure JAR generation unblockedMerge pull request #2 from benjchristensen/static-core

Groovy, Statics, FixesMake Functions.from typesafeRemove subscribe(Map<String, Object>)

We considered it being <String, Action> but that is also awkward as it's not a real functional interface.
Also because of type erasure extension methods aren't super helpful here as Map<String, Action> collides with Map<String, Closure>Merge pull request #3 from benjchristensen/static-core

Remove subscribe(Map<String, Object>) and cleanup Functions.fromAdding mavenLocal() for local resolutionUpdate rxjava-clojure adaptor.

Added rx.lang.clojure.interop namespace with fn and action macros.
Updated examples.
Updated README.Merge pull request #4 from daveray/static-core-clj

Static core cljMerge pull request #323 from mattrjacobs/static-core

Static coreJavadoc CleanupOrganize ImportsClojure Examples

- renamed file endings back to .cljLicense/Copyright HeadersImprove unit test determinism

… apparently the before/after was a race condition … adding @Before seems to have made it better for me.Fix build issues for rxjava-clojure examplesMerge pull request #324 from benjchristensen/0.11-cleanup

0.11 CleanupGradle Release Plugin - pre tag commit:  'rxjava-0.11.0'.Comment on 'provided' scope0.11.0-SNAPSHOTGradle Release Plugin - pre tag commit:  'rxjava-0.11.0'.0.11.0-SNAPSHOTScala 2.10.1Gradle Release Plugin - pre tag commit:  'rxjava-0.11.0'.Gradle Release Plugin - new version commit:  'rxjava-0.11.1-SNAPSHOT'.Version 0.10.1Update README.mdUpdate README.mdVersion 0.11.0Preserve metadata on fn and action macros

Because they're macros, rx/fn and rx/action would lose metadata attached
to them, in particular type hints which are slightly important to
disambiguate overloaded Observable methods. Fixed.Merge pull request #325 from daveray/clj-fn-metadata

Preserve metadata on fn and action macrosGradle Release Plugin - pre tag commit:  'rxjava-0.11.1'.Gradle Release Plugin - new version commit:  'rxjava-0.11.2-SNAPSHOT'.Version 0.11.1Update README.mdmaking Func0 covariant in its return type, cleaning up a few warnings, removing a bit of unused codeadded variance to Func1 (hopefully) everywhere...added variance to Func2, tooadded variance to all other Func*; this breaks Scala for good, it seems, as long as Observable remains invariantadded variance to Action*, toolots of Observer<? super X>Make DummyObservable visible to clojureTest classpath.

RxJava issue #327. Moved DummyObservable into main so that it's
compiled and available when the clojureTest task executes. Perhaps
someone with stronger Gradle skills can figure out how to put this Java
class in src/test and get things to work out. Correctly. For the time
being, several clean/build cycles worked fine for me.updated to Scala 2.10.2 again, repaired Scala tests, generalized two more zip methodsMerge pull request #330 from daveray/issue-327-clojure-build

Make DummyObservable visible to clojureTest classpath.RxJavaPlugin Unit Tests

Attempt to fix non-determinism https://github.com/Netflix/RxJava/issues/329
Made unit tests work on private instances in each test rather than against static global.Improve testNoBufferingOrBlockingOfSequence determinism

Removed use of Thread.sleep to fix non-determinism issue reported in https://github.com/Netflix/RxJava/issues/329Improve testRecursiveScheduler2 determinism

Removed use of Thread.sleep and changed assertion to allow for the expected race condition between the counter loop and unsubscribe event to fix non-determinism issue reported in https://github.com/Netflix/RxJava/issues/329Improve determinism of GroupBy.testUnsubscribe

Increased delta value from 2 to 10 to try and resolve issue reported in issue https://github.com/Netflix/RxJava/issues/329Make Materialize.testMultipleSubscribes test deterministic

Refactored to use BlockingObservable instead of non-blocking subscribe and waiting on the underlying thread (it was only waiting on one of two threads running).
This should resolve one of the issues reported in http://github.com/Netflix/RxJava/issues/329Merge pull request #332 from benjchristensen/issue-329-unit-tests

Issue 329: Fix non-deterministic unit testsUnitTest confirming compilation failure without super/extends and success with them.

- only testing zip operator at this timeNeed to stay pinned on Scala 2.10.1 still …

I can't get through release process to maven central on 2.10.2 for some reason so pinning until that is solved.Zip: Order of Generics and Artities 5-9

Changed order of generics on zip (and combineLatest) to match the rest of the project.
Added arties 5, 6, 7, 8, 9 to zip operator.

https://github.com/Netflix/RxJava/issues/333 Order of Generics on Zip Operator
https://github.com/Netflix/RxJava/issues/103 Add more arities to zip operatorMerge pull request #1 from benjchristensen/super-extends-additions

Zip and CombineLatest Operators: Generic Order and More Aritiesadapted RxImplicits tests againt zip to new generics order, renamed two more reduceFunctions to zipFunctiongeneralized everything in Observable that deals with covariance of observablesTimestamped, Notification and Future are now also treated as covariantadded an unnecessary explicit cast because the Jenkins java compiler is unhappy otherwise?Generalized all the operators, toogeneralized BlockingObservable and the execution hook furtheradded a few 'compiler' testsMerge remote-tracking branch 'build/multi-project' into update-gradle-wrapper-Aug2013

Conflicts:
	gradle/wrapper/gradle-wrapper.propertiesMove githubProjectName earlier and set explicitly.Update to Gradle 1.6 to match what was already in RxJava, but this version hasn't been tested thoroughly.Merge pull request #341 from quidryan/update-gradle-wrapper-Aug2013

Update gradle wrapper to latestScala 2.10.+

Our internal build system should be capable of picking up the latest now (2.10.2) so reverting the pinning I did earlier.[Gradle Release Plugin] - pre tag commit:  '0.11.2'.[Gradle Release Plugin] - new version commit:  '0.11.3-SNAPSHOT'.Version 0.11.2Version 0.11.2Version 0.11.2removed some <? super Throwable>s because that's rather unnecessaryMerged in master so that the gradle pull request build has a chance to work againFixing Maven orgId (accidentally got camel-cased)[Gradle Release Plugin] - pre tag commit:  '0.11.3'.[Gradle Release Plugin] - new version commit:  '0.11.4-SNAPSHOT'.Merge branch 'super-extends' of git://github.com/jmhofer/RxJava into covariant-supportAdd OnSubscribeFunction and refactor to support it

This is related to ongoing work related to covariant support at https://github.com/Netflix/RxJava/pull/331Adding implicit for OnSubscribeFuncChange OnSubscribeFunc.call to OnSubscribeFunc.onSubscribe

Avoid name collions for `call` method with Func* interfaces to simplify interop with Clojure etc.Merge pull request #343 from benjchristensen/covariant-support

Covariant Support with super/extends and OnSubscribeFuncUpdate Clojure interop to support new OnSubscribeFunc with rx/fn.Remove unnecessary Observable constructor

- fixed unit tests that relied on itMerge pull request #345 from benjchristensen/unit-test-cleanup-with-create

Remove unnecessary Observable constructorMerge pull request #344 from daveray/covariant-support-clj

Update Clojure interop to support new OnSubscribeFunc with rx/fn.BlockingObservable Refactor

No longer extends from Observable. If someone chooses to use BlockingObservable the intent is to leave the Observable so it shouldn't show the non-blocking operators.
Remove duplicate static methods, similar to how done on Observable in earlier commit.Merge pull request #346 from benjchristensen/BlockingObservable

BlockingObservable RefactorFixing Scala unit tests after previous commits accidentally broke themMerge pull request #347 from benjchristensen/scala-unit-tests

Fixing Scala unit tests after previous commits accidentally broke themCleanup JavadocsSwitchDo

- remove instance method
- rename to switchOnNext (leaving behind deprecated switchDo for now)

See https://github.com/Netflix/RxJava/issues/342Merge window operator commit to master

This is from commit http://github.com/RallySoftware/RxJava/commit/71335e4ed1531b1542c7b304a6d3337145e0b2dfMerge branch 'OperationWindow' of https://github.com/RallySoftware/RxJava

- updated to use new OnSubscribeFunc
- updated to use super/extends genericsMerge pull request #348 from benjchristensen/switchOnNext

switchDo to switchOnNextmade WINDOW_MAKER typedremoved raw Func0s from the chunksmade the public window methods more generic via the basic (lol) super/extends fluff; also simplified api by removing a few useless super definitions (there's no super of Opening and Closing)Merge pull request #349 from benjchristensen/window-operator

Window Operator0.12.0-SNAPSHOT[Gradle Release Plugin] - pre tag commit:  '0.12.0'.[Gradle Release Plugin] - new version commit:  '0.12.1-SNAPSHOT'.Version 0.12.0Version 0.12.0 Changesset up stubs for Scala Observable and its testingadd methods to Scala Wrapper (1)add methods to Scala Wrapper (2) and find scalac bugPulled in all the changes from master that happened in the meantime...removed a few unused importswork around scalac bug by removing `extends AnyVal`work around scalac bug by giving explicit type parameter to Observable constructoradd methods to Scala Wrapper (3) and find interesting questions

They are marked with TODOFix Observable.window static/instance bug

- reported at https://github.com/Netflix/RxJava/pull/349#issuecomment-23946707Merge pull request #351 from benjchristensen/window-fix

Fix Observable.window static/instance bugMerge pull request #350 from jmhofer/swing

A little Swing wrap-up[Gradle Release Plugin] - pre tag commit:  '0.12.1'.[Gradle Release Plugin] - new version commit:  '0.12.2-SNAPSHOT'.add methods to Scala Wrapper (4)Merge branch 'master' of github.com:Netflix/RxJava into idiomaticscalaadd methods to Scala Wrapper (5) (window)adding Func5-9 and N to the wrapperMerge pull request #352 from abersnaze/groovy-wrapper

Adding Func5-9 and N to the wrapper[Gradle Release Plugin] - pre tag commit:  '0.12.2'.[Gradle Release Plugin] - new version commit:  '0.12.3-SNAPSHOT'.Version 0.12.1 and 0.12.2Take Operator Error Handling

Unit test for https://github.com/Netflix/RxJava/issues/217Merge pull request #353 from benjchristensen/take-unit-test

Take Operator Error Handlingimplemented count operator (#32)added sum operationsadded test against long sum, too (#83)implemented average operation (#25)implemented skipWhile and skipWhileWithIndex (#80)added interval methods to Observable, where they were still missingremoved unused importsAdded the two variants of the first operator.Added FirstOrDefault operationAdded link urls to the msdn descriptionsMerge pull request #354 from jmhofer/count-sum-average

Count, Sum, Average implementationsMerge pull request #355 from jmhofer/skip-while

implemented skipWhile and skipWhileWithIndex (#80)Merge pull request #356 from jmhofer/interval

Added interval methods to Observable, where they were still missingadd Observer wrapper to make subscribe(Observer[T]) workCreate README.mdUpdate README.mdUpdate README.mdObservable.from: refactor varargs to overloads

https://github.com/Netflix/RxJava/issues/359 Varargs cause compiler warningsObservable.concat: refactor varargs to overloads

https://github.com/Netflix/RxJava/issues/359 Varargs cause compiler warnings

As part of this I also changed this:

```java
public static <T> Observable<T> concat(Observable<Observable<? extends T>> observables)
```

to

```java
public static <T> Observable<T> concat(Observable<Observable<T>> observables)
```

I documented the reasoning of this at https://github.com/Netflix/RxJava/issues/360#issuecomment-24121217Observable.merge: refactor varargs to overloads

https://github.com/Netflix/RxJava/issues/359 Varargs cause compiler warningsObservable.startWith: refactor varargs to overloads

https://github.com/Netflix/RxJava/issues/359 Varargs cause compiler warningsGeneric covariance of concat.

See https://github.com/Netflix/RxJava/issues/360#issuecomment-24125591Observable.mergeDelayError: refactor varargs to overloads

https://github.com/Netflix/RxJava/issues/359 Varargs cause compiler warningsVararg change unit tests in GroovyMerge pull request #361 from benjchristensen/issue-359-varargs

Fix vararg issues reported in https://github.com/Netflix/RxJava/issues/359Merge branch 'first-firstDefault' of git://github.com/jmhofer/RxJava into operator-first-merge

Conflicts:
	rxjava-core/src/test/java/rx/ObservableTests.java

This merges pull request https://github.com/Netflix/RxJava/pull/357

Also aliased first with takeFirst to match takeLast.Merge pull request #362 from benjchristensen/operator-first-merge

Merge 'first' Operatorunit tests for covariance

- refactoring so not everything for the entire Observable ends up in a single classMerge pull request #363 from benjchristensen/reduce-covariance

unit tests for covarianceadditions to testsMerge pull request #364 from benjchristensen/tests

additions to testsMerge branch 'operation-throttle' of git://github.com/michaeldejong/RxJava into throttle-merge

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/concurrency/TestScheduler.javaMerge branch 'master' of github.com:Netflix/RxJava into idiomaticscalaOperator: throttleWithTimeout

Another take on `throttle` … I believe this matches Rx.Net behavior.

This will wait until timeout value has passed without any further values before emitting the received value.Operator: throttleFirst

Another take on `throttle` … this delivers the first value in each window.Update javadoc for throttleLastUpdate javadoc for throttleWithTimeoutget rid of wrapper around Observeradd methods to Scala Wrapper (6)

includes typesafe dematerializemake dematerialize infer everythingadd methods to Scala Wrapper (7)RefCount work in progressRefCount work in progressMerge branch 'operation-throttle' of git://github.com/michaeldejong/RxJava into throttle

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/concurrency/TestScheduler.java(does not compile!) refactoring of package structure

Compiles in eclipse, but not with gradle, because there
are package objects and packages with the same name.Merge branch 'throttleWithTimeout' into throttle

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'throttleLast' into throttle

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/operators/OperationThrottle.javaMerge branch 'throttleFirst' into throttle

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javarefactoring package structureOperators: throttleWithTimeout, throttleFirst, throttleLast

- javadocs explaining differences
- link between throttleLast and sample (aliase)
- refactored throttleFirst to be a more efficient implementations
- concurrency changes to throttleWithTimeoutUse 'debounce' as proper name for ThrottleWithTimeout which unfortunately is the poorly named Rx Throttle operator.

http://drupalmotion.com/article/debounce-and-throttle-visual-explanation

Debounce: Think of it as "grouping multiple events in one". Imagine that you go home, enter in the elevator, doors are closing... and suddenly your neighbor appears in the hall and tries to jump on the elevator. Be polite! and open the doors for him: you are debouncing the elevator departure. Consider that the same situation can happen again with a third person, and so on... probably delaying the departure several minutes.

Throttle: Think of it as a valve, it regulates the flow of the executions. We can determine the maximum number of times a function can be called in certain time. So in the elevator analogy.. you are polite enough to let people in for 10 secs, but once that delay passes, you must go!

http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
http://www.illyriad.co.uk/blog/index.php/2011/09/javascript-dont-spam-your-server-debounce-and-throttle/Remove covariance of scan/reduce since consumer/producer are the same <T, T, T>

See https://github.com/Netflix/RxJava/issues/360#issuecomment-24203016Javadoc with imagesChange zip method signature from Collection to Iterable

Fix javadoc typos.Merge pull request #370 from benjchristensen/zip-collection-to-iterable

Change zip method signature from Collection to IterableOperator: Retry

https://github.com/Netflix/RxJava/issues/72Merge pull request #371 from benjchristensen/retry

Operator: RetryJava example using Scala Observable codeIntervalDemoadd usability testsadd operation merge (as instance method)add a int-version of buffer and window...

...and detect another compiler bugMerge branch 'master' of github.com:Netflix/RxJava into idiomaticscalaMerge and work on RefCountreplace cast in window() by ascription

see https://issues.scala-lang.org/browse/SI-7818 for detailsMerge and work on RefCountSimplify reduce/scan generics

Updates based on discussion at https://github.com/Netflix/RxJava/pull/369#issuecomment-24255958Merge pull request #369 from benjchristensen/reduce-and-scan-covariance

Remove covariance of scan/reduceMerge pull request #368 from benjchristensen/throttle-and-debounce

Operators: Throttle and DebounceMerge and work on RefCount0.13.0-SNAPSHOT[Gradle Release Plugin] - pre tag commit:  '0.13.0'.[Gradle Release Plugin] - new version commit:  '0.13.1-SNAPSHOT'.Version 0.13.0Merge branch 'master' of github.com:Netflix/RxJava into idiomaticscalafix reduce to work with new no-wildcards Java reduceadd debounce/throttle methodsa few warnings, javadoc, and one missing scheduler parameterinitial version of a distinctUntilChanged operatoradded methods taking key selectorsAdded distinctUntilChanged member methods to Observablefixed all the javadoc build warningsrefactor package structure

package object scala and package scala now can coexistremove sleep() from RxScalaDemoBlockingObservable: add foreach and make it extend AnyValfixed javadoc descriptions in the operatoradd apply() which takes Java Observable

new Observable(...) can be replaced by Observable(...)implemented distinct operatoradded javadoc comments to Observable.distinctrestore old RxImplicits and RxImplicitsTestsmark RxImplicits and RxImplicitsTests as oldcomplete WithFilterTODO list for Scala adaptorupdate READMEadd more methods and type aliasesadd license headersMerge pull request #376 from samuelgruetter/idiomaticscala

Idiomatic Scala AdaptorMerge pull request #373 from jmhofer/throttle-debounce-fix

a few warnings, javadoc, and one missing scheduler parameterMerge pull request #374 from jmhofer/distinctUntilChanged

Implemented distinctUntilChanged operationMerge branch 'distinct' of git://github.com/jmhofer/RxJava into distinct-merge

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #377 from benjchristensen/distinct-merge

Distinct operatorUnitTests while working on EventStream use casesMerge pull request #378 from benjchristensen/tests

UnitTests while working on EventStream use cases[Gradle Release Plugin] - pre tag commit:  '0.13.1'.[Gradle Release Plugin] - new version commit:  '0.13.2-SNAPSHOT'.Version 0.13.1added test with multiple subscribersadded missing mockadded another test against multiple staggered subscriberswrapped subscription so that interval works for multiple subscribers and added a test for staggered subscriptions with publish/connect, tooinitial introduction of an equality comparator into distinct implementation, still needs testadded test against comparator usageadded both new variants to observableadded comparator versions of distinct operation, tooadded tests against multiple subscriptions, just to be on the safe sideimplemented mapWithIndexsimplified error handling as this is already done on the outsideMerge pull request #379 from jmhofer/interval-multiple-subscribers

Make `interval` work with multiple subscribersMerge pull request #380 from jmhofer/distinct-with-comparator

Implemented `distinct` and `distinctUntilChanged` variants using a comparatorRemoving deprecated RxImplicits from rxjava-scalafirst Scala groupBy implementationstart groupBy examplesMerge pull request #381 from jmhofer/mapWithIndex

Implemented `mapWithIndex`Merge branch 'master' of github.com:Netflix/RxJava into groupByImplemented the 'any' operatorupdate scala READMEAdd 'any' operator to ObservableSolve the conflict of 'any' method name in unit testsFollow the correct logic of 'any' operator. See #385make Olympics example data timedmore examples/tests in RxScalaDemofinish groupBy examplemove ImplicitFunctionConversions out of internal packageadd comment to ImplicitFunctionConversions and reformat it

to use indent of 2 spaces, as all other files in rx.lang.scalause Java Subject<T, R> as contravariant in T and covariant in Radd multicast, publish, replayadd methods to BlockingObservablestart completeness testremove scalatest packages from OSGI importsImplemented the 'elementAt' and 'elementAtOrDefault' operators. see #41Merge pull request #389 from samuelgruetter/idiomaticscala

Scala Adaptor ImprovementsMerge pull request #382 from mattrjacobs/remove-old-rximplicits

Removing deprecated RxImplicits from rxjava-scala[Gradle Release Plugin] - pre tag commit:  '0.13.2'.[Gradle Release Plugin] - new version commit:  '0.13.3-SNAPSHOT'.Version 0.13.2completeness test for instance methods in Scala adaptorMerge branch 'master' of github.com:Netflix/RxJava into completenesstestextract static methods in completeness testcompleteness test now also checks static methodsall move explanations why methods are not present in Observable to CompletenessTestadd zipWithIndex, sum, product, and an explanation why no averageAdding marble diagramsAdding marble diagramsFix ObserveOn, NewThreadScheduler and ScheduledObserver bugs

@headinthebox and I were working on some code and found differences in behavior between Rx.Net and RxJava with observeOn. This commit should fix that.Parallel Operator

This operator came out of discussions and work with @headinthebox to allow explicit and composable declaration of blocks of work that can be scheduled for parallel execution.

An Observable event stream will be sharded using groupBy using a value from Scheduler. degreeOfParallelism() (defaulting to number of CPU cores) and perform the defined work in parallel.

Instead of having various parallel operators like parallelMap, parallelFilter parallelScan etc this can work generically for any operators or sequence of operators.Making Observable.synchronize an instance method rather than staticReorg fieldsMerge pull request #391 from brad-uk/master

remove scalatest packages from OSGI importsChange Interval and Sample default Scheduler

Change to use built-in thread-pools rather than creating a new Executor on each invocation.
The built-in ones are shared across all operators, have threads ready, are marked as daemon threads so don't prevent system shutdown, and are named for clarity when looking at thread dumps and debuggers.Merge pull request #393 from benjchristensen/parallel-operator

Parallel Operator & ObserveOn/ScheduledObserver FixesMerge pull request #394 from benjchristensen/issue-388

Change Interval and Sample default Scheduler0.13.4-SNAPSHOT

Discarding 0.13.3 as the build upload to Sonatype failed so 0.13.3 will be skipped.[Gradle Release Plugin] - pre tag commit:  '0.13.4'.[Gradle Release Plugin] - new version commit:  '0.13.5-SNAPSHOT'.Version 0.13.4Merge branch 'master' into idiomaticscalaadd merge operation and examples

and try to make Olympics groupBy work with timing, but did not
work due to problems with RxJava groupBy, see pull #289add methods and examplesfirst and firstOrElseadd distinct and distinctUntilChanged, but

those with custom equality are not yet there because of issue #395add concat, length, retry; rename replay()->replay, merge->flattenadd `parallel` and exampleadd mergeDelayError and flattenDelayErroradd combineLatest, apply(java Future), remove docu without implupdate Scala TODO listadd markdown export to CompletenessTestadd Scala/Java Observable comparisondelete comparison.md because tooltips do not work on githubObservable API for Apache HttpAsyncClient 4.0Merge pull request #396 from samuelgruetter/idiomaticscala

Add missing methods to Scala Adaptor[Gradle Release Plugin] - pre tag commit:  '0.13.5'.[Gradle Release Plugin] - new version commit:  '0.13.6-SNAPSHOT'.Merge branch 'any' of git://github.com/zsxwing/RxJava into merge-385-anyChange 'any' to 'isEmpty'/'exists'Merge pull request #398 from benjchristensen/merge-385-any

Merge 'any' Pull RequestMerge branch 'element_at' of git://github.com/zsxwing/RxJava into pull-390-element-at

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaAdded missing license headerMerge pull request #399 from benjchristensen/pull-390-element-at

Merge Pull #390 - elementAtMerge pull request #397 from benjchristensen/apache-async-http

Observable API for Apache HttpAsyncClient 4.0Removing 'comparator` overloads of `distinct`

Removing these fairly recently added overloads as they turn out to not be the best approach.

Discussion ongoing as to how to implement them at https://github.com/Netflix/RxJava/issues/395Merge pull request #400 from benjchristensen/distinct-comparator

Removing 'comparator` overloads of `distinct`Update CHANGES.md0.14.0-SNAPSHOT[Gradle Release Plugin] - pre tag commit:  '0.14.0'.[Gradle Release Plugin] - new version commit:  '0.14.1-SNAPSHOT'.Implemented the 'DefaultIfEmpty' operator. See #34Version 0.14.0Create README.mdUpdate README.mdUpdate README.mdUpdate README.mdUpdate README.mdFixes to rxjava-apache-http

- made Content-Type inspection more reliable
- other small improvmentsMerge pull request #402 from benjchristensen/event-stream-http

Fixes to rxjava-apache-http[Gradle Release Plugin] - pre tag commit:  '0.14.1'.[Gradle Release Plugin] - new version commit:  '0.14.2-SNAPSHOT'.Version 0.14.1Update README.mdUpdate README.mdImplemented 'cast' operatorAdded the MSDN linkAdded a klass parameterImplemented the 'ofType' operatorUsed 'cast' to remove SuppressWarningsUsed 'isInstance' to replace 'isAssignableFrom' and added a unit testMerge branch 'master' into castMerge branch 'master' into default_if_emptyMerge branch 'master' of github.com:Netflix/RxJavaFinished RefCount - all tests passRemoved classes dirMinor tweakImplemented publishLastdo not run RxScalaDemo on each build,

because it does not do automatic testingImplemented 'Synchronize' with 'lock'add Documentation section to READMEmove examples from `src/main/scala` to `src/examples/scala`

and tweak build.gradle to make this workmove MovieLibUsage.java from project rxjava-scala-java to project rxjava-scala and delete project rxjava-scala-javahow to add RxJava core to scaladoc inputmake Subscription an implicit value classMerge pull request #409 from zsxwing/synchronize-lock

Implemented 'Synchronize' with 'lock'Merge pull request #408 from samuelgruetter/idiomaticscala

Do not run RxScalaDemo on each buildOpening/Closing, Timestamped with unapply, BlockingObservable with WithFilterMerge pull request #401 from zsxwing/default_if_empty

Implemented the 'DefaultIfEmpty' operator. See #34Merge pull request #403 from zsxwing/cast

Implemented the 'cast' and 'ofType' operatorsMerge branch 'master' of github.com:johnhmarks/RxJava into pull-407-refCountremove `implicit` from Timestampedwork around scalac bug by renaming companion object `Timestamped` to  `TimestampedObject`Removed static variant of refCountupdate counter before triggering latchMerge branch 'master', remote-tracking branch 'origin'[Gradle Release Plugin] - pre tag commit:  '0.14.2'.[Gradle Release Plugin] - new version commit:  '0.14.3-SNAPSHOT'.Version 0.14.2Timestamped and its companion can now have the same nameImplemented the 'Contains' operatorAdd one more unit testscaladoc for Observer, Subject, Scheduler, and

new Notification class with unapply (scalac crashes)put unapply of Notifications into companions

no more scalac crashadd rx.lang.scala.concurrency.Schedulersimprove scaladocupdate README and TODOjavadoc -> scaladoc translation

with the following replacements:

\{@link (\w+)#(\w+)\s+(\w+)\}
[[$1.$2 $3]]

\{@link (\w+)#(\w+)\((.*)\)\}
[[$1.$2($3)]]

\{@link #(\w+)\}
[[Observable.$1]]

\{@link (\w+)#(\w+)\}
[[$1.$2]]

<code>
`

</code>
`

\*\s*<p>\s*\n
*\n

\{@link (\w+)\}
[[$1]]

\{@link ((\w|\.)+)\}
[[$1]]

\[\[rx\.
[[rx.lang.scala.

\{@code\s*(([^}])+)\}
`$1`

@param <(\w+)>
@tparam $1

&lt;(\w+)&gt;
[$1]

<(\w+)>
[$1]

"timespan" argument
`timespan` argument

"timeshift" argument
`timeshift` argument

\[\[Action0\]\]
function

plus some manual replacementsstart TestSchedulerwork on Schedulers

rx.lang.scala.concurrency.UnitTest.testInterval failsScheduler and TestSchedulerFixed the issue of takeLast(items, 0)Implemented the 'SkipLast' operatorUpdated the commentsFixed the issue about null valuesOptimize for 'count == 0'add exists and isEmptyTestScheduler examplemake all constructors privateupdate TODOImplemented the 'Empty' operator with schedulerAdded MSDN linksAdded missing license headerallow to construct Observables ina similar way as futuresimplicit function conversion hack just for nicer scaladocmake defer implementation more explicitapply review patchhead, headOrElse, zip(3), zip(4)changes from review + scaladoc improvementsimprove scaladocrename fold to foldLeftremove takeWhileWithIndexuse Tuple instead of Timestampedupdate completeness testImplement JRuby function wrapping support

Whenever a RubyProc is passed into an Observable method, wrap it in
a Java class that implements the correct RxJava interfaces. This avoids
ambiguous method errors and costly proxy instantiations by JRuby's
default method delegation logic.JRuby wrapper specsJRuby performance testHandle OnSubscribeFuncs correctly in JRuby interop logic

OnSubscribeFunc#onSubscribe expects to return a Subscription. I am
unable to successfully cast the return value of a RubyProc, even if
that value _is_ an object that implements the Subscription interface,
into a Subscription in Java-land (Java reports that ConcreteJavaProxy
cannot be cast). Instead I allow JRuby to handle OnSubscribeFunc
arguments through its default proxy logic, which works correctly.JRuby READMEJRuby license headersUp rspec versionJRuby README include usage instructionsMerge branch 'master' of github.com:johnhmarks/RxJava into pull-407-refCountUnit Test while testing refCount submissionMerge pull request #425 from benjchristensen/pull-407-refCount

Manual Merge of Pull Request #407Merge pull request #410 from zsxwing/contains

Implemented the 'Contains' operatorMerge pull request #411 from petermd/fix-schedtests

update counter before triggering latchMerge pull request #413 from zsxwing/take-last

Fixed the issues of takeLast(items, 0) and null valuesMerge pull request #414 from zsxwing/skip-last

Implemented the 'SkipLast' operatorMerge pull request #415 from zsxwing/empty-with-scheduler

Implemented the 'Empty' operator with schedulerMerge pull request #420 from samuelgruetter/scalaadaptor

Scala AdaptorMerge pull request #422 from ragalie/jruby

JRuby function wrapping supportCombine RefCountTest and RefCountTestsRemove PublishSubject Terminal State Behavior

The PublishSubject implementation was performing onError/onCompleted unsubscribe logic that was put in place long ago and I am now pretty sure it was wrong.

This was revealed while playing with `refCount` which intends on allowing a re-subscription to the source once new Observers arrive. PublishSubject was preventing that.

The one use case that I'm still wondering about though is if someone subscribes to a PublishSubject after it has emitted onCompleted and isn't "restarted". That Observer would wait forever if it is a "single-shot" PublishSubject use case. I'm not sure if that's just a bad use and fits into the "don't do that" scenario, or if it's a legit issue that has a solution.

Rightn now this code is "thread-safe" in the visibility sense, but it's not atomic and could have race conditions between adding/removing Observers and event notifications. I don't think that's an issue as if someone is concurrently adding/removing it's always a race, but am not 100% sure if there's a use case I'm missing. This also assumes (as it always did) that someone is not invoking onNext concurrently as that would break the Rx contract.Implemented the 'IgnoreElements' operatorImplemented the 'Throw' operator with schedulerUsed 'subscribeOn' instead of 'observeOn'Merge pull request #424 from zsxwing/ignore-elements

Implemented the 'IgnoreElements' operatorMerge pull request #416 from zsxwing/throw

Implemented the 'Throw' operator with schedulerMerge pull request #426 from benjchristensen/publish-subject-resubscribe

PublishSubject ReSubscribe for publish().refCount() BehaviorRevised version of Android UI component operatorVersion 0.14.3Drop use of WeakReferences and use a custom subscription insteadUpdate build.gradle

Commenting out rspec until until internal Netflix build system can handle ruby gems so that I can build and release 0.14.3[Gradle Release Plugin] - pre tag commit:  '0.14.3'.[Gradle Release Plugin] - new version commit:  '0.14.4-SNAPSHOT'.Update CHANGES.mdupdate TODOs according to meetingFixed issue #428Drop volatile in favor of failing fast if not subscribed from UI threadOnly release references in unsubscribe

We decided it's better to leave it to the caller when it's appropriate to release, cf. #1Add guards around log statementsRemove isFinishing check when calling back to activities

We decided it's sufficient for the callback to be safe as long as the caller unsubscribes in onDestroySerialSubscription and Timeout operatorSerialSubscription and Timeout operatorFixed path to RxScalaDemo.scalaImproved efficiency of SerialSubscription and unit tested TimeoutFixed a couple of warnings and reverted change to importsrx-apache-http now recognizes "Transfer-Encoding: chunked" as an HTTP streamMerge pull request #432 from codecurve/master

Fixed path to RxScalaDemo.scalaMerge pull request #430 from zsxwing/issue-428

Fixed issue #428Merge pull request #435 from mattrjacobs/http-chunked

rx-apache-http recognizes "Transfer-Encoding: chunked" as an HTTP streamScheduler overload with recursive supportBugFix: unsubscribe was not propagating to parent Observable on merge(Observable<Observable<T>>)Merge pull request #437 from benjchristensen/bug-fixes

Fixes: Scheduler and Merge[Gradle Release Plugin] - pre tag commit:  '0.14.4'.[Gradle Release Plugin] - new version commit:  '0.14.5-SNAPSHOT'.Version 0.14.4mergeInitial Kotlin supportGradle changes for Kotlin SupportInitial Kotlin supportBasic Kotlin tests completedKotlin ExamplesLicense and READMEKotlin VersionDelete examplesComments on Test classesExclude rxjava-kotlin from internal Netflix build until dependencies existMerge pull request #438 from MarioAriasC/master

Kotlin Language AdaptorAdded kotlin to internal build system.

Impressive that it only needed 2 jars.[Gradle Release Plugin] - pre tag commit:  '0.14.5'.[Gradle Release Plugin] - new version commit:  '0.14.6-SNAPSHOT'.Version 0.14.5Fixed the issue that 'take' does not call 'onError' when 'onNext' throws any errorFix OperationSwitch so that it does not onComplete() before inner and
outer subscription completes.Fix OperationSwitch so that it does not onComplete() before inner and
outer subscription completes.Do not unsubscribe from child once parent has been completed.

Child should not be unsubscribed when the parent complete because it may not be completed.Caching the result of 'isInternalImplementation' so that reflection doesn't get invoked on every subscribeMerge pull request #441 from zsxwing/issue-417

Fixed the issue that 'take' does not call 'onError'Merge pull request #443 from ylecaillez/master

OperationSwitch notify onComplete() too early.Merge pull request #434 from johnhmarks/Timeout

Implemented SerialSubscription and Timeout operatorMerge pull request #447 from mattrjacobs/internal-impl-cache

Caching the result of 'isInternalImplementation'[Gradle Release Plugin] - pre tag commit:  '0.14.6'.[Gradle Release Plugin] - new version commit:  '0.14.7-SNAPSHOT'.Update CHANGES.mdRemoving println from OperationMergeMerge pull request #449 from mattrjacobs/remove-merge-println

Removing println from OperationMergeImplemented the 'TimeInterval' operatorImplemented the scheduler version of the 'Return' operatorUpdated the commentsFixed issue #417Merge branch 'master' of github.com:Netflix/RxJava into scalaadaptoradd one TODOFixed testOnErrorViaHasNext in issue #383Removed the unnecessary 'catch' and 'fail'Blocked 'hasNext' instead of 'next' until any notification arrivesFollowed the iterator contractForce 'hasNext' and 'next' throw the error once they have already thrown it beforesome documentation for CompletenessTestFixed issue #454Renamed the log tag as it was too longSingularize AndroidObservables, move to observables packageMerge pull request #459 from zsxwing/issue454

Fixed issue #454Merge pull request #458 from soundcloud/android-ui-component-operator

[rxjava-android] OperationObserveFromAndroidComponentMerge pull request #455 from samuelgruetter/scalaadaptor

Scala Adaptor: TODO list and documentationMerge pull request #453 from zsxwing/issue-417

Fixed issue #417Merge pull request #450 from zsxwing/time-interval

Implemented the 'TimeInterval' operatorMerge pull request #452 from zsxwing/return

Implemented the scheduler version of the 'Return' operatorMerge pull request #433 from zsxwing/issue-383

Fixed testOnErrorViaHasNext in issue #383Update httpasyncclient to 4.0 from 4.0-beta4[Gradle Release Plugin] - pre tag commit:  '0.14.7'.[Gradle Release Plugin] - new version commit:  '0.14.8-SNAPSHOT'.Version 0.14.7Implemented the 'Amb' operatorRemoved the 'vararg' overload and added 2-9 args overloadscreating test classes on test source foldermoving tests to test source folder #439Fix ambiguous imports

Mockito.* and Observable.* both have a never() method in them.Organize, Format, Comments and Cleanup

Also included comment => /* package accessible for unit tests */  for private classes made package public to enable unit testing.Move last 6 remaining unit tests out.Add missing license headers.Merge pull request #466 from benjchristensen/unit-test-refactor

Refactor Unit Tests from Inner Classes to /src/testSeparating unit tests out due to https://github.com/Netflix/RxJava/pull/466Merge pull request #467 from benjchristensen/amb-merge

Merge Amb Operator in PR https://github.com/Netflix/RxJava/pull/460[Gradle Release Plugin] - pre tag commit:  '0.14.8'.[Gradle Release Plugin] - new version commit:  '0.14.9-SNAPSHOT'.Added the rest overloads of Timeout operatorVersion 0.14.8Last operator

Equivalent to lastAsync in Rx.Net.Fix behavior of BlockingObservable.last

It now throws an IllegalArgumentException instead of returning null if no elements are emitted.

This is based on feedback from @headinthebox confirming this expected behavior:

var xs = Observable.Range(1,0);                       		// empty sequence
int x = xs.Last().Dump();                             		// throws “sequence contains no elements”       RxJava => BlockingObservable.last()
IObservable<int> ys = xs.TakeLast(1).Dump();          // OnCompleted()                                                RxJava => Observable.takeLast(1)
IObservable<int> zs = xs.LastAsync().Dump();          // OnError(“sequence contains no elements”)    RxJava => Observable.last()Merge pull request #470 from benjchristensen/operator-last

Operator: LastFix unit test after last() changed behaviorAdd and clarify unit tests in mapMerge pull request #471 from benjchristensen/error-handling

Unit Test TweaksBugFix: Unsubscribing does not work when using subscribeOn(Schedulers.newThread())

I believe this fixes https://github.com/Netflix/RxJava/issues/431Merge pull request #472 from benjchristensen/issue-431-newThreadUnsubscribe

BugFix: Issue 431 Unsubscribe with Schedulers.newThreadFix non-deterministic unit test

- the latch was before onError is called
- use BlockingObservable and expect the IllegalArgumentException to be thrownMerge pull request #473 from benjchristensen/fix-nondeterministic-unit-test

Fix non-deterministic unit testBugFix: Reduce an empty observable

This fixes issue https://github.com/Netflix/RxJava/issues/423

The fix is based on this comment by @headinthebox: https://github.com/Netflix/RxJava/issues/423#issuecomment-27642532Merge pull request #474 from benjchristensen/issue-423-reduce-empty-observable

BugFix: Reduce an empty observableAdditional unit test for reduceMerge pull request #475 from benjchristensen/issue-423-reduce-empty-observable

Additional unit test for reduceDon't emit null onComplete when no onNext receivedMerge pull request #476 from benjchristensen/bugfix-asyncsubject-empty

Don't emit null onComplete when no onNext received in AsyncSubjectCompositeSubscription

- remove now also unsubscribes the removed subscription
- added clear methodUnsubscribe Idempotence TestMerge pull request #477 from benjchristensen/subscription-bugfixes

CompositeSubscription bugfixes[Gradle Release Plugin] - pre tag commit:  '0.14.9'.[Gradle Release Plugin] - new version commit:  '0.14.10-SNAPSHOT'.Implemented the 'min' and 'max' operatorsAdded the min and max operators in Observable and commentsAdds beginnings of doOnEach operatorAdds other overrides for doOnEachSeparating unit tests out and update the commentsAdds scala adapters for doOnEach operatorVersion 0.14.9BugFix: Throw an IllegalArgumentException instead of ArithmeticException if the observable is emptyImplement the 'Using' operatorUse the '+1/-1' way to implement the min and max operatorsWraps DoOnEach in a SafeObserver

This commit leverages the SafeObserver facility to get the desired
behavior in the face of exceptions.  Specifically, if any of the
operations performed within the doOnEach handler raises an exception,
that exception will propagate through the observable chain.Merge pull request #463 from zsxwing/timeout-overload

Added the rest overloads of Timeout operatorMerge pull request #478 from zsxwing/min-max

Implemented the "Operator: Min and MinBy" and "Operator: Max and MaxBy"Merge pull request #479 from nullstyle/add_doOnEach

Adds doOnEach operatorMerge pull request #480 from zsxwing/issue-423-average

BugFix: Emit an IllegalArgumentException instead of ArithmeticException if the observable is emptyMerge pull request #481 from zsxwing/using

Implement the 'Using' operator[Gradle Release Plugin] - pre tag commit:  '0.14.10'.[Gradle Release Plugin] - new version commit:  '0.14.11-SNAPSHOT'.Version 0.14.10DoOn Tweaks

- do not have 2 method overloads with similar method signatures, dynamic languages can not negotiate method dispatch using function arity
- add doOnCompleted and doOnError methods instead of different doOnEach overloadsMerge pull request #483 from benjchristensen/onEach-fix

DoOn TweaksRemove a doOnEach overload

See https://github.com/Netflix/RxJava/pull/483 for more infoadding marble diagrams to javadocs; standardizing formatting & terminologyBugFix: AsyncSubject

- it was not emitting values to observers that subscribed after onCompleted/onErrorMerge pull request #486 from benjchristensen/bugfix-async-subject

BugFix: AsyncSubject[Gradle Release Plugin] - pre tag commit:  '0.14.11'.[Gradle Release Plugin] - new version commit:  '0.14.12-SNAPSHOT'.Merge branch 'docs'Version 0.14.11Merge remote-tracking branch 'origin/master'Add contravariant for min and maxMerge pull request #496 from zsxwing/min-max-contravariant

Add contravariant for min and maxImplement the scheduler overloads for Range, From, StartWithZipMany with conformance changesMerge pull request #492 from zsxwing/scheduler-overloads

Implement the scheduler overloads for Range, From, StartWithUnit test to assert correct scheduler threadUpdate Observable.java

from(scheduler) -> add diagram, standardize javadoc comments
range(scheduler) -> add diagram, standardize javadoc comments
startWith(scheduler) -> add diagram, standardize javadoc commentsRefactored ObserveOn without ScheduledObserverMerge pull request #499 from benjchristensen/observeOn-refactor

ObserveOn RefactorParallelMerge OperatorMerge pull request #501 from benjchristensen/parallelMerge

ParallelMerge OperatorFix ObserveOn and add ParallelMerge Scheduler overload

- ObserveOn was not correctly recursing when the source was async. It would create a new scheduler (i.e. a new thread) each time.
- Also added unit tests to ParallelMergeMerge pull request #502 from benjchristensen/observeOn-parallelMerge

Fix ObserveOn and add ParallelMerge Scheduler overloadScala Bindings RefactorReorg Scala Structure

- make Eclipse and Java/Scala interop happyUpdated READMEMerge pull request #503 from Applied-Duality/scala-bindings

New Scala Bindings0.15.0-SNAPSHOT[Gradle Release Plugin] - pre tag commit:  '0.15.0'.[Gradle Release Plugin] - new version commit:  '0.15.1-SNAPSHOT'.Version 0.15.0Update Observable.java

Javadoc changes:
* add links to RxJava wiki
* correct obsolete <img> urls
* remove unneeded version string from Linq URLs
* standardize javadoc formatting
* a few other minor javadoc correctionsOperators: And, Then, When
Issue #23, Issue #88, Issue #100Update Observable.java

Correcting for overzealous search-and-replace in javadoc commentsOperation: Join
Issue #56Removed unused test functionEmpty subscribeMerge pull request #508 from benjchristensen/empty-subscribe

Empty subscriberename README.md to Rationale.mdrestore original README.mdmention Rationale.md in README.mdmove commented-out example from TestScheduler to separate file TestSchedulerExamplerestore package.scala files (mainly for scaladoc)update package objectsPublishSubject.apply() does not take a parameter@Ignore RxScalaDemoprivate vars in Scala do not start with underscorerestore CompletenessTestexamples to examples, tests to testsreplace Assert.assertXxx by assertXxxmove rx.lang.scala.subscriptions.Subscription to rx.lang.scala.Subscription (mirror Java package structure)Unit Tests and SuppressWarnings

Added tests while validating pull request.

This fixes issue https://github.com/Netflix/RxJava/issues/387Merge pull request #510 from benjchristensen/pull-495-zip

BugFix: Zipreactivate Observable.withFilterMerge pull request #506 from akarnokd/AndPattern2

Operators: And, Then, Whenreplace `work{ t1 }` by `work{ t1.call() }`do not import things from the same packageupdate TODOfix one scaladoc linkMerge branch 'master' of github.com:Netflix/RxJava into scalaadaptorUpdate Observable.java

standardizing javadoc comments & adding wiki/image links for new methodsstandardizing javadoc comments, adding wiki links and diagrams, for and/then/whenOperations toMap (3) and toMultimap (4)Merge upstream/master into ToMapAndToMultimapMerge upstream/master into OperationJoin2

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge upstream/master into OperationJoin2

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaAdded OperationRepeat & repeat operatorAdded OperationRepeat & repeat operatorAdded testFixed the issue #521Merge pull request #512 from samuelgruetter/scalaadaptor

Scala Adaptor DetailsMerge pull request #522 from zsxwing/issue-521

Fixed the issue #521Merge pull request #514 from akarnokd/OperationJoin2

Operation Join againUnitTests demonstrating bugsMake unsubscribe idempotent.Make unsubscribe idempotent.BugFix: Handling of Terminal State for Behavior/Publish Subjects

- They were not correctly emitting onCompleted when new Observers subscribed after the Subject was terminated.
- Added same logic that already existed on AsyncSubjectMerge pull request #525 from benjchristensen/bugfix-subjects

BugFix: Handling of Terminal State for Behavior/Publish SubjectsMerge branch 'ToMapAndToMultimap' of github.com:akarnokd/RxJava into pull-513-toMap

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #526 from benjchristensen/pull-513-toMap

Manual Merge of toMap/toMultiMapJavadoc improvements, including diagrams and wiki links for new operatorsUpdate Observable.java

improve javadocs, including diagrams and wiki links for new operatorsMissing ! .... grrr.Fix bad unit test

- no further events expected after unsubscribeCalling constructor explicitly on schedulersNotification constructors
Implicit conversionsAdd License HeadersMerge pull request #529 from benjchristensen/scala-tweaks

Scala TweaksMerge pull request #527 from Netflix/docs

Docs[Gradle Release Plugin] - pre tag commit:  '0.15.1'.[Gradle Release Plugin] - new version commit:  '0.15.2-SNAPSHOT'.Version 0.15.1visually distinguish operators that use schedulers; add distinct doOnEach diagramsAsync conversionsUse Object as argument type for fromFragment helper

This is to prevent compilation failures in projects that do not link the support-v4 library. The only other option I saw to fix this would have been to split up the android module into one for native fragments and one for support fragments, which I found would come with unjustified overhead. Hence I settled for the cheap way, which is to sacrifice type safety here.

Refs https://github.com/soundcloud/RxJava/issues/2Add scala adapters for doOnEach operator.tests for zipping a finite and an infinite ObservableRemove unnecessary cast.Adding utility functions for observables of strings useful for processing non blocking IO.Moving StringObservable to contrib modulemoving the AssertObservable class to the test side of the build.setting the up that string test to use core testRemoved spurious packageMoved Subscription object to package rx.lang.scala.subscriptions with the other subscriptionsAdded immediate schedulerAdded new thread schedulerAdded current thread schedulerAdded ExecutorSchedulerAdded ScheduledExecutorServiceSchedulerAdded ThreadPoolForComputationSchedulerAdded ThreadPoolForIOSchedulerDeleted old scheduler factory methods.Deleted old Schedulers object.Deleted spurious package object.Added TestSchedulerDeleted spurious package objectMoved stuff around.Moved stuff around some more.Fixed doc comment.Removed dead function, left package object for scala docs.Operation SkipUntilInner classes set to privateMade Subscription.app(rx.Subscription) private.
Added overload for zipAdded package names in doc comments to keep IntelliJ happyFactory methods for Observer.Added copyright headersAdded copyright headersFixed ambigous definitions; kuddos to https://class.coursera.org/reactive-001/forum/thread?thread_id=1466.Fixed type errors in Schedulers.
Added scheduler factory.Fixed implicit conversions to make compile workFixing testsFixing testsrestore original gradlewadd one missing importdeleting def observable[T](=>T) requires deleting corresponding demo, tooreorg imports of ImplicitFunctionConversionsmake zip with selector function private because

Scala collections do not have such a function, and we want to be
as close to Scala collections as possiblescaladoc links in ThreadPoolForXxxSchedulerscaladoc for package rx.lang.scalaFixed Zip issue with infinite streams.restore subjects package object for scaladocMerge pull request #1 from samuelgruetter/RxJavaBugFixesSam

A few trivial Scala adaptor detailsPulled in changes from Samuel.
Fixed tests, all working without warningsAdded Observable.create.
(a) it will stop the pointless discussions around it.
(b) it is removes the interference with from(T*)
(c) we should remove the latter, since that is not the common case.Double negation Observer.Made subjects safeTests to verify fix and error behaviorFixed case with skipUntil(empty()) == never() (matches Rx.NET)Trivial code movementsIntelliJ suggested style changes.Merge pull request #516 from abersnaze/string-observable

Adding utility functions for observables of strings useful for processing non blocking IO.Merge pull request #531 from Netflix/docs

visually distinguish operators that use schedulers, etc.Merge pull request #533 from akarnokd/ToAsync2

Async conversionsMerge pull request #535 from soundcloud/android-support-library-fix

Fix compilation errors due to referencing the Android support library directlyMerge pull request #545 from akarnokd/ZipInfiniteFix

Fixed Zip issue with infinite streams.Merge pull request #539 from samuelgruetter/test-zip-pr

Zipping a finite and an infinite ObservableMerge pull request #541 from akarnokd/SkipUntil

Operation SkipUntilskipUntil() marble diagram and wiki link in javadocMerge pull request #555 from Netflix/docs

skipUntil() marble diagram and wiki link in javadocreplace Observable.apply(rx.Observable) by toScalaObservable

and move Java types <=> Scala types conversions from
ImplicitFunctionConversions to JavaConversionsrename Observable constructorsMerge remote-tracking branch 'upstream/master'Merge branch 'master' into scala-do-operatorRemove unnecessary type parameter.

Apparently (to my surprise), the implicit conversions are smart enough
to resolve this.Add type variances for doOnEach actions.

This fixes the use of contravariant actions.add equals, hashCode, toString to Notificationsadd Observable.from(Future) constructorundo commit 99a1d035233100e32050240472a9bdc85521bc61Merge pull request #537 from landonf/scala-do-operator

Add scala adapters for doOnEach operator.Merge pull request #560 from landonf/java-do-variances

Add type variances for doOnEach actions.Operation GroupByUntil v5Merge pull request #562 from samuelgruetter/RxJavaBugFixesSam

Scala Adaptor Improvements by ErikMerge pull request #563 from akarnokd/GroupByUntil5

Operation GroupByUntilOperator GroupJoin v2Manually merge branch 'master' of github.com:Netflix/RxJava into scala-constructors

Conflicts:
	language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala
	language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala
	language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scalaOperation Timestamp with SchedulerMerge pull request #561 from samuelgruetter/scala-constructors

Creating Observables in Scala: Approach04Merge pull request #565 from akarnokd/GroupJoin2

Operator GroupJoin v2Merge pull request #567 from akarnokd/TimestampWithScheduler

Operation Timestamp with SchedulerUse lock free strategy

Reduce contention by using CAS (Compare And Swap) operations to replace
subscriptionMake unsubscribe + reference modification an atomic operationLock free strategy using a sentinel (Thanks to akarnokd)Code simplificationjavadoc improvements (groupJoin, groupByUntil, timestamp w/scheduler)Simplify code; Junitsfix: getSubscription should not expose internal sentinel subscriptionJUnit setting subscription concurrentlyMerge pull request #569 from Netflix/docs

javadoc improvements (groupJoin, groupByUntil, timestamp w/scheduler)Added release notes for Observer.
Added missing empty implementations for Observer methods.Release notesAdded overrides.Strange changes ...Removing BooleanSubscriptionMaking tests workMaking tests work.
Solution was to delete all class files.
Why is there no build/clean?Return null on getSubscription() when previously unsubscribed to match
initial contractOperation Sample with Observable v2ObserveOn fix for observing the same source on the same scheduler by two different observers.Modified Subscription tests.Modified Subscription tests.Modified Subscription tests.Removed Opening and Closing historical artifacts.Fixed scala compilation error.remove package rx.lang.scala.util since all its contents were removedremove import rx.lang.scala.util._Merge pull request #1 from samuelgruetter/OpeningClosingRemovedSam

remove package rx.lang.scala.util since all its contents were removedclarify documentation on cache()add OperationTimeradd timer methods in Observable.javaadd OperationDelaycopy delay test by @jmhofer

source: https://github.com/jmhofer/RxJava/blob/e9027293dadf846b64f62e91da7c5c5850ed76f5/rxjava-core/src/main/java/rx/operators/OperationDelay.javaadd delay methods in Observable.java (copied those by @jmhofer)

source: https://github.com/jmhofer/RxJava/blob/18d40522bb19f80c0ff8d4079bcb925742efecf4/rxjava-core/src/main/java/rx/Observable.javamake OperationDelayTest test Observable.delay instead of OperationDelay.delayAdded overloads for Observer companion objectRelease notes for NotificationCosmetic changes to Notification.
Cleaned up overloads for Observer.More precise marble diagram for the case when zip() takes an Observable that emits ObservablesRenamed rx.lang.scala.concurrency to rx.lang.scala.schedulers
Fixed Scheduler constructor to map to correct scheduler type.Added test for SerialSubscriptionSubjects & Observersprivate [scala] val asJavaXXX for all.Tried to improve type inference, alas.release notes detailsReimplement the 'SequenceEqual' operator using other operatorsFix the 'null' issue in the default equalityRe-instantiating commented out tests.Re-instantiating commented out tests.Merge pull request #2 from samuelgruetter/RxJavaBugFixesSam2

release notes detailsChanged def to val in release notes to match source code.  Which I could put in hyperlink ;-)Doc comments for Notification.Notification tests.Notification tests.(Superfluous) Subject tests.Simplified Subject[-T, +R] extends Observable[R] with Observer[T]
to
Subject[T] extends Observable[T] with Observer[T].

This was a generalization in .NET that did not pan out and Subject is always used with [T,T].

Fought to get multicast to work. I really hate Java variance.Updated release notes for Subject[T]Update ObservableHttp.java

Removed pesty dangling </p>Manually merge branch 'master' of github.com:Netflix/RxJava into MergingFinalStageSam

Conflicts:
	language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala
	language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala
	language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala
	language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala
	language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/subscriptions/SubscriptionTests.scalaREADME

* Needed to comment out interop test because, build cannot find my javac.
* Note scheduler test don't terminate with JDK 7 on my machine.Interop HelpersDocumented factory method changes.

and also Notification.asJava => Notfication.asJavaNotification

Conflicts:
	language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scalaremove rx.lang.scala.subscriptions.SubscriptionTests,

because rx.lang.scala.SubscriptionTests is more up to datefix one constructor usagereorg imports of TestSchedulerExampleundo undesired side effects of search/replace

which were introduced by commit https://github.com/Applied-Duality/RxJava/commit/a0aa6db735481652fd9fab4c21ab7f83928efb22fix constructor usage in ObservableTestFix Concat to allow multiple observersOperation LongCountuse non-locking state machine based on atomic referenceUpdated release notesrenamed `accept` to `apply` for Notification.CRemoved Assert. prefix from testsMerge pull request #568 from jloisel/master

Use lock free strategy for several Subscription implementationsMerge pull request #571 from akarnokd/SampleWithObservable2

Operation Sample with Observable v2Merge pull request #572 from akarnokd/ObserveOn3

ObserveOn fix for observing the same source on the same scheduler by two...Merge pull request #573 from akarnokd/OpeningClosingRemoved

Removed Opening and Closing historical artifacts.Merge pull request #574 from samuelgruetter/cache-documentation

clarify documentation on cache()Merge pull request #575 from zsxwing/sequence-equal

Reimplement the 'SequenceEqual' operatorMerge pull request #587 from akarnokd/LongCount

Operation LongCountMerge pull request #586 from akarnokd/ConcatFix

Fix Concat to allow multiple observersGitAttributes for Line Endings

https://help.github.com/articles/dealing-with-line-endings

See https://github.com/Netflix/RxJava/issues/579Normalize Line Endings

See https://help.github.com/articles/dealing-with-line-endings#re-normalizing-a-repository
Fixes https://github.com/Netflix/RxJava/issues/579Cleaned up subscriptions to make them idempotent when called from either side.Release notes for NotificationLayoutadded apply(Observer) to Observable[T] traitrebasingAdded back private PublishSubject[T] object.Observer cleanupAdded default implementation in Subscription traitExperimental extension methods for lists.Test to show various constructors.Lock-free subscriptionsImplement the 'Start' operatorFix for buffer not stopping when unsubscribed.Made rx.Scheduler bindings  private [scala] such that you can access them them if needed.Merge branch 'master' of https://github.com/Netflix/RxJava into docs* corrects grammar of sequenceEqual() javadoc
* updates link to wiki description of count()
* adds sample(sampler) marble diagram/wiki link
* adds longCount() marble diagram/wiki linkEmpty subscribe()Added accept with Observer to match RxJavaRenamed apply(items: T*) to items.
Fixed all tests.Release notes edits.Release notes edits.Merge pull request #598 from Applied-Duality/RebaseLatestChanges

New Scala BindingsAdd more unit testsMerge pull request #596 from akarnokd/BufferFix1

Fix for buffer not stopping when unsubscribed.Merge pull request #597 from Netflix/docs

Javadoc updates (longCount, sample(sampler))Merge pull request #576 from samuelgruetter/delay2

Timer and DelayMerge pull request #593 from akarnokd/LockFreeSubscriptions

Lock-free subscriptionsMigrate Schedulers to rx.schedulers packageOrganize Imports - Migrate to rx.schedulers for src/mainBackwards compatible deprecated rx.concurrency classes

These will exist for a few releases to allow people to migrate from rx.concurrency to rx.schedulers.rx.concurrent -> rx.schedulers for Android and Swing modulesMigrate code to use rx.schedulers instead of rx.concurrency

Unit tests passed before and after (did change in multiple steps to assert unit test pass against rx.concurrency before migrating to rx.schedulers).Add Missing License HeadersMerge pull request #599 from benjchristensen/rx.schedulers

Refactor rx.concurrency to rx.schedulersReplaySubject UnitTests

Shows bug handling terminal state.Fix #544 ReplaySubject emits items received after onErrorMerge pull request #600 from benjchristensen/replay-subject

BugFix: Replay SubjectRemove the Action0 overloadsMerge pull request #594 from zsxwing/start

Implement the 'Start' operatorAdded op:join to concat objects with separator between elements.Javadoc improvements:
* consistent nomenclature
* consistent/standard javadoc formatting
* more-precise descriptions
* timer() marble digram & wiki link
* delay() marble diagram & wiki linkMerge pull request #607 from Netflix/docs

Javadoc improvements:Merge pull request #604 from akarnokd/StringObservableOps1

Added op:join to concat objects with separator between elements.Operation Timer 3.0CustomReplaySubject to support various replay() operators.Operation: Replay additional overloadsMerge pull request #609 from akarnokd/OperationTimer3

Operation Timer 3.0Merge pull request #612 from akarnokd/ReplayAdditionalOps

Replay additional overloadsCopied the code from OperationMergeMerge pull request #615 from abersnaze/issue614

Copied the code from OperationMerge to fix synchronizationCombineLatest fixMoved onError, onCompleted and cancel.unsubscribed outside the lockreplay() and timer() javadocs: diagrams & wiki linksMerge pull request #617 from Netflix/docs

replay() and timer() javadocs: diagrams & wiki linksObserveOn Fixes

- fix subscription leak (Composite+MultipleAssignment instead of just Composite)
- add unit testsMerge pull request #602 from benjchristensen/observeOn

ObserveOn FixesUnitTest to assert thread safety of Executor Scheduler

- The Executor thread-pools hop threads when using observeOn so this tests that it is thread-safe when doing so.
- The test performs non-thread-safe mutations which should fail (or at least be non-deterministic) if memory visibility problems or concurrency is occurring.Removed local SerialSubscription isUnsubscribed implementation since underlying subscription now implements it.Observable.from with schedulerObservable.from with scheduler
Fixed blocking test in ObservableWindowTestMerge pull request #619 from benjchristensen/executorSchedulerConcurrencyTests

UnitTest to assert thread safety of Executor SchedulerAdded: BO.Latest, fixed: BO.next, BO.mostRecent, BO.toIterableProperly wired up SynchronizedObserver within MergeDelayError operatorMerge pull request #628 from mattrjacobs/fix-merge-delay-error

Properly wired up SynchronizedObserver within MergeDelayError operatorFixes based on @zsxwing's suggestions.Increased time delay in test.Make NewThreadScheduler create Daemon threads

This matches the behavior of Schedulers.COMPUTATION_EXECUTOR and Schedulers.IO_EXECUTOR.

See https://groups.google.com/forum/#!topic/rxjava/Qe1qi0aHtnE and https://github.com/Netflix/RxJava/issues/431#issuecomment-30767610Fix non-deterministic unit test

- there is no guarantee for how many threads Interval will use so useless to assert anything on itMerge pull request #631 from benjchristensen/NewThreadScheduler-Daemon

Make NewThreadScheduler create Daemon threadsFixed issue #595 about null in toList operatorOperators: switchCase (Case), ifThen (If), doWhile (DoWhile), WhileDo (While)Operators DelaySubscription, TakeLast w/ time, TakeLastBufferMoved the descriptions of some operators to a new "Conditional and Boolean Operators" wiki page.Merge pull request #639 from Netflix/docs

Moved the descriptions of some operators to a new wiki page.Fixed the blocking/non-blocking firstAdd MSDN linksMark takeFirst deprecatedImplement the blocking/non-blocking single, singleOrDefault, first, firstOrDefault, last, lastOrDefaultFix the unit tests in groovy and kotlinRemove volatileSubject Refactor

- Common logic composed inside SubjectSubscriptionManager
- ReplaySubject does not block while replaying to new subscribers
- Added unit tests and fixed behavior while reviewing with @headinthebox compared to Rx.Net
- Uses mostly non-blocking approach (I believe it’s all correct, unit and long running tests have been used to prove it. The tests found concurrency problems during development and became stable once I got the design correct. As with all concurrent code I may be missing something.)License Header and Separate out Perf TestsRefactor for Performance

- previous commit got non-blocking working but perf tests showed it slow
- this commit retains non-blocking but surpasses master branch performance

Master branch: 11,947,459 ops/sec
This commit: 16,151,174 ops/secPerformance improvement suggestions.Added create with initial capacity.Added create with initial capacity, minor fixOperations Aggregate, Average and Sum with selectorComments on Performance IncreaseReverting to Previous SafeObserver

- Performance difference between changes are trivial at best so preferring to keep code that is easier to understand.

Test numbers:

```
Old SafeObserver

Run: 0 - 3,751,704 ops/sec
Run: 1 - 34,619,086 ops/sec
Run: 2 - 30,483,715 ops/sec
Run: 3 - 27,746,023 ops/sec
Run: 4 - 54,078,608 ops/sec
Run: 5 - 55,107,045 ops/sec
Run: 6 - 53,935,396 ops/sec
Run: 7 - 54,947,168 ops/sec
Run: 8 - 57,024,246 ops/sec
Run: 9 - 55,059,712 ops/sec
Run: 10 - 56,904,832 ops/sec
Run: 11 - 55,919,967 ops/sec
Run: 12 - 55,076,087 ops/sec
Run: 13 - 55,066,685 ops/sec
Run: 14 - 55,025,476 ops/sec

Run: 0 - 3,839,266 ops/sec
Run: 1 - 34,115,371 ops/sec
Run: 2 - 29,675,175 ops/sec
Run: 3 - 28,677,042 ops/sec
Run: 4 - 55,405,652 ops/sec
Run: 5 - 55,260,220 ops/sec
Run: 6 - 55,147,464 ops/sec
Run: 7 - 54,261,126 ops/sec
Run: 8 - 53,941,505 ops/sec
Run: 9 - 54,324,501 ops/sec
Run: 10 - 55,125,576 ops/sec
Run: 11 - 56,102,870 ops/sec
Run: 12 - 55,061,834 ops/sec
Run: 13 - 55,476,039 ops/sec
Run: 14 - 55,073,054 ops/sec

Run: 0 - 3,704,536 ops/sec
Run: 1 - 34,694,514 ops/sec
Run: 2 - 30,778,227 ops/sec
Run: 3 - 28,441,329 ops/sec
Run: 4 - 54,116,946 ops/sec
Run: 5 - 55,204,699 ops/sec
Run: 6 - 54,859,450 ops/sec
Run: 7 - 55,214,757 ops/sec
Run: 8 - 55,005,500 ops/sec
Run: 9 - 55,339,118 ops/sec
Run: 10 - 55,501,903 ops/sec
Run: 11 - 55,074,570 ops/sec
Run: 12 - 55,102,187 ops/sec
Run: 13 - 55,756,278 ops/sec
Run: 14 - 54,768,411 ops/sec

New SafeObserver

Run: 0 - 3,983,308 ops/sec
Run: 1 - 34,767,250 ops/sec
Run: 2 - 30,806,957 ops/sec
Run: 3 - 29,855,113 ops/sec
Run: 4 - 57,451,453 ops/sec
Run: 5 - 55,515,152 ops/sec
Run: 6 - 56,086,822 ops/sec
Run: 7 - 56,295,529 ops/sec
Run: 8 - 55,371,905 ops/sec
Run: 9 - 55,816,653 ops/sec
Run: 10 - 55,793,296 ops/sec
Run: 11 - 56,011,426 ops/sec
Run: 12 - 55,568,521 ops/sec
Run: 13 - 55,396,137 ops/sec
Run: 14 - 56,353,267 ops/sec

Run: 0 - 3,933,367 ops/sec
Run: 1 - 34,498,342 ops/sec
Run: 2 - 30,233,584 ops/sec
Run: 3 - 29,179,785 ops/sec
Run: 4 - 55,761,874 ops/sec
Run: 5 - 55,948,124 ops/sec
Run: 6 - 55,264,801 ops/sec
Run: 7 - 56,267,020 ops/sec
Run: 8 - 57,474,567 ops/sec
Run: 9 - 55,879,657 ops/sec
Run: 10 - 55,998,880 ops/sec
Run: 11 - 56,044,073 ops/sec
Run: 12 - 55,498,515 ops/sec
Run: 13 - 56,204,720 ops/sec
Run: 14 - 55,845,954 ops/sec

Run: 0 - 3,981,914 ops/sec
Run: 1 - 34,160,822 ops/sec
Run: 2 - 30,873,631 ops/sec
Run: 3 - 29,135,067 ops/sec
Run: 4 - 55,845,330 ops/sec
Run: 5 - 55,101,883 ops/sec
Run: 6 - 55,724,276 ops/sec
Run: 7 - 56,085,564 ops/sec
Run: 8 - 55,639,942 ops/sec
Run: 9 - 56,464,955 ops/sec
Run: 10 - 55,453,275 ops/sec
Run: 11 - 56,115,463 ops/sec
Run: 12 - 56,509,945 ops/sec
Run: 13 - 53,863,348 ops/sec
Run: 14 - 55,866,858 ops/sec
```Merge pull request #651 from benjchristensen/subjects-fixes

Subjects Refactor - Non-Blocking, Common Abstraction, PerformanceBooleanSubscription: Add Action SupportRemove Unnecessary Subscription

- be explicit for error case in JoinObserverCode ReformattingMissing fixes from the subject rewrite.Refactor RefCountSubscription

- simplified logic
- remove unnecessary busy spins and state changesRefactor CompositeSubscription

- simplified state machine
- removed busy spin stateRefactor MultipleAssignment

- simplified state machineRefactor SerialSubscription

- simplified state machineNaming and Class Conventions

- make concrete implementations final as extending them is dangerous (use composition and implement Subscription instead)
- deprecated long get/setSubscription methods in favor of short verbs (add/get/set/clear/remove)
- updated unit tests with changesMerge pull request #661 from benjchristensen/subscriptions

Subscriptions RewriteMerge pull request #520 from zsxwing/first

Fixed the blocking/non-blocking firstMerge pull request #621 from Applied-Duality/CleanFixes

SerialSubscription & FromMerge pull request #626 from akarnokd/OperationLatestAndFixes

Added: BO.Latest, fixed: BO.next, BO.mostRecent, BO.toIterableMerge pull request #633 from zsxwing/fix-issue-595

Fixed issue #595 about null in toList operatorMerge pull request #635 from akarnokd/OpCaseIfDoWhileWhile

Operators: switchCase (Case), ifThen (If), doWhile (DoWhile), WhileDo (W...Merge pull request #638 from akarnokd/OperationTakeLastwBufferDeferSubscr

Operators DelaySubscription, TakeLast w/ time, TakeLastBufferOperation AsObservableMerge pull request #659 from akarnokd/SubjectsFixAdditional

Missing fixes from the subject rewriteAlias from switchOnNext to switchLatest to match RxJS

- keeping onNext to be locally consistent with doOnNextdoOnNext, doOnCompleted, doOnError, doOnEachOperators Skip, SkipLast, Take with timeJavadoc improvements:
* diagrams for switchCase, doWhile, whileDo, ifThen, delaySubscription, single, singleOrDefault, takeFirst, takeLast (and variant forms of these)
* standardizing javadoc comment formatting
* standardizing nomenclatureFix TakeLast after removing SingleAssignmentSubscription

- SingleAssignmentSubscription was removed in one merge, TakeLast modified in another merge.Update Tests for doOn* ChangesMergeMap, ConcatMap, SwitchMap

- flattening map implementations that better fit mental models and use cases
- keeping flatMap as alias to mergeMap since flatMap is common … (though flatMap still confuses people)
- deprecate mapMany as alias to flatMap and mergeMapDeprecate manWithIndex

If we leave mapWithIndex then we should have “withIndex” on many other operators. Instead of this, an Observable should just be zipped with an infinite stream of numbers and the zip function provides the index.
This keeps the API surface area smaller and provides the desired behavior on all operators.Deprecate aggregate in favor of reduce

We have had aggregate from Rx.Net for a while but long ago migrated to reduce as the primary. Time to deprecate it.Merge pull request #669 from Netflix/docs

Javadoc improvements:Merge pull request #670 from benjchristensen/api-tweaks

API Design TweaksFix SafeObserver handling of onComplete errors

Fixes https://github.com/Netflix/RxJava/issues/630Merge pull request #688 from benjchristensen/SafeObserver-errorHandling

Fix SafeObserver handling of onComplete errorsRemoved ObserverBaseFixed Scala bindingsMerge pull request #690 from Applied-Duality/benChanges

Fixed Scala bindingsjavadoc improvements:
* diagrams for switchLatest, mergeMap, concatMap, switchMap, mapWithIndex, doOnNext
* change text to note deprecation of aggregate
* standardized formatting
* force image size in ReplaySubject javadocMerge pull request #691 from Netflix/docs

javadoc improvements:Kotlin M6.2Merge pull request #693 from MarioAriasC/master

Kotlin M6.2Change in wiki page from "Mathematical Operators" to "Mathematical and Aggregate Operators"
move toList, reduce, concat, toSortedList, toMap, and toMultiMap to that page
deprecate aggregate in favor of reduce
[should I move takeLast, last, and takeLastBuffer to the Aggregate operators page? they don't operate on the aggregate, exactly, but they do wait until the source completes before emitting anything]javadoc improvements
* add "see also" notes about hidden Rx.NET "asyncFoo" methods to Observable.java
* reformat BlockingObservable javadoc comments to Oracle formatting standards
* add links to RxJava Wiki & MSDN web pages as "see also" links in BlockingObservable javadocscorrecting typo causing build failureMerge pull request #694 from Netflix/docs

Change page from "Mathematical Operators" to "Mathematical and Aggregate Operators"Merge pull request #689 from akarnokd/ObserverBaseLess

Removed ObserverBaseMerge pull request #664 from akarnokd/OperationAsObservable

Operation AsObservableRemove ObserverBase Import

Was unused and causing build break once that class was removed.Manual Merge github.com:akarnokd/RxJava SkipTakeTimed2

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/operators/OperationTakeLast.javaMerge pull request #697 from benjchristensen/skip-take-time-merge

Manual Merge of Pull #667Merge branch 'AggregatorsWithSelector' of github.com:akarnokd/RxJava into pull-657-mergeRemove newly added aggregate methods

- avoiding methods with `index`
- resultSelector overload is same as `reduce(seed, accumulator).map(resultSelector)`Rename to ReduceTestMerge pull request #698 from benjchristensen/pull-657-merge

Merge of Pull 657: Average and Sumjavadoc improvements:
* diagrams for skip(t), single(), take(t), skipLast(t)
* minor corrections, reformatting of javadoc commentsMerge remote-tracking branch 'origin/master' into docsRepeat Operator

- merge and slight modification of https://github.com/Netflix/RxJava/pull/518Merge pull request #699 from benjchristensen/repeat

Repeat OperatorAdding diagrams, improving javadocs for sumFoo/averageFoo operators.Merge remote-tracking branch 'origin/master' into docsadding diagram to repeat() javadocsCollect OperatorMerge pull request #701 from benjchristensen/collect

Collect OperatorMark as DeprecatedRemove Extra Synchronization

The use of flatMap/mergeMap already synchronizes.Standardize Naming of average/sum methods

See https://github.com/Netflix/RxJava/pull/698#issuecomment-31282416Merge pull request #703 from benjchristensen/small-tweaks

Small TweaksMerge pull request #700 from Netflix/docs

various javadoc improvementsadjust javadocs for new sumFoo()/averageFoo() method namesMerge pull request #705 from Netflix/docs

adjust javadocs for new sumFoo()/averageFoo() method namesNew contrib module: rxjava-async-util

Home for async utility functions with juc.Future, Actions, Functions etc that don’t need to be in rxjava-core.

As per discussions at:

- https://github.com/Netflix/RxJava/pull/646#issuecomment-31147005
- https://github.com/Netflix/RxJava/pull/645#issuecomment-31146492
- https://github.com/Netflix/RxJava/pull/622#issuecomment-31144128Manual merge of https://github.com/akarnokd/RxJava/commit/eee312a6ac41582e4efe3daac3dfcd0385359d25

- To clean up the pull request I cherry picked the single commit with actual changes to avoid the merges that affected lots of other files.
- The original commit also included conflicting and unrelated changes to Observable and ObservableTests that I skippedManual merge of https://github.com/akarnokd/RxJava/commit/eee312a6ac41582e4efe3daac3dfcd0385359d25Merge pull request #707 from benjchristensen/rxjava-async-util-module

Merge of rxjava-async-utilMerge branch 'CombineLatestFix' of github.com:akarnokd/RxJava into combine-latestManual Merge of Pull #616

Manual merge of https://github.com/Netflix/RxJava/pull/616

- remove use of SingleAssignmentSubscription
- suppress warningsMerge pull request #708 from benjchristensen/combine-latest

Combine latest fixLotsa javadoc improvements
* diagrams for previously-undiagram'd methods
* links to wiki docs where available
* standardizing format & nomenclatureMerge pull request #709 from Netflix/docs

Lotsa javadoc improvementsCreated new wiki page for the operators in the Async class
...adjusted javadoc links accordingly
...added new sections for previously un-wiki-documented operators in Async
...added links to those in javadocsMerge pull request #710 from Netflix/docs

Created new wiki page for the operators in the Async classUpdate Scheduler Tests for Recursion and Common TestingFix Deprecated Method CallMemory Leak Tests

NewThreadScheduler is working, the other two are not so commented out for now until fixed.Fix Memory Leak in NewThreadScheduler Recursion

- the Action0 method did not have a leak
- the Func2 method on inner scheduler recursion did have a leakScheduler Unit Tests

- passing for all but ExecutorSchedulerExecutorScheduler Memory Leak Fix

- new InnerExecutorScheduler and childSubscription
- improvements to unit testsCurrentThreadScheduler Memory Leak Fixed

- Current/Immediate/NewThread/Executor Schedulers are passing unit tests
- Current/NewThread/Executor Schedulers do not leak memory on the recursion test (Immediate can’t be used for recursion otherwise it stack overflows)Small ObserveOn Improvements

- use Long instead of Int so we don’t overflow
- migrate from deprecated methodCurrentThreadScheduler Fixes

- outer/inner scheduling so nested order is correct while not deadlocking on certain nested use cases as found in previous testingFix CurrentThreadScheduler Delay Bug

- introduced a bug during refactor, caught it while updating unit testsUpdated Schedulers Unit Tests

- merged all scheduler tests into the same package
- using inheritance so that the same tests are applied to each of the different Scheduler implementations
- manual test (too slow for normal execution) can be run to test memory leaks (TestRecursionMemoryUsage.java)Missing HeaderIncreasing Unit Test Timeout for Slow Machines

- Increasing timeout by a lot to handle slow machines such as this: https://netflixoss.ci.cloudbees.com/job/RxJava-pull-requests/629/testReport/junit/rx.schedulers/ExecutorSchedulerTests/recursionUsingFunc2/
- The timeout is only there if a deadlock or memory leak occurs (which is what this PR is fixing) so when everything is healthy it does not timeoutRemove Timeout on TestsRemove Validation of Ordering

- this test does a flatMap which uses merge which has non-deterministic ordering since the Observable.from can be on a new thread each timeMerge pull request #712 from benjchristensen/scheduler-memory-leak

Fix Scheduler Memory Leaksrxjava-computation-expressions

The conditional operators are going in this contrib module.

See https://github.com/Netflix/RxJava/issues/683Merge pull request #714 from benjchristensen/rxjava-computation-expressions

rxjava-computation-expressionsAdd missing type hint to clojure example

Following GH623Merge pull request #715 from y-p/PR_GH623

Add missing type hint to clojure exampleAdded ConnectableObservable
Fixed test
Added overload for scan
Added trivial test for scanMerge pull request #717 from Applied-Duality/ScalaPublishFix

Added ConnectableObservableAdded `Observable.timeout` wrappers to scala adapter

Added the four timeout methods on Observable in the Scala adaptor. Note
for the java/scala type interop:
http://stackoverflow.com/q/20912151Deprecate multiple arity ‘from’

- added @Deprecated annotations where it was only part of the Javadoc
- deprecated ‘where’ which is a duplicate of `filter` kept from early days matching Rx.NetMerge pull request #723 from benjchristensen/deprecation

Deprecate multiple arity ‘from’Revert use of CurrentThreadScheduler for Observable.from

Use ImmediateScheduler as performance is 4x faster and CurrentThreadScheduler currently offers no benefit (it doesn’t solve the unsubscribe problem).

Performance numbers:

     * Observable.from(Arrays.asList(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), scheduler);
     *
     * --- Schedulers.immediate() ---
     *
     * Run: 0 - 1,849,947 ops/sec
     * Run: 1 - 2,076,067 ops/sec
     * Run: 2 - 2,114,688 ops/sec
     * Run: 3 - 2,114,301 ops/sec
     * Run: 4 - 2,102,543 ops/sec
     *
     * --- Schedulers.currentThread() ---
     *
     * Run: 0 - 548,862 ops/sec
     * Run: 1 - 559,955 ops/sec
     * Run: 2 - 581,412 ops/sec
     * Run: 3 - 562,187 ops/sec
     * Run: 4 - 565,723 ops/sec

     * Observable.from(Arrays.asList(1L), scheduler);
     *
     * --- Schedulers.immediate() ---
     *
     * Run: 10 - 4,113,672 ops/sec
     * Run: 11 - 4,068,351 ops/sec
     * Run: 12 - 4,070,318 ops/sec
     * Run: 13 - 4,161,793 ops/sec
     * Run: 14 - 4,156,725 ops/sec
     *
     * --- Schedulers.currentThread() ---
     *
     * Run: 10 - 1,692,286 ops/sec
     * Run: 11 - 1,765,054 ops/sec
     * Run: 12 - 1,763,100 ops/sec
     * Run: 13 - 1,770,907 ops/sec
     * Run: 14 - 1,732,291 ops/secSimpler computation/io naming for Schedulers

- simpler (no one remembers the current names when talking about them)
- does not tie naming to a particular implementation involving thread pools versus a pool of event loops or something similar (as we likely will change the implementation, see https://github.com/Netflix/RxJava/issues/713)Merge pull request #724 from benjchristensen/revert-current-thread-scheduler-usage

Revert use of CurrentThreadScheduler for Observable.fromMerge pull request #725 from benjchristensen/schedulers-naming

Simpler computation/io naming for SchedulersThe test has to wait on each action independently.
Reduced the size of the iterable because I think it was blowing through the stack.ToObservableIterable Recursion/Loop

- the ImmediateScheduler no longer schedules itself but uses a loop
- 10-20x faster to use a loop rather than schedule itself recursivelyMerge pull request #727 from benjchristensen/iterable-to-observable-immediate-scheduler

ImmediateScheduler optimization for toObservableIterable0.16.0-SNAPSHOTImplemented the rest 'merge' overloadsAdded unit tests0.16.1-SNAPSHOTVersion 0.16.0Improve Error Handling and Stacktraces

The stacktraces were a mess when onError failed or was not implemented and unsubscribe also failed.
That is a far edge case and means code is broken and breaking the Rx contracts … but that’s just when we need clear stacktraces.
The CompositeException and SafeObserver class now do a dance and wire together a causal chain to provide a stacktrace that can identity all the points of error.
Also standardized and simplified the RxJavaPlugin.onErrorHandler while working in the vicinity.

This came about after I was asked to help debug a problem and couldn’t do it by looking at the thrown exception, I had to use a debugger and step through.Merge pull request #730 from benjchristensen/unsubscribe-error-handling

Improve Error Handling and Stacktraces When Unsubscribe FailsReplaced 'Thread.sleep' with 'CountDownLatch' to fix the flaky test failuresMerge pull request #720 from hura/master

Added `Observable.timeout` wrappers to scala adapterMerge pull request #731 from zsxwing/flaky-unit-tests

Replaced 'Thread.sleep' with 'CountDownLatch' to fix the flaky test failuresported groupByUntil function.Buffer with Observable boundary.Delay with subscription and item delaying observables.Window with Observable boundary.MergeMap with Iterable and resultSelector overloadsAdded event-merger overloadPublish and PublishLast overloadsAdded variance to selector functionsDebounce with selectorTimeout with selector overloadsZip with iterable, removed old aggregator version and updated testsBuild with Gradle 1.10.

Required that the IDE plugins also be applied to the root, because of the improved Scala support with the IDEA plugin.Merge pull request #742 from alkemist/gradle-1.10

Build with Gradle 1.10.Modified to conform Rx.NETFixed issue #737Replaced MultipleAssignmentSubscription with SerialSubscriptionMoved unsubscribe out the gatemodified groupByUntil include the key of the group in the closings function.Merge pull request #718 from zsxwing/merge-overloads

Implemented the Merge overloadsMerge pull request #733 from akarnokd/BufferWithObservableBoundary

Buffer with Observable boundary.Merge pull request #734 from akarnokd/DelayViaObservable

Delay with subscription and item delaying observables.Merge pull request #735 from akarnokd/WindowViaObservable

Window with Observable boundary.Merge pull request #736 from akarnokd/FlatMapOverloads

MergeMap with Iterable and resultSelector overloadsMerge pull request #738 from akarnokd/PublishAndPublishLast2

Publish and PublishLast overloadsMerge pull request #739 from akarnokd/DebounceWithFunc

Debounce with selectorMerge pull request #740 from akarnokd/TimeoutWithSelector

Timeout with selector overloadsMerge pull request #745 from zsxwing/issue-737

Fixed issue #737Separated Android test code from source.Merge pull request #741 from akarnokd/ZipInstanceMethods

Zip with iterable, removed old aggregator version and updated testsMerge pull request #749 from wehjin/splittests

Separated Android test code from source.Version 0.16.1Merge pull request #732 from chrisgrimm/master

Ported groupByUntil function to scala-adapterVersion 0.16.1Organize Imports and Format Code

- standardizing all sourceAlphabetize Observable.java

It’s a huge class … alphabetized the methods to give rhyme-and-reason for where to place new operators and for navigating it.Revert to 1.8 for build to work ...

... until the build server handles 1.10.

Some odd issue with JUnit.Back to 1.10 after building

... this still breaks the release build but I want to encourage us to get it working before we release again.Update gradle.properties0.16.2-SNAPSHOTMake Observable Methods Final

Their behavior is interrelated and co-dependent and should therefore not be over-written.
Observable itself is not made final as there are some limited reasons for inheritance (such as GroupedObservable and Subjects).Updating License Headers

- since I’m touching all files for the other commits I’ll update the copyright headers as wellMerge pull request #752 from benjchristensen/organize-format-alphabetize-finalize

Organize, Format, Alphabetize and FinalizeProvide Observable.timestamp(Scheduler) to be used in the tests.Add marble diagrams to new operators & variants.
Add javadoc "@deprecated use..." where appropriate.
Some javadoc comment reformatting (e.g. overlong lines).Create /src/perf for Performance Tests

- Move existing performance tests into this source folder.
- Not building via Gradle yet … I have yet to figure that part out.Start of Performance Testing Operators

These are examples of how we should proceed. Very likely though we want to use something like Caliper: https://code.google.com/p/caliper/Merge pull request #760 from benjchristensen/perf-tests

Performance Tests Source Folderadding diagrams to javadocs for replay(selector) variantsadding javadoc marble diagram for the mergeMap(next,completed,error) varietyMerge pull request #762 from Netflix/docs

adding javadoc marble diagram for the mergeMap(next,completed,error) varietyAdded support for custom functions in combineLatest.A variety of improvements to the javadoc text.Zip fix for multiple onCompleted and moved unsubscribe outside the lock.Merge pull request #765 from Netflix/docs

A variety of improvements to the javadoc text.Merge pull request #767 from akarnokd/ZipFixes

Zip fix for multiple onCompleted and moved unsubscribe outside the lock.Added Observable.bind

- new create signature
- new bind operator
- new subscribe overload
- OperationReplay is failing unit tests, all others are passingRe-implemented Take Operator with Bind

- also simplified implementation to not worry about thread-safety as per Rx contract
- performance improvement from 4,033,468 ops/sec -> 6,731,287 ops/secBind implementation of fromIterable, toList, toSortedListBind implementation of Map, Cast, TimestampTake: Fix Terminal State Handling

- even though unit tests don’t see it because of SafeObserver, the Take operator should not emit onCompleted more than onceBind implementation of Merge

- it’s working … but I can’t figure out the co/contra-variance for the generics! anyone have ideas?New Bind Signature and GroupBy Operator

- Changed `bind` signature to match the variant discussed at https://github.com/Netflix/RxJava/issues/746#issuecomment-32711145
- Updated code to new signature.
- Re-implemented GroupBy operator with `bind`Bind implementation of ParallelBugfix: GroupBy Completion

Found bug while doing Parallel. It was completing prematurely when child groups were asynchronous and delayed.Operator Class

- forgot to add earlierBugFix: Another GroupBy use case found and fixed.Get OperationReplay working via OnSubscribeFunc to Action1 bridge

It had not been successfully migrated before … this now passes unit tests.
This is the bridge until we port it to the new “bind” model.Deprecate the Old Create MethodGroovy: MetaMethod to disambiguate the create method during deprecation phaseTemporarily disable Scala/Kotlin builds until they are fixedUpdates while validating no major performance and memory regressionsCleanup after rebase.Remove use of @SafeVarargs (breaking Java6 build)Organize and ImportFromIterable: Remove superfluous onComplete

As per discussion at https://github.com/Netflix/RxJava/pull/770#discussion_r9030183GroupBy: No need to close over parentSubscription

As per https://github.com/Netflix/RxJava/pull/770#commitcomment-5126301Simple Javadoc for Bind

… ready to be re-written by @DavidMGross :-)Fixed ZipWithIndex using mutable state (not pretty)Merge pull request #770 from benjchristensen/bind

Bind OperatorFixed testSingleSourceManyIteratorsFix Zip race condition

ItemObserver onNext might not acquire the write lock due to an
onCompleted being handled by another thread. When handling
onCompleted, the ItemObserver does not check for any values that are
ready to be emitted, which might cause OperationZip to never emit
OnNext or OnCompleted.Simplify OperationZip ItemObserver

LinkedList permits null values, no need for NULL_SENTINEL.Merge pull request #778 from vadims/fix-zip-race

Fix zip race conditionRename `bind` to `lift`

As per discussion at https://github.com/Netflix/RxJava/issues/775#issuecomment-33075742`Observer` becomes `Observer implements Subscription`

As per decision at https://github.com/Netflix/RxJava/issues/775#issuecomment-33075742Move Observer factory methods to Observers

Follow same pattern as rx.observables, rx.schedulers, rx.subjects, rx.subscriptionsSubjects FixedMove Observers to rx.observersCompiling. Unit Tests Failing.

Now that Observer is an abstract class, Mockito is having issues with it so unit tests are a mess.Added joinTestObserverOperator Tests Retrofitted to use TestObserver

- work around inability of Mockito to correctly mock an abstract class
- 15 of 590 tests still failing587 of 590 operator unit tests passingFixed buglet in join binding.
Simplified types for groupByUntil, window, buffer, and empty to use Any and Nothing.Down to 7 of 893 unit tests failingFixed 1 Unit Test - Linked Observer/Subscription where seemingly obvious to do so.Fix Subject SubscriptionManager

Remove possibility of infinite loopClarify intent of unit testOperationJoinTest - fixingIgnore JoinsTest.whenComplicated until questions answeredFix Exception Handling from SafeObserver and SubscriptionsPerformance comparison

… numbers from my machine. Can’t fully explain the increases in performance.TestObserver fix for Scala UnitTestFix Unit TestsRestore Broken OperationJoinsTest

- confirmed the assertions, leaving broken until can be fixed (not sure what’s wrong)Conditionals: Fix all but 2 testsFix Subject.toObservable

- now correctly creates only 1 Observable instance for the life of the Subject
- this fixes the OperationJoinsTest
- thanks @akarnokd for pointing out my mistake!
- all rxjava-core unit tests are now passingFix Typo: s/CompositeException/CompositeSubscriptionFix OperationalConditional

All unit tests now pass.Merge pull request #784 from benjchristensen/lift-observer

Lift and Observer+SubscriptionImplement some Android UI related operators

1. OperatorViewClick
2. OperatorEditTextInput
3. OperatorCompoundButtonInputCareful With That Global Search And Replace, Eugene.Fix problem with Observable.create(); Avoid use of deprecated methodsMerge pull request #786 from Netflix/docs

Careful With That Global Search And Replace, Eugene.Merge pull request #787 from MarioAriasC/master

Fix problem with Observable.create()improve switchOnNext description in javadocs
repair anchors in links to RxJava wiki in javadocsObserver+Subscription -> SubscriberSubscriber and Observer

-> Restore Observer interface
-> Subscriber implements Observer, SubscriptionMerge pull request #791 from Netflix/docs

improve switchOnNext description in javadocsget the perf source workingAdded the first of the perf testsSubject reverted to Observable+Observer

- rxjava-core is passing all unit tests
- other modules are failingworking on stuffRestored use of Observer in most placesFix Scala BuildMerge pull request #793 from benjchristensen/subscriber-observer

Observer + SubscriberAdd Subscription.isUnsubscribed()Merge pull request #796 from benjchristensen/subscription-isunsubscribed

Add Subscription.isUnsubscribed()0.17.0-SNAPSHOT

Preparing for release of 0.17Scheduler Outer/InnerUpdate Modules to New SchedulerMerge pull request #797 from benjchristensen/scheduler-inner-outer

Scheduler Outer/Inner [Preview]Disabling Scala (and Kotlin) until fixedFixed issue #799 - Added break to possibly-infinite loop in CompositeException.attachCallingThreadStackAdded more possible failure cases to CompositeExceptionTestAdd testMultipleWithSameCause UnitTest

Also make tests capable of failing with timeouts. Before the constructor would immediately go into an infinite loop and hang the tests.Merge pull request #805 from benjchristensen/fix-composite-exception

Fix CompositeExceptionReimplement Zip Operator Using Lift

- Use new lift operator implement and non-blocking synchronization approach.
- I have had the concurrency model reviewed by some colleagues and all unit tests are passing but further review is justified and welcome.Subscribers for common factory methods

Similar to Observers.OperatorZipIterableZip NULL and COMPLETE SentinelsMerge pull request #785 from benjchristensen/operator-zip

Reimplement Zip Operator Using Lift [Preview]Fixed OperationSubscribeOn so OperationConditionalsTest works again.RunAsync method for outputting multiple valuesone global onCompleted objectMerge pull request #814 from akarnokd/AsyncMultiPush

RunAsync method for outputting multiple valuesMerge pull request #812 from akarnokd/ConditionalsFix

Fixed OperationSubscribeOn so OperationConditionalsTest works again.Updates some javadoc comments to reflect 0.17 changesMerge remote-tracking branch 'origin/master' into docsMerge pull request #816 from samuelgruetter/globalOnCompleted

One global onCompleted objectMerge branch 'master' of https://github.com/Netflix/RxJava into docs- Updated schedulers to reflext 0.17 changes.
- Add timer bindingsCompositeSubscription memory reductionMerge pull request #818 from akarnokd/CompositeSubscriptionPerf3

CompositeSubscription memory reductionMerge pull request #817 from Applied-Duality/ScalaBindingsWithLift

Scala Scheduler Bindings FixCompositeSubscription performance increaseMerge pull request #819 from akarnokd/CompositeSubscriptionPerf4

CompositeSubscription performance increaseFixing apparent encoding issue

Was causing grief with Git and Eclipse. Odd.Git keeps modifying this file so committing it how it wants it.Merge pull request #820 from benjchristensen/fix-CompositeSubscriptionAddRemovePerf

Git keeps modifying this file so committing it how it wants it.Merge pull request #781 from Applied-Duality/join

Fixed buglet in join binding, simplified typesMerge pull request #783 from mironov-nsk/android-ui-operators

Implement some Android UI related operatorsUpdate to use Subscriber/Subscriptions.create

Master had changed since the pull request.Merge pull request #821 from benjchristensen/fix-android-merge

Update to use Subscriber/Subscriptions.createReimplement 'subscribeOn' using 'lift'Remove 'inner.unsubscribe'Set setDaemon on NewThreadSchedulerUsing inner and fix unit testsReturn wrapped Subscription

- make sure the SafeSubscriber is included in what is returned
- then return as Subscription not Subscriber so it can't be cast back to a SubscriberMerge pull request #826 from benjchristensen/returned-subscription

Return wrapped SubscriptionMerge pull request #824 from akarnokd/NewThreadSchedulerToDaemon

Set setDaemon on NewThreadSchedulerTest Repeat with SubscribeOnOperatorRepeatFixed cut & paster error in io schedulerRepeat with Count

- merging changes from https://github.com/Netflix/RxJava/pull/807Subscribers/Observers.empty()Merge pull request #828 from benjchristensen/repeat-operator

Repeat OperatorMerge pull request #827 from Applied-Duality/BugFixesSchedulers

Fixed cut & paster error in io scheduleradding marble diagrams, see-also links to javadocs of new repeat() variantsChanging marble diagrams for repeat() variants to those that operate on a source Observable rather than a source item[Issue #831] Fix for OperationJoin race conditionTake operator was breaking the unsubscribe chain

Fixes issue https://github.com/Netflix/RxJava/issues/830Merge pull request #833 from benjchristensen/take-issue-830

Take operator was breaking the unsubscribe chainMerge pull request #829 from Netflix/docs

adding marble diagrams, see-also links to javadocs of new repeat() variantsMerge pull request #822 from zsxwing/subscribeOn

Reimplement 'subscribeOn' using 'lift'from(this) -> nest()Remove line breakMerge pull request #832 from duncani/fixes

[Issue #831] Fix for OperationJoin race conditionUpdated nrepl taskMake rx/action implement new OnSubscribe interfaceUpdate Clojure examples to use new Observable/createMerge pull request #834 from daveray/update-clojure-for-0.17

Update clojure for 0.17Setting up the new subproject for debugging observable chains.Small change to convert from Caliper to JMH.make Scala OnCompleted Notification an object instead of a classMerge branch 'master' of github.com:Netflix/RxJava into OnCompletedScalaSpecial Handling of java.lang.Error and OnErrorNotImplemented

- https://github.com/Netflix/RxJava/issues/748#issuecomment-32471495
- https://github.com/Netflix/RxJava/issues/771
- https://github.com/Netflix/RxJava/issues/789

- SynchronizedObserver is for synchronization, not error handling or contract enforcements, that's the job of SafeSubscriber
- Removed some unit tests that were asserting unsubscribe behavior that relied on SynchronizedObserver. They were testing something they are not responsible for.Merge pull request #839 from benjchristensen/error-handling

Error Handling: OnErrorNotImplemented and java.lang.ErrorObserveOn Merge from @akarnokd:OperatorRepeat2ObserveOn with BackpressureMake Parallel use NewThread until Computation Fixed

See https://github.com/Netflix/RxJava/issues/713
It was causing non-deterministic behavior, random test failures and poor performance.GroupBy Test Improvement

ObserveOn was the wrong mechanism for delaying behavior as it was relying on the buffering of observeOn.
Now using delay() to delay the group since observeOn no longer buffers.Fast Producer / Slow Consumer Backpressure Tests for ObserveOnCustom InterruptibleBlockingQueue for ObserveOn

Since we are blocking the producer on* notifications we need to interrupt it on unsubscribe events.
I need to do it on the data structure and not the thread as the thread could change for each onNext and that could have unexpected consequences.Changed to use SubscribeOn instead of ObserveOn for Async Behavior

The ObserveOn operator is for moving where it executes, not making it async. SubscribeOn makes it async.Test to prove non-blocking despite blocking onNextPerformance TestingObserveOn with Buffer SizeMerge pull request #835 from benjchristensen/observeOn

ObserveOn Operator with BackpressureMerge pull request #838 from samuelgruetter/OnCompletedScala

Make Scala OnCompleted Notification an objectMerge pull request #837 from abersnaze/perf_jmh

Perf with JMHObserver -> SubscriberRename OperatorFromIterable to OnSubscribeFromIterableOnSubscribeRangeMerge pull request #841 from benjchristensen/operator-range

Range OnSubscribeTest Unsubscribe

- also cleaned up some stuff I remembered after merging last commitsMerge pull request #842 from benjchristensen/range-unittest

Test UnsubscribeMerge branch 'master' into debug

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javainitial committests passUpdating StringObservable to use lift
And added from(InputStream) and from(Reader)Fix problem with SubscriptionAdded ChannelObservable.subscribeMerge pull request #845 from MarioAriasC/master

Fix problem with SubscriptionOperatorFilter Migrated to Lift Operator

- support synchronous unsubscribe nowSplit Merge and MergeMaxConcurrent

- Splitting them allows clearer code and avoids use of queue for normal merge.InterruptibleBlockingQueue

- used in MergeMaxConcurrent and ObserveOn
- allows for blocking onNext calls when full while still supporting unsubscribe.Observable.nest()

Make this public so that operator chaining can use it.
Usage would be someObservable.nest().lift(f) for lifting a function that expects Observable<Observable<T>> such as `repeat`.GroupBy Fixes

- There were bugs in the implementation, this fixes some of them. In particular, it was unsubscribing from the parent when all children were completed, and that would unsubscribe even if new groups were going to come.
- There are still problems related to `subscribeOn` and the "time gap" that are being played with. Unit tests related to that are still failing.ObserveOn using InterruptibleBlockingQueueIllegalStateException if Repeat receives an onErrorMigrate from Deprecated Notification ConstructorsRevert Observable.Range to support 0 for count.

It had been changed to only support >0, put it back to >=0Added overloaded createRequest method that takes an HttpContext instanceRevert to OperationMergeMaxConcurrent

The new OperatorMerge class still exists, but reverting this one.
I messed up the thread safety and don't have time to figure it out.InterruptibleBlockingQueue.size()More Parallal Unit Tests

- stressing it further while hunting down non-determismFurther TestSubscriber FunctionalityRemove Stray PrintlnComment Out "Time Gap" Tests on GroupBy

See https://github.com/Netflix/RxJava/issues/844Merge pull request #847 from benjchristensen/groupby-and-friends

Various Changes While Fixing GroupByAdd timeout unit testsAdd 'Fragment-Host' to rxjava-contrib modules for OSGiReimplement the timeout operator and fix timeout bugsRename the filesAdd the missing LicenseUse a custom SuspendableClassifierMerge pull request #849 from Acardiac/fragment-host

Add 'Fragment-Host' to rxjava-contrib modules for OSGiMerge pull request #851 from zsxwing/timeout

Reimplement the timeout operator and fix timeout bugsMerge pull request #846 from johanhaleby/master

Added overloaded createRequest method that takes an HttpContext instanceMerge pull request #777 from akarnokd/NextTestFix

Fixed testSingleSourceManyIteratorsMerge branch 'debug' of github.com:abersnaze/RxJava into rxjava-debug

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #852 from benjchristensen/rxjava-debug

rxjava-debugMerge branch 'update-string' of github.com:abersnaze/RxJava into string-observableMerge pull request #853 from benjchristensen/string-observable

StringObservable UpdateMerge pull request #763 from chrisgrimm/master

Added support for custom functions in combineLatest.Fix import org.apache.http.protocol.HttpContext;Move InterruptibleBlockingQueue Inside ObserveOn

I decided I'm not ready to commit to this in the public API so am leaving it an implementation detail of ObserveOn.
While working on groupBy, parallel and subscribeOn this queue was not the right solution.The onCreate hook disappearedMerge pull request #855 from benjchristensen/observeOn+queue

Move InterruptibleBlockingQueue Inside ObserveOnMerge pull request #854 from abersnaze/oncreate

The onCreate hook disappearedChange Lift to use rx.Observable.Operator

The generics insanity has to stop.Merge pull request #857 from benjchristensen/operator-type

Change Lift to use rx.Observable.OperatorAdd 'Fragment-Host' to rxjava-contrib/debug module for OSGiMerge pull request #859 from Acardiac/fragment-host

Add 'Fragment-Host' to rxjava-contrib/debug module for OSGiUpdate the timeout docsProposed solution to the time gap, using unbounded buffering.Fixing the generics for merge and liftminor fix in classifierOptimize Swing-RelativeMouseMotion pipelineAdded bounded buffering capability to SubscribeOnCheck child unsubscription status more eagerly.Merge pull request #860 from abersnaze/merge-generics

Fixing the generics for merge and liftMerge pull request #863 from Acardiac/swing-rel-mouse-motion

Optimize SwingMouseEventSource.fromRelativeMouseMotionMerge pull request #862 from zsxwing/timeout-docs

Update the timeout docsConvert to scan to use liftMerge pull request #790 from abersnaze/scan

Convert to scan to use liftUpdate OperationScan to OperatorScan

Migrate to use updated conventions of Operator* classes that implement rx.Observable.OperatorMerge pull request #866 from benjchristensen/operator-touchup

Update OperationScan to OperatorScanMerge branch 'BlockingBufferUntilExperiment' of github.com:akarnokd/RxJava into subscribeOn-blockingBufferTestSubscriber.awaitTerminalEventAndUnsubscribeOnTimeoutGroupBy and SubscribeOn Tests PassingAdd the selector variants of timeout in RxScalaMerge pull request #870 from zsxwing/timeout-scala

Add the selector variants of timeout in RxScalajavadoc changes: add nest() diagram, make some 0.17-related corrections, fix typos, make formatting consistent & 112-columnHide Buffer/Blocking SubscribeOn Behavior

- I want to have it for internal usage but am not ready to publicly expose it.Comment on Parallel

- the previously performed observeOn changes appear to have resolved the non-determinismjavadoc: document more exception throwingSubscribeOn Scheduler/Unsubscribe BehaviorFix Unit Tests related to SubscribeOn

- timeout test could be interrupted when unsubscribed
- groupBy.subscribeOn needs blocking buffer0.17.0-RC1-SNAPSHOTAdd timeout to CoundDownLatch, ignore InterruptException and fix the test to be consistent with the new subscribeOnUpdate CompositeSubscriptionTest.java

Fix apparent typo, unsubscription of s2 was not checked and should have been.Merge pull request #874 from davidmoten/master

Update CompositeSubscriptionTest.javaMerge pull request #7 from zsxwing/subscribeOn+groupBy

Add timeout to CoundDownLatch, ignore InterruptException and fix the tes...Revert to 1.8 as 1.10 is causing the build to fail

... complicated build server issues ... apparently isn't going to be resolved until Gradle 1.12.Merge pull request #869 from benjchristensen/subscribeOn+groupBy

subscribeOn + groupByMerge branch 'issue750' of github.com:vigdorchik/RxJava into 751-merge

Conflicts:
	language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scalaCorrect synchronization guard in groupByUntil

Can't see how `synchronized (key) { ... }` could have been correct here; `key` will hardly ever be the same instance for different invocations of `keySelector`, and the comment on line 73 clearly states `gate` to be the guard for `map`.Merge pull request #876 from benjchristensen/751-merge

Manual Merge of #750Scheduler.scheduleRecursive

Make recursive scheduling a first-class citizen without needing to refer to "this" which doesn't work inside lambdas (Java8/Scala/etc).

        Schedulers.newThread().scheduleRecursive(new Action1<Recurse>() {
            @Override
            public void call(Recurse r) {
                System.out.println("do stuff on thread: " + Thread.currentThread() + " Time: " + System.nanoTime());
                r.schedule(100, TimeUnit.MILLISECONDS);
            }
        });Merge pull request #878 from benjchristensen/scheduleRecursive

Scheduler.scheduleRecursiveMerge pull request #877 from pyrtsa/patch-1

Correct synchronization guard in groupByUntil[Gradle Release Plugin] - pre tag commit:  '0.17.0-RC1'.0.17.0-RC2-SNAPSHOTfixing javadoc layout bugsForce ViewObservable be subscribed and unsubscribed in the UI threadMerge pull request #880 from zsxwing/android-unsubscribe-thread-safe

Force ViewObservable be subscribed and unsubscribed in the UI threadFixed an issue with the from(Reader) added a bunch of unit tests.map Observable.onError(Throwable) to SendPort.close(Throwable) in-Remove Bad Filter Logic

This code was accidentally committed during exploration of groupBy/subscribeOn.Merge pull request #887 from benjchristensen/filter-cleanup

Remove Bad Filter LogicRevert Bounded ObserveOnMerge pull request #888 from benjchristensen/observeOn-bounded-unbounded

Revert Bounded ObserveOnSplit SubscribeOn into SubscribeOn/UnsubscribeOn

Working with @headinthebox based on discussions at https://github.com/Netflix/RxJava/pull/869 and https://github.com/Netflix/RxJava/pull/880#issuecomment-35163539 we determined that there are times when `unsubscribeOn` behavior is needed.

The `subscribeOn` operator can not mix `subscribe` and `unsubscribe` scheduling behavior without breaking the `lift`/`Subscriber` behavior that allows unsubscribing synchronous sources. The newly added `unsubscribeOn` operator will not work with synchronous unsubscribes, but it will work for the targeted use cases such as UI event handlers.Merge pull request #890 from benjchristensen/subscribeOn-subscriptions

Split SubscribeOn into SubscribeOn/UnsubscribeOnMove Exception Classes to rx.exceptions

Eliminate dumping ground of rx.utilMove time based util classes to rx.schedulers

Eliminate dumping ground of rx.utilUpdate sub-modulesMove rx.util.functions to rx.functions

Eliminate dumping ground of rx.utilRemove rx.util usage from sub-modules

All sub-modules and tests building and passingrx.util.functions deprecated proxiesMerge pull request #891 from benjchristensen/rx-util

Eliminate rx.util.* dumping groundsLift Performance

Using `f.lift()` directly instead of `subscribe` improves ops/second on the included test from 5,907,721 ops/sec to 10,145,486 ops/secFix DebugHookTest as per direction from @abersnazeMerge pull request #881 from benjchristensen/lift-performance

Lift PerformanceRefactor OnErrorResumeNextViaFunction to OperatoronErrorFlatMap + OnErrorThrowableChange Parallel to use Long instead of IntMerge pull request #893 from benjchristensen/parallel

Change Parallel to use Long instead of IntSynchronized Operator Check for isTerminated

As per https://github.com/Netflix/RxJava/issues/872 make Synchronized reject events after terminal state.
This class should not unsubscribe though. That is only for SafeSubscriber at the end.Merge pull request #894 from benjchristensen/synchronize-isTerminated

Synchronized Operator Check for isTerminatedMerge pull request #885 from abersnaze/observable-string-from

Fixed an issue with the from(Reader) added a bunch of unit tests.removing java 7 depMerge pull request #896 from abersnaze/observable-string-remove-7

removing java 7 depRewrite OperationObserveFromAndroidComponent to OperatorObserveFromAndroidComponentMake Subscriptions of SwingObservable thread-safeMerge pull request #883 from zsxwing/swing-thread-safe

Make Subscriptions of SwingObservable thread-safeMerge pull request #895 from zsxwing/android-operator

Rewrite OperationObserveFromAndroidComponent to OperatorObserveFromAndro...Attach Value Without Wrapping

I found a way to pass the value down the chain without wrapping the Throwable. This way it only shows up if using `onErrorFlatMap` or looking at the final cause on any given Throwable.

A final cause will be added so Throwables end up like this:

java.lang.RuntimeException: Forced Failure
	at rx.operators.OperatorMapTest$5.call(OperatorMapTest.java:164)
	at rx.operators.OperatorMapTest$5.call(OperatorMapTest.java:1)
	at rx.operators.OperatorMap$1.onNext(OperatorMap.java:54)
	at rx.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:43)
	at rx.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:1)
	at rx.Observable$2.call(Observable.java:269)
	at rx.Observable$2.call(Observable.java:1)
	at rx.Observable$2.call(Observable.java:269)
	at rx.Observable$2.call(Observable.java:1)
	at rx.Observable.subscribe(Observable.java:7022)
	at rx.Observable.subscribe(Observable.java:6945)
	at rx.operators.OperatorMapTest.testMapWithError(OperatorMapTest.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: rx.exceptions.OnErrorThrowable$OnNextValue: OnError while emitting onNext value: fail
	at rx.exceptions.OnErrorThrowable.decorate(OnErrorThrowable.java:55)
	at rx.operators.OperatorMap$1.onNext(OperatorMap.java:56)
	... 33 more

Note the final cause: Caused by: rx.exceptions.OnErrorThrowable$OnNextValue: OnError while emitting onNext value: fail

Then when onErrorFlatMap is used, it retrieves that final cause out to create an OnErrorThrowable so people don't have to go fetch it from the cause chain.Refactor to more descriptive name: OnErrorThrowable.addValueAsLastCauseMerge pull request #892 from benjchristensen/onErrorFlatMap

onErrorFlatMap + OnErrorThrowableHandle illegal errors thrown from pluginMerge pull request #898 from benjchristensen/safe-subscriber-plugin-error-handling

Handle illegal errors thrown from plugin[Gradle Release Plugin] - pre tag commit:  '0.17.0-RC2'.[Gradle Release Plugin] - new version commit:  '0.17.0-RC3-SNAPSHOT'.GroupBy Unit Test from #900

https://github.com/Netflix/RxJava/issues/900Merge pull request #901 from benjchristensen/groupBy-unit-test

GroupBy Unit Test from #900Fixed NullPointerException that may happen on timeoutMerge pull request #902 from johanhaleby/master

Fixed NullPointerException that may happen on timeoutScheduler.Recurse fields should be privateMerge: Unsubscribe Completed Inner ObservablesRxJavaSchedulers Plugin

Allow setting different default schedulers for use by system.Merge pull request #903 from benjchristensen/scheduler-visibility

Scheduler.Recurse fields should be privateMerge pull request #904 from benjchristensen/merge-subscriptions

Merge: Unsubscribe Completed Inner ObservablesRename RxJavaSchedulers to RxJavaDefaultSchedulers

Clearer semantic naming.Merge pull request #905 from benjchristensen/scheduler-defaults-plugin

RxJavaSchedulers PluginRemove groupBy with selector.

Use groupBy.map instead.Deprecate Direct Access to Scheduler Implementations

This enforces the convention of using `Schedulers.*` and then makes the RxJavaDefaultSchedulers plugin more reliable.Scheduler instances should be or behave like singletons

- remove the Func0 factory signature for Scheduler creation.Merge pull request #909 from benjchristensen/scheduler-plugin

Scheduler Plugin RefactorMerge pull request #910 from benjchristensen/groupBy-selector

Remove groupBy with selector.[Gradle Release Plugin] - pre tag commit:  '0.17.0-RC3'.[Gradle Release Plugin] - new version commit:  '0.17.0-RC4-SNAPSHOT'.Added ChannelObservable.getObservable.sample(Observable) in Scalatweak RxScalaDemo (and Olympics example)Operator: doOnTerminate

Like finallyDo but before emitting the terminal state instead of after.Merge pull request #918 from benjchristensen/doOnTerminate

Operator: doOnTerminateAdded additional test to prove issueBugFix: Zip with 0 Observables

Fixes bug reported at https://github.com/Netflix/RxJava/pull/868Merge pull request #919 from benjchristensen/zip-bugfix-868

BugFix: Zip Never Completes When Zero ObservablesDelete Deprecated onSubscribeStart That Doesn't Work

- It's messy to make this work so deleting it instead.
- Better to move forward in the 0.17 release than try and make this work for the very small percentage (probably only Netflix) that uses it.Merge pull request #920 from benjchristensen/delete-deprecated-hook-method

Delete Deprecated onSubscribeStart That Doesn't Work[Gradle Release Plugin] - pre tag commit:  '0.17.0-RC4'.[Gradle Release Plugin] - new version commit:  '0.17.0-RC5-SNAPSHOT'.customize diagram/javadocs for doOnTerminate()some RxScalaDemo tweaksChanges made while integrating it with our internal systemMerge pull request #922 from abersnaze/debug-updates

Changes made while integrating it with our internal systemadd Subscriber and Observable creation from `Subscriber[T] => Unit`Merge branch 'master' of github.com:Netflix/RxJava into scala-additionsdeprecate rx.lang.scala.Observable.create[T](Observer[T]=>Subscription)Localized Operator Error Handling

- use the lift function rather than try/catch in subscribe since this catches at the operator level rather than for an entire sequence
- unit tests with onErrorResumeNext demonstrating the use casesMerge pull request #924 from benjchristensen/lift-error-handling

Localized Operator Error HandlingInitial import of indigena-rx

Imported code, fixed namespaces and adusted one test for changes since
0.14.1.Replace chain with operators. General core cleanupGot rid of base. It was weird.Clean up future stuff and docsSome more core operatorsUpdate blocking stuffExperimental warningsUpdate Clojure READMEfix gradle spec in README

presumably the group ID should be the same for gradle as for the other dependency managers.Cleaned up naming of observable operator definition fnsImplement catch-error-value

Automating "rx.exceptions.OnErrorThrowable/addValueAsLastCause" idiom
when user code is invoked in onNext. Other minor cleanup.more READMEImplement group-by

Note that since 02ccc4d727a9297f14219549208757c6e0efce2a, the val-fn
variant of groupBy is unimplemented so for now an exception is thrown if
it's used.Implement interleave and interleave*Implemented partition-all

There isn't really an rxjava impl equivalent to clojure.core/partition,
so it's omitted.Avoid intermediate toList for blocking/intoUpdate merge/merge-delay-error impls.

Split merge into merge/merge* for consistency with other functions that
can take one or more observables or observable of observables.Updates from @mbossenbroek's feedback.interpose docstringReimplement into without toListUpdate generator docstringMake catch and finally ->> friendly

Base on @mbossenbroek's feedback. Seems like an improvement.Eliminate sorted-list variants and cleanup sort testsEliminated macro version of future stuff based on feedback.Implemented multi-sequence mapcatRemove val-fn version of group-byImplement iterateImplement rangeseq->o should seq-ify arg[Gradle Release Plugin] - pre tag commit:  '0.17.0-RC5'.[Gradle Release Plugin] - new version commit:  '0.17.0-RC6-SNAPSHOT'.Added BlockingObservableMerge pull request #925 from daveray/rxjava-clojure-bindings-final

Rxjava clojure bindings finalTestSubscriber: Default onError and Terminal Latch BehaviorMerge pull request #926 from benjchristensen/test-subscriber

TestSubscriber: Default onError and Terminal Latch BehaviorTestSubscriber lastSeenThreadMerge pull request #927 from benjchristensen/test-subscriber-last-seen-thread

TestSubscriber lastSeenThread[Gradle Release Plugin] - pre tag commit:  '0.17.0-RC6'.[Gradle Release Plugin] - new version commit:  '0.17.0-RC7-SNAPSHOT'.Fix deadlock in SubscribeOnBoundedcorrect link to maven searchA number of improvements to OperatorObserveFromAndroidComponent

- move the UI thread assert out of the operator and into the helpers; this way, we don't fail the observer anymore with an exception, but the caller.
- do not loop unsubscribe through the main thread anymore. This unnecessarily defers releasing the references, and might in fact be processed only after Android creates the component after a rotation change. I had to make the references volatile for this to work.
- immediately unsubscribe in case we detect the componentRef has become invalid. This solves the problem that dangling observers would continue to listen to notifications with no observer alive anymore.

refs:
https://github.com/Netflix/RxJava/issues/754
https://github.com/Netflix/RxJava/issues/899Initial commit of the Android samples module

refs https://github.com/soundcloud/RxJava/issues/3Implemented Skip using Lift in Observable and OperatorSkip
Deleted non-time part from OperationSkip
Moved tests to OperatorSkipTestadd Observable.startWith(Observable) method and unit test to avoid breaking method chaining when want to startWith an Observable rather than just an Iterator or specific values.add space to a comment to force ci rebuild to see if suspected non-deterministic test fails againSimplify version property forwardingFix project import issue in Android Studio and a compilation failureFixed state capture bug.
Added some additional testsFirst implementation of OperatorWeakBindingrefactor the debug hooks before they become a breaking change.Merge pull request #936 from Applied-Duality/SkipFixed

Skip fixedmath-module

Moving the average/sum/min/max functionality to the MathObservable similar to StringObservable.Merge pull request #942 from benjchristensen/math-module

MathObservableOperationRetry -> OperatorRetry

Updated to use "lift" and Subscriber.
Fixes https://github.com/Netflix/RxJava/issues/943 Observable.retry() does not unsubscribe from sourceMerge pull request #944 from benjchristensen/operator-retry

OperationRetry -> OperatorRetryMerge branch 'clean-up-hook-args' of github.com:abersnaze/RxJava into merge-940

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #945 from benjchristensen/merge-940

Manual Merge 940Merge pull request #934 from davidmoten/add-startWith

add Observable.startWith(Observable) method and unit testMerge pull request #929 from devisnik/fix_maven_search_link

correct link to maven searchMerge pull request #923 from samuelgruetter/scala-additions

Observable creation from Subscriber[T]=>Unit for ScalaMove state inside SubscriberIgnoring broken unit tests until fixed

/cc @abersnazeChanging line 38 to try and fix build

Odd Jenkins build failures even though command-line build works fine:

```
:rxjava:rxjava-contrib:rxjava-debug:compileJava/mnt/builds/slave/workspace/OSS-RxJava-release/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java:38: ')' expected
            sourceFunc = ((DebugHook<C>.DebugOnSubscribe<T>) sourceFunc).getActual();
                                       ^
/mnt/builds/slave/workspace/OSS-RxJava-release/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java:38: ')' expected
            sourceFunc = ((DebugHook<C>.DebugOnSubscribe<T>) sourceFunc).getActual();
                                        ^
/mnt/builds/slave/workspace/OSS-RxJava-release/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java:38: illegal start of expression
            sourceFunc = ((DebugHook<C>.DebugOnSubscribe<T>) sourceFunc).getActual();
                                                           ^
/mnt/builds/slave/workspace/OSS-RxJava-release/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java:38: not a statement
            sourceFunc = ((DebugHook<C>.DebugOnSubscribe<T>) sourceFunc).getActual();
                                                             ^
/mnt/builds/slave/workspace/OSS-RxJava-release/rxjava-contrib/rxjava-debug/src/main/java/rx/plugins/DebugNotification.java:38: ';' expected
            sourceFunc = ((DebugHook<C>.DebugOnSubscribe<T>) sourceFunc).getActual();
                                                                       ^
5 errors
 FAILED
```[Gradle Release Plugin] - pre tag commit:  '0.17.0-RC7'.[Gradle Release Plugin] - new version commit:  '0.17.0-RC8-SNAPSHOT'.startWith(observable) marble diagramMerge pull request #931 from soundcloud/android-operator-improvements

A number of improvements to OperatorObserveFromAndroidComponentMerge branch 'master' of https://github.com/Netflix/RxJava into docscorrecting markup error in javadoc commentsOperationAll to OperatorAlladd support for eclipse pdefixing a variety of errors in javadoc generation (syntax errors, misnamed params, etc.)Add amb, delay and delaySubscription in rxjava-scalaReimplement the amb operatorRename OperationAmb to OperatorAmbRename observer to subscriber and add a special logic to exit the loopFix docsChange to a single 'get' callMerge pull request #950 from Acardiac/eclipse-pde-support

Add support for Eclipse PDEVersion 0.17.00.17.0 Release NotesVersion 0.17.0 Release NotesUpdate CHANGES.md0.17.0-SNAPSHOT[Gradle Release Plugin] - pre tag commit:  '0.17.0'.[Gradle Release Plugin] - new version commit:  '0.17.1-SNAPSHOT'.Update CHANGES.mdMake OperatorObserveOnTest.testNonBlockingOuterWhileBlockingOnNext deterministic

reported at https://twitter.com/jaceklaskowski/status/443153927069249536Merge pull request #953 from benjchristensen/observe-on-non-deterministic-test

Make ObserveOnTest.testNonBlockingOuterWhileBlockingOnNext deterministicFixed ReplaySubject leakFixed byLine test to use line.separator system property instead of \n.OperationToFuture must throw CancellationException on get() if cancelled.

The documentation for Future.get() requires the method to throw CancellationException if the Future was cancelled before the task completed. The Futures returned by OperationToFuture.toFuture() did not respect this contract. Now they do.Bump Android plugin version to 0.9Switch to customizable Gradle wrapperTrigger samples build manually via Gradle build propertyMerge remote-tracking branch 'netflix/master' into android-samplesRevert to using the all Gradle wrapper dist typeOperatorSkipWhileAdd full example for Activity + retained fragment + cacheAdd sample for fragments and connectable observablesAdd sample for binding to list adapters in ListFragmentMerge pull request #930 from mttkay/android-samples

Initial commit of the Android samples modulemerge remote-tracking branch 'netflix/master' into operator-weak-bindingOperatorWeakBinding supports predicates nowSome cleaning upGuard the log callsForward subscription of wrapped subscriberRewrite AndroidObservableTest to test the new operatorMerge pull request #938 from soundcloud/operator-weak-binding

OperatorWeakBinding (deprecates OperatorObserveFromAndroidComponent)Merge pull request #952 from zsxwing/amb

rxjava-scala improvements and reimplemented the `amb` operatorMerge pull request #955 from akarnokd/ReplaySubjectLeakFix

Fixed ReplaySubject leakMerge pull request #956 from akarnokd/StringObservableTestFix

Fixed byLine test to use line.separator system property instead of \n.Merge pull request #958 from akarnokd/OperatorSkipWhile

OperatorSkipWhileMerge pull request #959 from rickbw/toFuture-cancellation

OperationToFuture must throw CancellationException on get() if cancelledMerge pull request #928 from akarnokd/SubscribeOnBoundedFix

Fix deadlock in SubscribeOnBoundedRetry Unit Test from #879

From https://github.com/Netflix/RxJava/issues/879Merge pull request #960 from benjchristensen/issue-879-unit-test

Retry Unit Test from #879OperationSynchronize -> OperatorSynchronizeOperatorSerializenot quite functional ... and slowFunctional now ... it seems.Migrate Merge from Synchronize to SerializeExperimenting with different implementations and performanceClarify names during testingUnit tests for eachUnlock in finally blockqueue and lock implementationSerializedObserver and SerializedSubscriber

Using the "queue and lock" implementation which won our performance and production testing.Synchronize -> Serialize

- migrate all usage to Serialized instead of Synchronized
- remove implementations of SerializedObserver that lost the competition (performance and testing in production)Merge pull request #962 from benjchristensen/serialize-synchronize

Migrate from SynchronizedObserver to SerializedObserver[Gradle Release Plugin] - pre tag commit:  '0.17.1'.[Gradle Release Plugin] - new version commit:  '0.17.2-SNAPSHOT'.Updated gradle build scripts so there is a separate benchmarks taskUpdated ObservableBenchmark to follow better benchmarking practicesMerge pull request #963 from gvsmirnov/master

A more robust JMH benchmarking set-upSubjectSubscriptionManager fix.Merge pull request #964 from akarnokd/SubjectSubscriptionManagerFix

SubjectSubscriptionManager fix.Version 0.17.1Reimplement the 'single' operatorAdd first, last, single to rxjava-scalaThrow NoSuchElementException in the first, last and single operators when the Observable is emptyRename OperationFirstOrDefaultTest and OperationLastTest to OperatorFirstOrDefaultTest and OperatorLastTestFix clojure testFix tests in rxjava-mathNotifications for the allocation adverse.Fixed deadlock in Subjects + OperatorCache.Merge pull request #970 from abersnaze/notification-lite

Notifications for the allocation adverse.Merge with Serialize

- concurrency unit tests
- handle Observable that emits onComplete multiple timesMerge pull request #973 from benjchristensen/merge-handle-bad-observable

Merge with Serialize - Handle Bad ObservablesTestSubject, TestObserver and TestScheduler ImprovementsMerge pull request #974 from benjchristensen/testing

TestSubject, TestObserver and TestScheduler ImprovementsGroupBy & Time Gap Fixes

I ran head-on into the "time gap" (https://github.com/Netflix/RxJava/issues/844) issue while working on a stream processing use case (and new 'pivot' operator I'm writing).
This is a solution. It's still not ideal as the Javadocs of BufferUntilSubscriber mention, but this is working better than nothing and does not require blocking threads.
A better solution will come as part of the back pressure work where BufferUntilSubscriber will evolve to have a bounded buffer.Merge pull request #975 from benjchristensen/groupBy-fixes

GroupBy & Time Gap FixesCompilation FixFix Unit Test Assertionparallel-merge unit test assertions

Using serialize for merge allows less threads to be used under contention instead of blocking and using them all.
This changes the assertion to be <= 3 instead of == 3 because of that.Merge pull request #976 from benjchristensen/parallel-merge-assertions

parallel-merge unit test assertionsDematerialize - handle non-materialized terminal eventsMerge pull request #977 from benjchristensen/dematerialize

Dematerialize - handle non-materialized terminal eventsChain Subscription in TimeoutSubscriber and SerializedSubscriberReimplement the ElementAt operatorAdd ElementAt and ElementAtOrDefault to rxjava-scalaImplement ElementAt as OperatorMerge branch 'master' into singleFix typosPivot OperatorMerge pull request #982 from benjchristensen/pivot

Pivot OperatorPivot Unit TestAdd Javadoc to PivotMerge pull request #984 from benjchristensen/pivot-concurrency

Tests and Javadoc for Pivotadd marble diagrams to pivot() javadocsMerge pull request #966 from zsxwing/elementAt

Reimplement the ElementAt operator and add it to rxjava-scalaMerge pull request #965 from zsxwing/fix-timeout-unsubscribe

BugFix: Chain Subscription in TimeoutSubscriber and SerializedSubscriberFix SynchronizedObserver.runConcurrencyTest

It wasn't waiting on all threads before emitting onCompleted.Merge pull request #986 from benjchristensen/issue-985

Fix SynchronizedObserver.runConcurrencyTestFix Non-Deterministic Pivot Test

This failed on build servers (small, slow, single or dual-core machines).Merge pull request #987 from benjchristensen/pivot

Fix Non-Deterministic Pivot TestOnErrorFailedException

Re-throw when onError throws an Exception.
This fixes https://github.com/Netflix/RxJava/issues/969Merge pull request #988 from benjchristensen/issue-969

OnErrorFailedException[Gradle Release Plugin] - pre tag commit:  '0.17.2'.[Gradle Release Plugin] - new version commit:  '0.17.3-SNAPSHOT'.0.17.2Use Quasar 0.5.0 releasefix jmh build config

This is now working from command-line and EclipseMerge pull request #991 from benjchristensen/jmh-build

JMH Benchmark Build ConfigMigrate Pre-JMH Tests to rx.archiveTarget Java 1.6Merge remote-tracking branch 'upstream/master'Match updated RxJava API (rx.util.function -> rx.functions etc.)Change target back to 1.7

doesn't compile b/c channels implement AutoCloseable, added in JDK 7.JMH Benchmarks Gradle Config

- this allows running benchmarks
- config is hardcoded right now
- wasn't able to get uberjar/shadowjar functionality working (https://github.com/Netflix/RxJava/pull/963#issuecomment-38770680)Perf Tests with JMHMerge pull request #993 from benjchristensen/perf-tests

JMH Perf TestsNew Implementation of SerializedObserver

#### JMH Benchmarks

0.17.3

Benchmark                                                          (size)   Mode   Samples         Mean   Mean error    Units
r.operators.OperatorSerializePerf.noSerializationSingleThreaded      1024   avgt         5       45.504        1.710    ns/op
r.operators.OperatorSerializePerf.noSerializationSingleThreaded   1048576   avgt         5       58.600        5.647    ns/op
r.operators.OperatorSerializePerf.serializedSingleStream             1024   avgt         5       68.610        4.596    ns/op
r.operators.OperatorSerializePerf.serializedSingleStream          1048576   avgt         5       71.313        2.318    ns/op
r.operators.OperatorSerializePerf.synchronizedSingleStream           1024   avgt         5       73.322        3.666    ns/op
r.operators.OperatorSerializePerf.synchronizedSingleStream        1048576   avgt         5       76.518        1.355    ns/op

0.17.2

Benchmark                                                          (size)   Mode   Samples         Mean   Mean error    Units
r.operators.OperatorSerializePerf.noSerializationSingleThreaded      1024   avgt         5       45.790        1.184    ns/op
r.operators.OperatorSerializePerf.noSerializationSingleThreaded   1048576   avgt         5       58.518        3.788    ns/op
r.operators.OperatorSerializePerf.serializedSingleStream             1024   avgt         5       72.665        7.851    ns/op
r.operators.OperatorSerializePerf.serializedSingleStream          1048576   avgt         5       74.788        2.946    ns/op
r.operators.OperatorSerializePerf.synchronizedSingleStream           1024   avgt         5       73.661        3.499    ns/op
r.operators.OperatorSerializePerf.synchronizedSingleStream        1048576   avgt         5       78.386        5.036    ns/op

#### Manual Benchmarks

/**
 * 0.17.3:
 *
 * Run: 10 - 9,746,505 ops/sec
 * Run: 11 - 9,956,019 ops/sec
 * Run: 12 - 10,053,770 ops/sec
 * Run: 13 - 10,076,958 ops/sec
 * Run: 14 - 9,983,319 ops/sec
 *
 * 0.17.2:
 *
 * Run: 10 - 9,851,999 ops/sec
 * Run: 11 - 9,726,975 ops/sec
 * Run: 12 - 9,719,762 ops/sec
 * Run: 13 - 9,668,141 ops/sec
 * Run: 14 - 9,799,700 ops/sec
 *
 * @param input
 */
public void serializedSingleStream(Input input) {
    for (int i = 0; i < reps; i++) {
        input.observable.serialize().subscribe(input.subscriber);
    }
}Support Custom JMH ArgsMerge pull request #995 from benjchristensen/jmh-args

Support Custom JMH ArgsProduce a shadow'd jar for the performance benchmarkstabs to spacesMerge pull request #996 from rspieldenner/perfshadowjar

PerfshadowjarUpdate SerializedObserver to Not Allow Notification Delay

Unit test showing delays. Fails when MAX_DRAIN_ITERATION set to 1, passes as currently configured.
Added a thread starvation unit test and marked as ignored for now. Doesn't pass even with MAX_DRAIN_ITERATION set to 1. Probably needs backpressure solution.Func0 can transparently implement java.util.concurrent.Callable.

This change doesn't change the API at all for users of Func0, but it makes all Func0 objects immediately reusable with any JDK API that accepts Callables. For example, a Func0 can now be submitted directly to an ExecutorService for asynchronous execution. It also allows the elimination of a small amount of redundant code within RxJava itself.Merge pull request #1003 from rickbw/callable-func0

Func0 can transparently implement java.util.concurrent.Callable.add toMap from Java Observableadd examples of toMap to RxScalaDemo

Added examples for all three overloads and removed newlines between
methods and docscorrected implementation

Implementation corrected to not raise exceptionsUse latches instead of sleep for unit test

As per suggestion at https://github.com/benjchristensen/RxJava/commit/5b317ad827f624bed6cbf5f2e04df050ebbe01d0#commitcomment-5839773comments to walk through logicAdding a new RetainedFragment exampleFix unit test determinismMerge pull request #999 from benjchristensen/serialize-optimizations

New Implementation of SerializedObserver[Gradle Release Plugin] - pre tag commit:  '0.17.3'.[Gradle Release Plugin] - new version commit:  '0.17.4-SNAPSHOT'.Version 0.17.3UnsafeSubscribe

Migrate from reflection to unsafeSubscribe as per discussion at https://github.com/Netflix/RxJava/issues/676Ignore Unit Test until Delay is Fixed

See https://github.com/Netflix/RxJava/issues/1011Merge pull request #990 from puniverse/master

Quasar integration contrib moduleRemoved window between the two synchronized blocks.Merge pull request #1012 from akarnokd/SerializedObserverFix2

Removed window between the two synchronized blocks.[Gradle Release Plugin] - pre tag commit:  '0.17.4'.[Gradle Release Plugin] - new version commit:  '0.17.5-SNAPSHOT'.0.17.4Fix BlockingOperator Subscribe Behavior

The blocking operators need to use 'subscribe', not 'unsafeSubscribe' since they need the SafeSubscriber behavior in the final subscribe step they perform.
Renamed operators to BlockingOperator* for clarity and to match the Operation->Operator naming change.Merge pull request #1010 from benjchristensen/unsafe-subscribe

UnsafeSubscribeRemove Redundant protectivelyWrap MethodMerge pull request #1015 from benjchristensen/safe-subscribe

Remove Redundant protectivelyWrap Methodunsubscribe before retryUnsubscribe on retry using SerialSubscriptionMerge pull request #1019 from benjchristensen/retry-1018

Fix: retry() never unsubscribes from source until operator completes[Gradle Release Plugin] - pre tag commit:  '0.17.5'.[Gradle Release Plugin] - new version commit:  '0.17.6-SNAPSHOT'.Version 0.17.5Upgrade Gradle wrapper for Android samples to Gradle 1.11

Android Studio 0.5.4 refuses to build with 1.10OperatorWeakBinding to not use WeakReferences anymore

related issues:
https://github.com/Netflix/RxJava/pull/1008
https://github.com/Netflix/RxJava/issues/1006
https://github.com/Netflix/RxJava/issues/979isolate subscriber used for retries, cleanup testsUpdating the new sample to demonstrate UI binding

This commit binds the observable to a method where a user can update their UI accordingly.Benchmarking: Add JMH benchmark for ReplaySubject.exclude tests

excluding out all tests until they stop hanging CloudBeesRestore rxjava-scala

Accidentally commented out while doing Java 8 builds (since Scala has issues with Java 8)Fix NPE in SubjectSubscriptionManagerexclude tests

try that againMerge pull request #1031 from benjchristensen/subject-npe

Fix NPE in SubjectSubscriptionManagerMerge pull request #1030 from daschl/subj-bench

Benchmarking: Add JMH benchmark for ReplaySubject.Merge branch 'petermd/retry-timeout' of github.com:petermd/RxJava into retry-1027Unit Test and Review of #1027Merge pull request #1033 from benjchristensen/retry-1027

Manual Merge #1027OperatorWeakBinding -> OperatorConditionalBindingMove bindFragment call in sample to onCreate

Having it in onViewCreated is fine, but misleading, since we don't need to reattach retained fragments. (the referenced object remains the same.)replaced FRP with RP in README title

Mentioning "Functional Reactive Programming" causes confusion and misconception.
I think it's better to simply stick with "Reactive Programming".Simplify 'buffer' signature to be the same as 'window'.improve javadocs for onErrorFlatMap( ) with link to wiki docs & marble diagramrxjava-android: parameterize OperatorViewClick by concrete view typeMerge pull request #1021 from mttkay/fix-operator-weak-binding

OperatorWeakBinding to not use WeakReferences anymoreMerge pull request #1036 from GeorgiKhomeriki/master

replaced FRP with RP in README titleTitle -> RxJava: Reactive Extensions for the JVMMerge pull request #1005 from suncelesta/scala-observable-update

add toMap from Java ObservableMerge branch 'SubjectDeadlockFix320' of github.com:akarnokd/RxJava into pull-972

Conflicts:
	rxjava-core/src/main/java/rx/operators/OperatorCache.java

Updated OperatorCache to use `unsafeSubscribe` to fix merge conflicts.Simplify Subscription/Observer StateRemove Redundant Action1 Observer Collection Argument

Since the collection is being returned we don't want to also inject it as an argument, so I migrated to Action0 from Action1 as per discussion at https://github.com/Netflix/RxJava/pull/972#issuecomment-38189145Kotlin M7, minor fixes, compatibility with 0.17.0Test with full compatibility with 0.17.0Update doc comments.Update READMEMerge pull request #1040 from benjchristensen/pull-972

Merge and Cleanup of #972Merge pull request #1042 from MarioAriasC/master

Kotlin M7 and full compatibility with 0.17.0Merge pull request #1035 from vigdorchik/scala_cleanup

Scala cleanupMerge pull request #1009 from zsiegel/update-android-sample

Android - Adding a new RetainedFragment exampleMerge pull request #1020 from mttkay/android-samples-gradle-1-11

Upgrade Gradle wrapper for Android samples to Gradle 1.11Merge pull request #1038 from Yarikx/android-view-observable

rxjava-android: parameterize OperatorViewClick by concrete view type[Gradle Release Plugin] - pre tag commit:  '0.17.6'.[Gradle Release Plugin] - new version commit:  '0.17.7-SNAPSHOT'.0.17.6(#1045) clarify javadocs to accurately describe currently-intended behavior of sample()Scheduler.inner() for CoreScheduler.inner() for Language and Contrib Modulesinner() -> createInner()

See https://github.com/Netflix/RxJava/issues/997#issuecomment-40818768degreeOfParallelism() -> parallelism()

https://github.com/Netflix/RxJava/issues/997#issuecomment-40819656Merge pull request #1047 from benjchristensen/scheduler-0.18-with-inner

Scheduler Simplification0.18.0-SNAPSHOTRemove ExecutorScheduler - New ComputationScheduler

- see https://github.com/Netflix/RxJava/issues/711 and https://github.com/Netflix/RxJava/issues/713Merge pull request #1048 from benjchristensen/executor-scheduler

Remove ExecutorScheduler - New ComputationSchedulerMove rx.joins to rxjava-joins module

Migrating rx.joins into a separate contrib module as part of roadmap to 1.0: https://github.com/Netflix/RxJava/issues/1001#issuecomment-40390984
This is being done until the rx.joins API has further time to mature as it is likely to change and we can't make breaking changes any further once we hit 1.0.Merge pull request #1049 from benjchristensen/joins-module

Move rx.joins to rxjava-joins moduleReimplement "SkipLast" operatorRename OperationSkipLast to OperatorSkipLastReimplement the "SkipLast" operator with timeReplace LinkedList with ArrayDequeMerge branch 'single' of git://github.com/zsxwing/RxJava into merge-967

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/operators/OperationSingle.java
	rxjava-core/src/test/java/rx/operators/OperatorLastTest.javaMerge pull request #1051 from benjchristensen/merge-967

Manual Merge #967Merge pull request #1050 from zsxwing/skip-last

Reimplement the 'SkipLast' operatorComputationScheduler -> EventLoopsScheduler

- This implementation is used by Schedulers.computation() but is actually a pool of event loops, so renaming.Restoring parallel() to using Schedulers.computation()

See https://github.com/Netflix/RxJava/issues/713 for background on this.Merge pull request #1052 from benjchristensen/computation-scheduler

Scheduler CleanupRemove deprecated rx.util.functions.*

- organized imports and fixed few places that were still accidentally using the old packageRemove deprecated methods/classes from rxjava-core

Cleanup on path to 1.0: https://github.com/Netflix/RxJava/issues/1001#issuecomment-40888251Merge pull request #1053 from benjchristensen/deprecation-cleanup

Deprecation Cleanupclose #1054Add drop and dropRight to rxscalaFix issue #1044Deprecate Observable.applyMerge pull request #1055 from puniverse/master

close #1054Merge pull request #1057 from zsxwing/issue-1044

Fix issue #1044Merge pull request #1056 from zsxwing/scala-drop

Add drop(skip) and dropRight(skipLast) to rxscalatypoMerge pull request #1058 from jaceklaskowski/javadoc

Typo in javadocOperatorAllOperatorAnyFix bugs in equals and hashCodeOperatorAsObservableOperatorAsObservable LFOnly cache the latest items in the time windowCompositeSubscription fixadd synchronous test of resubscribe after errorMerge branch 'master' of github.com:MarkVanDerVoort/RxJava into operator-all

Conflicts:
	rxjava-core/src/main/java/rx/Observable.java
	rxjava-core/src/main/java/rx/operators/OperationAll.java
	rxjava-core/src/test/java/rx/operators/OperatorAllTest.javaMerge branch 'OperatorAll' of github.com:akarnokd/RxJava into operator-all

Conflicts:
	rxjava-core/src/main/java/rx/operators/OperatorAll.java
	rxjava-core/src/test/java/rx/operators/OperatorAllTest.javaSimplify Subscription ChainMerge pull request #1069 from benjchristensen/operator-all

Manual Merge of OperatorAllMerge branch 'OperatorAny' of github.com:akarnokd/RxJava into operator-any

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaOperationAnyTest -> OperatorAnyTest

Match new naming convention.Simplify Subscription ChainMerge pull request #1070 from benjchristensen/operator-any

Manual Merge of OperatorAnyMerge pull request #1063 from zsxwing/Timestamped-bug

Fix bugs in equals and hashCode of TimestampedMerge branch 'OperatorAsObservable' of github.com:akarnokd/RxJava into merge-asObservable

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #1071 from benjchristensen/merge-asObservable

Manual Merge of AsObservableMerge pull request #1066 from akarnokd/CompositeSubscriptionFix422

CompositeSubscription fixMerge pull request #1068 from davidmoten/retry-unit-test

add synchronous test of resubscribe after errorScheduler.Inner -> Scheduler.Worker

As per decision at https://github.com/Netflix/RxJava/issues/997#issuecomment-40998613Merge pull request #1072 from benjchristensen/scheduler.worker

Scheduler.Inner -> Scheduler.Worker[Gradle Release Plugin] - pre tag commit:  '0.18.0'.[Gradle Release Plugin] - new version commit:  '0.18.1-SNAPSHOT'.0.18.0OperatorBufferOperatorConcatRename concat testOperatorCombineLatestOperatorDefaultIfEmptyOperatorDeferOperatorDematerializeOperatorDistinctOperatorDistinctUntilChangedOperatorFinallyDoOperatorMergeMapOperatorToObservableFutureMerge pull request #1065 from zsxwing/skip-last-timed

Optimize OperatorSkipLastTimedMerge pull request #1073 from akarnokd/OperatorBuffer

OperatorBufferMerge pull request #1074 from akarnokd/OperatorConcat

OperatorConcatMerge branch 'OperatorCombineLatest' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorDefaultIfEmpty' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorDefer' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorDematerialize' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorDistinct' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorDistinctUntilChanged' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorFinallyDo' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorMergeMap' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'to-observable-future' of git://github.com/zsxwing/RxJava into merge-prsMethod Signature CleanupMerge pull request #1089 from benjchristensen/merge-prs

Manual Merge of Several PRsHandle Thrown Errors with UnsafeSubscribe

... oxymoronic commit here ... adding some safety to unsafeSubscribe.
... fixes https://github.com/Netflix/RxJava/issues/1090Merge pull request #1091 from benjchristensen/unsafeSubscribe-error-handling

Handle Thrown Errors with UnsafeSubscribeReconnecting ObservableExecutionHook.onCreate

Somehow this got lost in the refactorings over the past few weeks.Merge pull request #1092 from benjchristensen/ObservableExecutionHook-onCreate

Restore ObservableExecutionHook.onCreate[Gradle Release Plugin] - pre tag commit:  '0.18.1'.[Gradle Release Plugin] - new version commit:  '0.18.2-SNAPSHOT'.0.18.10.18.1OperatorDebounceRemoved localTerminate as it is never observed as true at that point.OperatorGroupByUntilOperatorGroupJoinOperatorTimerAndSampleOperatorToMultimapOperatorToMapOperatorAsyncRemoved deprecated APIOperatorJoinOperatorMergeDelayErrorFix last test case.OperatorMergeMaxConcurrentFix ReplaySubject's double termination problem.OperatorMulticastAndReplayOperatorOnErrorResumeNextViaObservableOperatorOnErrorReturnOperatorUsingOperatorTimeIntervalOperatorThrottleFirstOperatorTakeWhileOperator OnExceptionResumeNextViaObservableOperator ParallelMergeOperatorRefCountOperatorSequenceEqualOperatorSkipTimedOperatorSkipUntilAdd lift to rxscalaAdd Operator conversion, tail and update liftExample2Add unsubscribeOperators of contrib-mathCorrected LFOperator WhenFix for SerializedObserverTestConditional statements contribution to OperatorOperator SwitchOperator TakeTimedUpdate CompletenessTestMerge branch 'OperatorGroupByUntil' of github.com:akarnokd/RxJava into merge-prsMerge branch 'to-multimap' of git://github.com/zsxwing/RxJava into merge-prsMerge branch 'OperatorTimer' of github.com:akarnokd/RxJava into merge-prsMerge branch 'to-map' of git://github.com/zsxwing/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'using' of git://github.com/zsxwing/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorAsync' of github.com:akarnokd/RxJava into merge-prsMerge branch 'OperatorJoin' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorGroupJoin' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorMergeDelayError' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorMergeMaxConcurrent' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'ReplaySubjectDoubleCompletionFix' of github.com:akarnokd/RxJava into merge-prsMerge branch 'OperatorMulticast' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorOnErrorResumeNextViaObservable' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorOnErrorReturn' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'time-interval' of git://github.com/zsxwing/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'throttle-first' of git://github.com/zsxwing/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'take-while' of git://github.com/zsxwing/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorOnExceptionResumeNextViaObservable' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorParallelMerge' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorRefCount' of github.com:akarnokd/RxJava into merge-prsMerge branch 'OperatorSequenceEquals' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorSkipTimed' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorSkipUntil' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge branch 'OperatorContribMath' of github.com:akarnokd/RxJava into merge-prsMerge branch 'OperatorContribJoin' of github.com:akarnokd/RxJava into merge-prsMerge branch 'SerializedObserverTestFix' of github.com:akarnokd/RxJava into merge-prsMerge branch 'OperatorComputationExpr' of github.com:akarnokd/RxJava into merge-prsMerge branch 'OperatorSwitch' of github.com:akarnokd/RxJava into merge-prsMerge branch 'OperatorTakeTimed429' of github.com:akarnokd/RxJava into merge-prs

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #1132 from benjchristensen/merge-prs

Manual Merge of Several PRscollapse imports

attempt to reduce merge conflicts as it's always the import statements that are conflictingMerge pull request #1133 from benjchristensen/imports

collapse importsOperatorTakeUntilOperatorTakeLastFixes to the operators.Operator Window and other changesUpdate the signature of liftUse NotificationLiteUpdate 'contains' signature to 'contains(Object)'Modified BufferUntilSubscriber to onError for any subscriber but the firstOperator Delay rebase & fixesMerge pull request #1124 from zsxwing/scala-lift

Add lift to rxscalaMerge pull request #1134 from zsxwing/take-last

OperatorTakeLastMerge pull request #1135 from zsxwing/take-until

OperatorTakeUntilMerge pull request #1137 from akarnokd/OperatorFixes430

Fixes to the operators.Merge pull request #1138 from akarnokd/OperatorWindow430

Operator Window and other changesMerge pull request #1142 from zsxwing/contains

Update 'contains' signature to 'contains(Object)'Merge branch 'OperatorDelay505' of github.com:akarnokd/RxJava into merge-delay

Conflicts:
	rxjava-core/src/main/java/rx/Observable.javaMerge pull request #1148 from benjchristensen/merge-delay

Manual Merge of Delay PRMake finalFix ReplaySubject termination raceReplaySubject testRaceForTerminalState()Merge pull request #1150 from benjchristensen/replay-fix

Fix ReplaySubject Terminal State Race Condition[Gradle Release Plugin] - pre tag commit:  '0.18.2'.[Gradle Release Plugin] - new version commit:  '0.18.3-SNAPSHOT'.Version 0.18.2Add 'dropUntil' to RxScalaAdd 'contains' to RxScalaAdd 'repeat' to RxScalaAdd 'doOnTerminate' to RxScalaAdd 'startWith' to RxScalaAdd 'publish' variants to RxScalaScheduler correctness improvements.Change '(() => Subscription, Observable[R])' to 'ConnectableObservable[R]'Add 'multicast' variants to RxScalaRemove 'Observable.apply(Int)'Add 'replay' variants to RxScalaRemoved use of deprecated API from tests & operators, fixed year in headers, added and removed suppressions, fixed line endings, replaced tabs with spacesRemoved unused interfaceReplace '+' with '::'fix to remove drift from schedulePeriodicFix defer for Java 8 type-inference

Fixes https://github.com/Netflix/RxJava/issues/1157Merge pull request #1163 from benjchristensen/defer-generics

Fix defer for Java 8 type-inferenceMerge pull request #1161 from akarnokd/RemoveOnSubscribeFuncRefs

Removed use of deprecated API from tests & operators, fixed year in head...Merge pull request #1162 from kirkshoop/stableperiodic

fix to remove drift from schedulePeriodicMerge pull request #1159 from zsxwing/rxscala-improvement

Rxscala improvementJMH Perf Tests for Schedulers.computationMerge pull request #1164 from benjchristensen/scheduler-jmh-perf-tests

JMH Perf Tests for Schedulers.computationMerge pull request #1158 from akarnokd/SchedulerFixes0506

Scheduler correctness improvements.Revert #1163 until decision made

Reverting change made in #1163 as it broke the build[Gradle Release Plugin] - pre tag commit:  '0.18.3'.[Gradle Release Plugin] - new version commit:  '0.18.4-SNAPSHOT'.Update according to review in issue #1159Merge branch 'master' into replay-multicast

Conflicts:
	language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scalaRemove () and update CompletenessTestRemove 'startWith', add '+:' and ':+'Update 'startWith' info in CompletenessTestMerge pull request #1165 from zsxwing/review-issue1159

Update according to review in issue #1159Merge branch 'master' into replay-multicast

Conflicts:
	language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scalaChange to batch dequeue.Fixed synchronous ConnectableObservable.connect problemGroubByUntil to use BufferUntilSubscriberAdd facilities for creating Observables from JavaFX events and ObservableValues.

Provides:
 * a Scheduler implementation ensuring execution in the JavaFX UI thread
 * a Subscription implementation ensuring that un-subscription happens in JavaFX UI thread
 * an Observable factory method for observing UI events on JavaFX nodes
 * an Observable factory method for observing value changes of a JavaFX ObservableValue

Also the rxjava-javafx is added to the gradle build.Switch to direct accept and no instanceofMerge pull request #1183 from akarnokd/NotificationLitePerf

NotificationLite.accept performance improvementsMerge pull request #1177 from akarnokd/GroupByUntilTimeGap

GroupByUntil to use BufferUntilSubscriberVersion 0.18.3BehaviorSubject subscription timegap fixBehaviorSubject subscription timegap fix 2Going liteSome performance improvementsPublishSubject to match BehaviorSubjectUnified the Subject management.Merge pull request #1182 from amazari/rxjava-javafx

Merge pull request #1182Add note to javadocs about ConnectableObservables requiring connect() call (#1180)Fix issue #1173Fix the bug that the inner Subscriber can not be unsubscribed and elimilate scaladoc warningsUpdate CompletenessTest.scalaFix issue #1187Update the signature of "schedule" methodsFix attempt #1Add sequenceEqual to RxScalaAdd take variants to RxScalaAdd takeRight(takeLast) variants to RxScalaAdd timeInterval to RxScalaNegative schedule time now indicates immediate execution.Fix issue #1196 and some docs issuesComment explaining non-positive delay valuesUpdate more mappings to CompletenessTestAdd delay variants to RxScalaUpdate range commentsAdd using to RxScalaAdd buffer variants to RxScalaAdding marble diagrams to StringObservable operator javadocsEDGE-1369 document runAsync/StoppableObservableMight help with questions like in the email thread "javadoc for api-sdk in Eclipse: how to?"Merge pull request #1188 from zsxwing/issue1187

Fix issue #1187 and #1196Comment out javafx until build is fixedMerge pull request #1175 from akarnokd/ConnectableObservableSynchronousFix

Fixed synchronous ConnectableObservable.connect problemMerge pull request #1172 from akarnokd/ObserveOnBatchDequeue

ObserveOn: Change to batch dequeue.Merge pull request #1191 from akarnokd/OperatorPivotTestFix

Fix attempt for OperatorPivotTestMerge pull request #1195 from akarnokd/SwingSchedulerNegativeFix

SwingScheduler: allow negative scheduleuse LinkedList to buffer the sequence’s items

LinkedList has guaranteed constant insertion time when appending to the end of the list, whereas ArrayList takes O(1) amortized, since a reallocation might be necessary to insert further items. Since no capacity was specified for the buffer, on Hotspot this would cause the array to reallocate after the first 10 insertions, on Android after the first insertion (since Android’s ArrayList uses a default capacity of zero.)

Since the buffer is copied to an ArrayList before emission, subscriber performance when working with the list should remain unaffected.

Refs #1141Merge branch 'master' into rxscala-more

Conflicts:
	language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scalaUpdate CompletenessTest.scala for new operatorsEliminate compiler warningsFix the initialization orderRevert createExampleBad and import scala.concurrent.duration.MILLISECONDSMerge pull request #1178 from zsxwing/issue1173

Fix issue #1173Exposing PublishSubject

All other subjects (Async, Behavior, Replay) have non-private companion objects.Merge branch 'master' into rxscala-more

Conflicts:
	language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scalaMerge pull request #1210 from zsxwing/rxscala-more

Add more operators to RxScalaMerge pull request #1216 from hmrm/patch-1

Exposing PublishSubjectMerge pull request #1208 from mttkay/tolist-uses-linked-list-buffer

OperatorToObservableList: use LinkedList to buffer the sequence’s itemsMerge pull request #1185 from akarnokd/BehaviorSubjectTimeGapFix2

Behavior subject time gap fix 2Merge branch 'master' into replay-multicast

Conflicts:
	language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala
	language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala
	language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scalaJavadoc: Inner -> Worker

https://github.com/Netflix/RxJava/issues/808Re-enable testStaggeredCompletion

See https://github.com/Netflix/RxJava/issues/1011ReplaySubject enhancement with time and/or size boundsImplement shorter toBlocking as shorter alias for toBlockingObservable.

Fixes #1220Fix the bug that using mutable function in 'zipWithIndex'make 'zip(that, selector)' public and rename to 'zipWith'Merge pull request #1226 from zsxwing/zip

Fix bug in `zipWithIndex` and set `zip(that, selector)` public in RxScalaMerge pull request #1224 from daschl/toblocking

Implement shorter toBlocking as shorter alias for toBlockingObservable.Merge pull request #1223 from akarnokd/BoundedReplaySubject520

ReplaySubject enhancement with time and/or size boundsMerge pull request #1160 from zsxwing/replay-multicast

Add `replay` and `multicast` variants to RxScalaGit Reformats This FileMerge pull request #1228 from benjchristensen/fix-formatting

Git Reformats This FileRemove Ambiguous Subscribe Overloads with Scheduler

- Fixes https://github.com/Netflix/RxJava/issues/1116
- These should never have been added, the subscribeOn operator already provides this functionalityMerge pull request #1229 from benjchristensen/1116-ambiguous-overloads

Remove Ambiguous Subscribe Overloads with SchedulerOperator Alias: ShareMerge pull request #1231 from benjchristensen/682-share

Operator Alias: ShareLimit alias to Take

- as per Java 8 Stream naming conventions in discussion https://github.com/Netflix/RxJava/issues/678ForEach aliases to Subscribe to match Java 8 Convention

As per discussion at https://github.com/Netflix/RxJava/issues/678

Code like this is now supported:

```java
Observable.from(1, 2, 3).forEach(System.out::println);
Observable.from(1, 2, 3).toBlocking().forEach(System.out::println);
```Merge pull request #1232 from benjchristensen/678-Java8-names

Adopt Limit and ForEach Java 8 Naming ConventionsDeprecate toBlockingObservable in favor of toBlocking

As per discussion at https://github.com/Netflix/RxJava/pull/1224#issuecomment-43658284(#1230) javadocs for serialize()
also some improvements to javadocs for share()Merge pull request #1233 from benjchristensen/deprecate-toBlockingObservable

Deprecate toBlockingObservable in favor of toBlockingMerge branch 'master' of https://github.com/Netflix/RxJava into docsadding @since javadoc annotation to new methodsMerge branch 'master' of https://github.com/Netflix/RxJava into docsAdding another @since annotation to the toBlocking() javadocsImplement a cached thread scheduler using event loopsLock-free, MPSC-queue based, fast-path serializing Observer.Switch to AtomicReferenceFieldUpdater.Changed to field updaterUpdate docs for "apply" and add an exampleMerge pull request #1237 from akarnokd/SafeSubscriberMemory

SafeSubscriber memory reductionMerge pull request #1236 from akarnokd/CompositeSubscriptionMemory521

CompositeSubscription with atomic field updaterJMH Tests for Simple Use CasesRemove Subscription Wrapper from Observable.subscribe

Performance increase from 7.7m to 8.8m ops/second

Before:

Benchmark                              (size)   Mode   Samples         Mean   Mean error    Units
r.u.PerfTransforms.mapTransformation        1  thrpt         5  7714453.187   362218.633    ops/s
r.u.PerfTransforms.mapTransformation        1  thrpt         5  7527144.767   497816.471    ops/s

After:

Benchmark                              (size)   Mode   Samples         Mean   Mean error    Units
r.u.PerfTransforms.mapTransformation        1  thrpt         5  8853534.333   183494.242    ops/s
r.u.PerfTransforms.mapTransformation        1  thrpt         5  8806958.403   452595.219    ops/sMerge pull request #1243 from benjchristensen/perf

Remove Subscription Wrapper from Observable.subscribeObservable.from(T) using Observable.just(T)

For code like `Observable.from(1)` Improve performance from ~3.9m to 4.5+m ops/second

Before;

```
r.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  3923845.687    46657.660    ops/s
r.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5     8924.953     1983.161    ops/s

r.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  3623228.857   490894.492    ops/s
r.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5     9176.330      923.929    ops/s
```

After:

```
Benchmark                                       (size)   Mode   Samples         Mean   Mean error    Units
r.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  4052364.587   100971.234    ops/s
r.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5    11682.783      496.656    ops/s

Benchmark                                       (size)   Mode   Samples         Mean   Mean error    Units
r.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  4700583.987    77742.037    ops/s
r.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5    12588.803       58.935    ops/s
```

Using this test:

```
../gradlew benchmarks '-Pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 5 -prof GC .*PerfTransforms.flatMapTransformsUsingFrom*'
```Merge pull request #1244 from benjchristensen/from-just

Observable.from(T) using Observable.just(T)Update README.md to new constructorsMoved to atomic field updaters.Add zip(iterable, selector) to RxScala; resolve the issue of zipWithIndex; update CompletenessTest.scalaFixed testConcurrentOnNextFailsValidationMerge pull request #1239 from zsxwing/apply-scaladoc-example

Update docs for "apply" and add an exampleMerge pull request #1248 from akarnokd/SchedulerTestConcurrentFix

Fixed testConcurrentOnNextFailsValidationRename to 'zipWith';  add 'zip(iterable)'; add examplesZipIterable unsubscription fix.Changed lazySet to regular volatile write to avoid potential visibility issues.Make the chunk_test.clj work again for nowFix the bug that BlockingObservable.singleOrDefault doesn't call unsubscribeMerge pull request #1246 from akarnokd/AtomicReferencesToFieldUpdaters

Moved to atomic field updaters.Merge pull request #1254 from akarnokd/ZipWithIterableFix

Merge pull request #1254Merge pull request #1247 from zsxwing/zip-iterable

Merge pull request #1247Merge pull request #1260 from zsxwing/bo-singleOrDefault-bug

Merge pull request #1260ObserveOn scheduled unsubscriptionAdd publishLast to RxScalaAdd unsafeSubscribe to RxScalaAdd unsubscribeOn to RxScalaAdd share to RxScalaAdd parallelMerge to RxScalaAdd debounce variant to RxScalaAdd toBlocking to RxScala and deprecate toBlockingObservableAdd timer variants to RxScalaAdd amb variant to RxScalaUpdate CompletenessTest.scalaAdd singleOption, singleOrElse, headOption, lastOption, lastOrElse to RxScalaChange 'window(closings: () => Observable[Any])' to 'window(boundary: => Observable[Any])'Remove some javadoc errors; make others more pronounced ;-) (#1266)Javadoc changes: 1) standardize opening sentences of function descriptions into the 3rd person descriptive; 2) add spurious @warn tag to throw compiler warnings indicating javadoc work TBD; 3) standardize on line-width; 4) document a few under-documented bitsFix "window"; change "amb" parameter to varargs; add examplesFix the bug that int overflow can bypass the range checkOperator Retry with predicateExecutorScheduler to wrap an ExecutorAdd "buffer(=> Observable[Any])" to replace "buffer(() => Observable[Any])" and "buffer(Observable[Any])""; Remove the cast for "window(=> Observable[Any])"Merge branch 'master' into cachedthreadscheduler2Merge pull request #1269 from zsxwing/range-overflow

Fix the bug that int overflow can bypass the range checkSwitch to use NewThreadScheduler.RxThreadFactoryMerge pull request #1272 from akarnokd/ExecutorScheduler

ExecutorScheduler to wrap an ExecutorSwitch to AtomicIntegerFieldUpdater and volatile int, instead of AtomicBooleanFix Encoding/Formatting

The encoding on these files is not liked by Git and it is forcing them to be updated.Merge pull request #1275 from benjchristensen/fix-formatting

Fix Encoding/FormattingJavadoc overhaul: 1) standardize formatting, phrasing, terminology; 2) fill in gaps where javadocs (or parts of them) were missing; 3) add spurious @warn tags to cause build warnings for as-yet-unfilled gapsBetter name for worker class running scheduled actionsMerge branch 'master' of https://github.com/Netflix/RxJava into docs
+ add a couple of javadoc improvements to merged changesMerge pull request #1264 from akarnokd/ObserveOnScheduleUnsubscribe

ObserveOn scheduled unsubscriptionDeclare Scheduler classes in CachedThreadScheduler as finalRemoved the Func1 retry variant.Merge pull request #1271 from akarnokd/OperatorRetryWithPredicate

Operator Retry with predicateFilling in more gaps in the javadocs.Merge branch 'master' of https://github.com/Netflix/RxJava into docs
+ improve retry(Func2) javadocsMerge pull request #1265 from zsxwing/rxscala-more

Add more operators to RxScalacorrection to RxJavaPlugins's getDefaultSchedulers() return type as reported in javadocsadd caveat about avoiding memory leaks when using GroupedObservablesReduce Subscription Object Allocation

- significant reduction in object allocations
- details on research available at https://github.com/Netflix/RxJava/issues/1204Merge pull request #1281 from benjchristensen/composite-subscription-performance

Reduce Subscription Object AllocationMerge branch 'SerializedObserverPerf521' of github.com:akarnokd/RxJava into util-with-mpscRevert SerializedObserver Changes

Not ready to merge these.Move MPSC Queue to rx.internal.utilMerge pull request #1284 from benjchristensen/util-with-mpsc

Manual merge of Lock-free, MPSC-queue basedVersion 0.18.4Rename classes starting with Operator that are actually OnSubscribe implementations to start with OnSubscribeMerge branch 'master' of https://github.com/Netflix/RxJava into operator-to-onsubscribefix GroupBy and GroupByUntil which are actually OperatorsRemoval of ConcurrentHashMap from ReplaySubject and some NotificationLite cleanup.Remove duplicate NotificationLite.Ensure StringObservable.from() does not perform read when already unsubscribed because read could blockadding javadocs to ChainedSubscription methodsMerge branch 'master' of https://github.com/Netflix/RxJava into docsMerge pull request #1288 from davidmoten/string-from-bytes

Ensure StringObservable.from() does not perform unnecessary readMerge pull request #1286 from davidmoten/operator-to-onsubscribe

Rename some Operator* classes to OnSubscribe* as per #1270Merge pull request #1276 from jbripley/cachedthreadscheduler2

Re-submission of CachedThreadSchedulerMerge pull request #1287 from akarnokd/SubjectObserverPerf

ReplaySubject remove replayState CHM and related SubjectObserver changesSchedulers.from(Executor)

As per decision at https://github.com/Netflix/RxJava/issues/1219#issuecomment-44454729Merge pull request #1289 from benjchristensen/schedulers-from-executor

Schedulers.from(Executor)Upgrade to JMH 0.7.3Merge pull request #1290 from benjchristensen/jmh-upgrade

Upgrade to JMH 0.7.32 new tests for OnSubscribeToObservableFuture

1) Creating an Observable from an already-cancelled Future should emit nothing (equivalent to Observable.never())
   (it currently emits onError(CancellationException)
2) Creating an Observable from a Future then unsubscribeing immediately before Future.get()
   unblocks should be an Observable.never().  This test already passes.Modify OnSubscribeToObservableFuture to return early if unsubscribe without emitting anythingutility function for creating observables for closeable resourcesswitch from AutoCloseable to Closeable for java 6.
UnsafeFunc0 now extends Callable.add annotations about default schedulers to javadocs for Observable operatorsFix and Update JMH Perf Tests

- The tests were wrong and re-using a single Subscriber instance which meant they weren't really testing much.
- Same with the CountDownLatch which meant they weren't waiting if async.
- Added several SerializePerf and PerfTransform testsMerge pull request #1293 from benjchristensen/perf-tests

Fix and Update JMH Perf TestsMerge pull request #1291 from mattrjacobs/check-unsubscribe-within-observable-from-future

Check unsubscribe within observable from futurerx.operators -> rx.internal.operatorsMerge pull request #1294 from benjchristensen/rx-internal-operators

rx.operators -> rx.internal.operatorshard-code image heights in javadocs to make page loading cleaner, especially with links to anchors deep in the javadocChange `void accept` to `boolean accept`

As per a change @akarnokd did elsewhere with `accept2` method.Merge pull request #1295 from benjchristensen/notification-lite

Change `void accept` to `boolean accept`Move RxThreadFactory out from NewThreadSchedulerMove NewThreadWorker out from NewThreadScheduler

- Break out ScheduledAction from NewThreadWorkerMerge pull request #1296 from jbripley/schedulers-internal

Move re-used internal Scheduler classes to their own packageRemove Bad Perf Test

- this just stresses scheduling and at this throughput creates massive garbage and tests the wrong thingMerge pull request #1298 from benjchristensen/perf-transform

Remove Bad Perf TestIntroduced 'rxjava-scalaz' project.  This project provides some type class instances for Observable.

* Monoid: Observable obviously forms a monoid in terms of concatenation.
* Functor, Applicative, Monad, MonadPlus: Observable can be a Stream-like Monad and can be MonadPlus as well as Monoid.
* Traverse, Foldable: Observable can be Stream-like traversable. __NOTE: The operations for the instance is blocking calls.__
* etc.

About Testing, property based tests are applied by Scalaz's ScalaCheck binding.

For QuickStart, please refer to rx.java.scala.scalaz.examples.RxScalazDemo.Add convenience method for adding unsubscription callbackreplaced getOne method which is based on promise with toBlocking.firstrename variable childObserver to child (is now a Subscriber) and rename gps to group (is not plural)Merge pull request #1301 from jbripley/subscription-block-expression

RxScala: Add convenience method for adding unsubscription callbackAdd flatMap variants to RxScalaAdd concatMap to RxScalaMerge pull request #1304 from zsxwing/flatMap

Add flatMap and concatMap to RxScalaMerge pull request #1302 from davidmoten/groupBy-naming

improve variable names in OperatorGroupBy0.19.0-SNAPSHOTeverything defaults to 1.6Hooked RxJavaPlugins errorHandler up within all operators that swallow onErrors.
* Otherwise, the only onErrors visible to plugin are the ones which propagate all the way to SafeSubscriber.testNotificationDelay - Attempt at determinismMerge pull request #1307 from benjchristensen/make-notificationDelay-deterministic

testNotificationDelay - Attempt at determinismRemove call to RxJavaPlugins ErrorHander in mergeDelayError operator - CompositeException is already visibleMerge pull request #1306 from mattrjacobs/add-error-handler-to-error-swallowing-operators

Hooked RxJavaPlugins errorHandler up within all operators that swallow onErrorsHide ChainedSubscriptionMerge pull request #1309 from benjchristensen/subscriber-subscription

Hide ChainedSubscription/SubscriptionList from Public API[Gradle Release Plugin] - pre tag commit:  '0.19.0'.[Gradle Release Plugin] - new version commit:  '0.19.1-SNAPSHOT'.0.19.0Attempt to fix one integration test classAdd onErrorFlatMap to RxScalaAdd nest to RxScalaAdd flatten variant to RxScalaAdd switchMap to RxScalaAdd retry variant to RxScalaAdd error variant to RxScalaAdd foreach to RxScalaAdd combineLatest variant to RxScalaAdd orElse to RxScalaUpdate CompletenessTest.scalaAdd groupByUntil variant to RxScalaAdd groupJoin to RxScalaAdd pivot to RxScalaAdd longCount to RxScalaAdd toMultimap to RxScalaEnsuring Runnables posted with delay to a Handler are removed when unsubscribed.

This patch ensures the delayed runnables posted to a Handler are properly
removed when Subscription.unsubscribe() is called on the Observable.

The original code returns the subscription from schedule() but is not used
by the callers who instead add the Worker itself as a subsciption.

Signed-off-by: David Marques <dpsmarques@gmail.com>Merge pull request #1311 from craigmingtaozhang/master

Tiny integration test changeTrampolineScheduler & Unsubscribe

Unsubscribing should prevent new additions to a Worker, but not prevent already scheduled work, and definitely not affect other Workers using the same thread (by modifying the ThreadLocal as it was doing).

See the unit test for details of how unsubscribing 1 Worker could prevent work from being done on a completely separate Worker.Merge pull request #1324 from benjchristensen/trampoline-schedule-unsubscribe

TrampolineScheduler & UnsubscribeUsing a ScheduledAction in order to ensure correct subscription behaviour.

Signed-off-by: David Marques <dpsmarques@gmail.com>Javadoc changes:
* flesh out and update @throws sections
* add @warn nags to missing javadocs
* standardize formatting
* fix dead links to imagesUpdate pivotExampleRewrite toMultimapReplace unnecessary with detailsJoin patterns extension for 4..9 and N arity joins.CRLF fixAdding ScheduledSubscription to parent in order to properly chain unsubscribe.

Signed-off-by: David Marques <dpsmarques@gmail.com>Change the return type, and add testsFilling in javadoc gaps where I feel confident enough to do so...comments, docs and names improvementIOSSchedulers for RoboVMUsing the correct code style for variable name and removing unused imports.

Signed-off-by: David Marques <dpsmarques@gmail.com>Bump build tools to 19.1 and android plugin to 0.11

This is to make the project compatible with Studio 0.6.xRxScala: Add *Option and *OrElse to BlockingObservableRxScala: Add latest to BlockingObservableRxScala: Add toFuture to BlockingObservableRxScala: Add examples for BlockingObservableFuture wil receive NoSuchElementException when the BlockingObservable is emptyAdd subscribeExample to explain subscribe and foreach are sameUpdate '***OrElse' to use Option.getOrElseMerge pull request #1316 from zsxwing/rxscala-more

Add the rest operators to RxScalaRxScala: Simplify doOnCompleted/Terminate, finallyDo callback usageAllow use of the returned subscription to cancel periodic scheduling

The documentation for schedulePeriodically indicates that the returned
subscription can be used to unsubscribe from the periodic action, or to
unschedule it if it has not been scheduled yet. That was the case only
before the first action took place, and it was then impossible to
unsubscribe using the given subscription, although unsubscribing the
worker did work.Baseline Performance Tests

Start of suite of general performance tests for comparing overall changes.Merge pull request #1350 from benjchristensen/perf-tests

Baseline Performance TestsAs per suggestions:
Added single static instance of ExecutorService for delayed posting
Introduced ScheduledIOSAction to enable CompositeSubscriptionDon't add the subscriber to the manager if it unsubscribed during the onStart callMerge branch 'master' into rxscala-bo

Conflicts:
	language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scalaImprove docs of 'toFuture'Merge pull request #1355 from akarnokd/ReplaySubjectDontAddUnsubscribedChild

Don't add the subscriber to the manager if it unsubscribed during the on...Merge pull request #1347 from samueltardieu/unsubscribe-from-periodic

Allow use of the returned subscription to cancel periodic schedulingMerge pull request #1321 from dpsm/master

Ensuring Runnables posted with delay to a Handler are removed when unsub...Merge pull request #1327 from akarnokd/MoreJoinPatterns

Join patterns extension for 4..9 and N arity joins.Merge pull request #1335 from mttkay/android-gradle-0.11

Bump build tools to 19.1 and android plugin to 0.11Merge pull request #1337 from zsxwing/fix-toFuture

Make Future receive NoSuchElementException when the BlockingObservable is emptyMerge pull request #1345 from jbripley/doblock-simplify

RxScala: Simplify doOnCompleted/Terminate, finallyDo callback usageMergeWith, ConcatWith, AmbWith

Single-arity instance versions of merge, concat and amb.
Since we can't use the `merge`/`concat`/`amb` names on both static and instance methods, these have the `With` suffix, which actually reads quite well.

```java
o.mergeWith(o2).subscribe(ts);
o.concatWith(o2).subscribe(ts);
o.ambWith(o2).subscribe(ts);
```

If we feel the need for more arities fine, but I wanted to start simple.

This originated from discussions with @headinthebox and over a year of wanting instance methods for `merge`.Merge pull request #1357 from benjchristensen/mergeWith-and-friends

MergeWith, ConcatWith, AmbWith[Gradle Release Plugin] - pre tag commit:  '0.19.1'.[Gradle Release Plugin] - new version commit:  '0.19.2-SNAPSHOT'.Version 0.19.1add @since annotations to javadocs of new ...With() instance variants"wiki-" prefix no longer required for anchor names in github wiki pages
also: correct one parameter name in javadoc commentsFixed padding of the integer and node classes.Merge pull request #1359 from akarnokd/MpscLinkedQueuePadding

Fixed padding of the integer and node classes.Merge branch 'master' of https://github.com/Netflix/RxJava into docsFix a race condition if queued actions have been handled alreadyImplement 'create' in RxScalaRemove '/*XXX*/'Merge pull request #1362 from zsxwing/rxscala-create

RxScala: Fix #1340 and #1343Merge pull request #1336 from zsxwing/rxscala-bo

RxScala: Add the rest missing methods to BlockingObservableMerge pull request #1361 from samueltardieu/queued-actions

Fix a race condition if queued actions have been handled alreadyWork in progress: an HTML definition-list version of Paul Taylor's RxJS decision trees, for RxJava.now in spectacular Valid-HTML-o-Vision with previously unshown scenesseveral new operators; improved CSSFix the bug that 'flatMap' swallows OnErrorNotImplementedExceptionDebugHook got miswired beforeadding the rest of the operators, tidying up, adding some colorMerge pull request #1369 from mattrjacobs/fix-debug-hook

DebugHook got miswired beforeadding markdown version of operator decision treeFix head/tail false sharing issues.Javadoc changes to help fix #1322Merge pull request #1374 from nitsanw/master

Fix head/tail false sharing issuesMerge pull request #1367 from zsxwing/swallow-error

Fix the bug that 'flatMap' swallows OnErrorNotImplementedExceptionAdd idiomatic toXXX methods to RxScalaAvoid the cast in toSet and toBufferMerge pull request #1375 from zsxwing/rxscala-toXXX

RxScala: Add idiomatic toXXX methodsMore work on #1322 (missing javadocs)Merge branch 'master' of https://github.com/Netflix/RxJava into docsRevision of JMH Tests

- removal of all non-JMH perf testsMerge pull request #1376 from benjchristensen/jmh

Revision of JMH TestsUpdate README.txtDisable flatMapTwoNestedAsync for now

it runs out of memory in JMH1000000 is too much

... for these tests.Enable FlightRecorder for JMH TestsBugFix: Pivot ConcurrencyParallel Operator Rewrite

A rewrite of the `parallel` operator that is more efficient by not using `groupBy` and ready to support backpressure.Merge pull request #1378 from benjchristensen/pivot

BugFix: Pivot ConcurrencyMerge pull request #1379 from benjchristensen/parallel

Parallel Operator RewriteTakeUntil & NotificationLite

A rewrite of TakeUntil that doesn't leak NotificationLite.COMPLETE outside of itself. It causes problems to leak the sentinels as other operators also using NotificationLite get confused.Remove unnecessary codeOnSubscribe: DelaySubscribe -> UnsafeSubscribe

This could cause an unwanted unsubscribe to be propagate because of the `SafeSubscriber`FormattingTestSubscriber.assertNoErrorsTrampolineScheduler Cleanup

Remove the null check and lazy creation, build the queue in the ThreadLocal. Fix bugs about "work in progress".Merge pull request #1380 from benjchristensen/fixes

Variety of FixesAdding missing javadocs to TestSubscriber (#1322)Adding missing javadocs to TestSubject (#1322)Adding missing javadocs to Exceptions/OnErrorThrowable (#1322)Merge pull request #1332 from ashleyj/master

IOSSchedulers for RoboVMMerge pull request #1297 from everpeace/rxjava-scalaz

[RxScala] rxjava-scalaz: providing some type class instances.Upgrade to JMH 0.9Merge pull request #1387 from benjchristensen/jmh-0.9

Upgrade to JMH 0.9Cross-reference observeOn and subscribeOn from each others' javadocsCompositeException does not mutate nested exceptions by attaching stacks, but instead
aggregates them at print-time.

Since nothing is being mutated, there's no chance of accidentally creating a cycle in the Exception chain.Removed unused importFixed up SafeObserverTest w.r.t. CompositeException changesMerge pull request #1388 from mattrjacobs/eliminate-circular-exception-creation

CompositeException stops mutating nested Exceptionsrxjava-scalaz

commenting out rxjava-scalaz until I can figure out what's wrong with the Netflix building system that prevents it from finding the following jar:

```
Artifact 'org.scalaz:scalaz-core_2.10:7.0.4@jar' not found.
```[Gradle Release Plugin] - pre tag commit:  '0.19.2'.[Gradle Release Plugin] - new version commit:  '0.19.3-SNAPSHOT'.Version 0.19.2Better naming, and new test

... using to compare 0.19 and 0.20 so want in both.Add cache(int capacity) to ObservableFix the compiler warningsAdding the hooks unsafeSubscribe by making the execution same as safe version without the safety checks.Merge pull request #1397 from abersnaze/add-hooks-to-unsafeSubscribe

Adding the hooks unsafeSubscribeMerge pull request #1396 from zsxwing/rxscala-fix-warning

RxScala: Fix the compiler warningsUpdate Perf Tests

matching with work being done for 0.20 to allow comparisonsMerge pull request #1399 from benjchristensen/perf-tests-0702

Update Perf TestsInternal Data Structures

Various data structures to allow performance improvements.
I am committing these separately from the code that uses it to keep the pull requests simpler.
Nothing in RxJava depends on these classes in this commit.Merge pull request #1400 from benjchristensen/internal-data-structures

Internal Data StructuresCreated test cases that show inconsistent error handling with OnNextValue and toStringFixed OnNextValue to not call toString on the failing valueUse currying to improve type inferenceRename to sliding and tumblingAdded a renderValue function to create a string from unknown client objects without calling toString (PR #1401)Add links to Graham Lea's useful overview of observeOn/subscribeOnKotlin M8Merge pull request #1406 from MarioAriasC/master

Kotlin M8Avoiding OperatorObserveOn from calling subscriber.onNext(..) after unsubscribe().

The OperatorObserveOn operator uses a scheduler to cancel subscriptions as well
as to deliver the objects passing through it's onNext(..) in the right context.

Calling unsubscribe will schedule the actual unsubscription while not making sure
that the child subscriber will no longer receive calls to onNext(..) after
unsubscribe() returns.

This fix makes sure that after unsubscribe() returns no more onNext(..) calls will be
made on the child subscribers.

Signed-off-by: David Marques <dpsmarques@gmail.com>Merge pull request #1409 from dpsm/master

Avoiding OperatorObserveOn from calling subscriber.onNext(..) after unsu...Merge pull request #1401 from samhendley/onnextvalue

OnError while emitting onNext value: object.toString0.19.4-SNAPSHOT

Manually incrementing as the upload to Maven Central for 0.19.3 failed part way through and can't be redone.[Gradle Release Plugin] - pre tag commit:  '0.19.4'.[Gradle Release Plugin] - new version commit:  '0.19.5-SNAPSHOT'.Version 0.19.4Backpressure & 0.20.0-RC1Merge pull request #1412 from benjchristensen/backpressure-9

Backpressure & 0.20.0-RC1Set scalatest as testCompile dependency

Gradle now generates correct eclipse dependenciesRemove provided configuration for test dependenciesFix Merge Bug

If the queue being drained did not complete due to the backpressure request being fulfilled, it could onComplete before draining the queue and miss values.Clarity about batching requestTest timing

Adjust timing for slower machines (such as CloudBees)Merge pull request #1414 from benjchristensen/merge-fixes

Merge FixesMerge pull request #1398 from zsxwing/rxscala-currying

RxScala: Use currying to improve type inferenceMerge pull request #1282 from abersnaze/closeable

utility function for creating observables for closeable resourcesUse Subscriber.onStart as idiomatic backpressure start pointflatMapAsync test was non-deterministicIgnoring non-deterministic test

... until someone can figure it out.

This code is far less important now since it is no longer used by merge.Merge pull request #1417 from benjchristensen/onStart

Proposal: Subscriber.onStartVersion 0.19.6'rxjava-contrib:rxjava-scalaz'Remove build provided references (except for rxjava-android)Remove build provided references and separate JUnit testsRange concurrency & off-by-one bugfixMerge pull request #1421 from akarnokd/RangeBackpressureFix

Range backpressure concurrency & off-by-one bugfixMerge pull request #1394 from gliptak/scalabindings

Gradle Builds: Change provided to testCompileConcurrency Fixes for RxRingBuffer & MergeMerge pull request #1422 from benjchristensen/issue-1420

Concurrency Fixes for RxRingBuffer & MergeChanged producer interface to work with long instead of intMerge pull request #1423 from stealthcode/ProducerIntToLong

Changed producer interface to work with long instead of intPublish signature

Less variance, more type inferenceRemoved unnecessary varianceRevert "CompositeException does not mutate nested exceptions by attaching stacks, but instead"

This reverts commit f4ae92aa624923e9a632fb677730a2d6e04595e5.Forgot to undoRemoved deprecated OnSubscribeFuncRemove cycles in CompositeExceptionUndo commentsCopied from masterMerge pull request #1433 from Applied-Duality/async

Take 3Move cast to parent functionRemove castRemove unused imports/localsAdd genericsAdd genericsCorrect static access warningsAdding alt attributes to img tags in javadocs to avoid occasional build issuesminor javadoc improvementsFix Merge Bug

Working on https://github.com/Netflix/RxJava/issues/1420Merge pull request #1442 from benjchristensen/merge-bug

Merge BugInfinite request with Long.MAX_VALUE instead of -1

Migrating to this after discussions at https://github.com/reactive-streams/reactive-streams/issues/62Merge pull request #1443 from benjchristensen/request-long-max-value

Infinite request with Long.MAX_VALUE instead of -1[Gradle Release Plugin] - pre tag commit:  '0.20.0-RC1'.[Gradle Release Plugin] - new version commit:  '0.20.0-RC2-SNAPSHOT'.Version 0.20.0-RC1first pass at javadocs for new backpressure stuffZip with Backpressure Support

This supports both upstream and downstream backpressure.RxScala: Add Scala idiomatic methodsMerge pull request #1448 from zsxwing/rxscala-more

RxScala: Add Scala idiomatic methodsNew test case for takeWhile that currently failsFix issue #1451Fix related classes for issue #1451OperatorAll & Backpressure

Similar to filter, it needs to request(1) each time it filters an onNext.Debugging TestMerge pull request #1446 from benjchristensen/zip-backpressure

Zip with Backpressure SupportMerge pull request #1454 from zsxwing/issue1451

Fix issue #1451Merge pull request #1453 from spodila/takeWhileFailure

New test case for takeWhile that currently failsRemoving onSetProducer from the APIMergeDelayError & OnErrorFlatMap w/ MergeMerge pull request #1457 from benjchristensen/mergeDelayError-backpressure

MergeDelayError & OnErrorFlatMap w/ MergeRemove test ... leave functional testing in core

The behavior of mergeDelayError has slightly changed.

It doesn't eagerly unsubscribe if the source keeps emitting after onError.Removing unnecessary testRemoving unnecessary testRemove Pivot Operator

as per https://github.com/Netflix/RxJava/issues/1402Merge pull request #1458 from benjchristensen/remove-pivot

Remove Pivot OperatorMerge branch 'remove-onsetproducer' of github.com:abersnaze/RxJava into remove-onSetProducerSupport OnSetProducer/Request ChangesMerge pull request #1459 from benjchristensen/remove-onSetProducer

Remove Subscriber.onSetProducerMerge Perf Fix: Re-enable fast-pathMerge pull request #1462 from benjchristensen/merge-perf-fix

Merge Perf Fix: Re-enable fast-pathMerge Bug: Missing Emissions

Notes and temporary fixMerge pull request #1463 from benjchristensen/merge-1420

Merge Bug: Missing Emissions[Gradle Release Plugin] - pre tag commit:  '0.20.0-RC2'.[Gradle Release Plugin] - new version commit:  '0.20.0-RC3-SNAPSHOT'.Version 0.20.0-RC2Update CHANGES.mdMerge pull request #1436 from gliptak/genericswarnings

Correct warningsMerge pull request #1431 from tomrozb/composite-exception

CompositeException fix for AndroidMerge pull request #1393 from gliptak/cachehint

Add cache(int capacity) to ObservableAdd perf tests for cache(1) variantJavadocs for cache operatorMerge pull request #1467 from benjchristensen/cache-docs

Javadocs for cache operatorUpdate CompletenessTest.scalaremove javadoc warnings from cache(); add @since annotation to cache(b)Increasing timeout

Using low timeout values causes non-determinism in some build environments.javadocs: add missing @see links; correct broken link URLs; standardize formatting/capitalization/punctuationToList operator needs to ignore backpressureUpdate CONTRIBUTING.md

updating the date.Merge pull request #1469 from mattrjacobs/fix-tolist-backpressure

ToList operator needs to ignore backpressureAdd test of backpressure to OperatorAllOperatorAny needs to handle backpressureMerge pull request #1472 from mattrjacobs/add-unit-test-to-operator-all

Add test of backpressure to OperatorAllMerge pull request #1473 from mattrjacobs/handle-backpressure-in-any-operator

OperatorAny needs to handle backpressureIgnore backpressure for OperatorToObservableSortedListMerge pull request #1474 from mattrjacobs/ignore-backpressure-operator-tosortedlist

Ignore backpressure for OperatorToObservableSortedListBackpressure Fixes and Docs

Docs for operators that don't support backpressure, particularly all the temporal operators.

Fixes for several that needed to request(1) or request(Long.MAX_VALUE).Merge pull request #1489 from benjchristensen/terminal-operator-backpressure

Backpressure Fixes and Docsnon-deterministic timeouts on slow machinesMerge pull request #1490 from benjchristensen/unit-tests

non-deterministic timeouts on slow machinesConcat Outer Backpressure

Fixed https://github.com/Netflix/RxJava/issues/1481Merge pull request #1491 from benjchristensen/concat-backpressure-outer

Concat Outer BackpressureTODO for removing this timeout

this code is just for finding bugs during the 0.20-RCsUpgrade to Quasar 0.6.0retryWhen/repeatWhenAdd retryWhen example to JavadocMerge pull request #1493 from benjchristensen/retry_repeat-when

Manual merge of retryWhen/repeatWhenzipWithMerge pull request #1494 from benjchristensen/zip-with

zipWithadding @since annotations, a few other touch-ups to javadocs of new operatorsusing a <dl> will make the "Scheduler" and "Backpressure Support" sections fit into the javadoc format more effectivelyUpdate JCTools CodeReverting use of JCTools Until Problem Is SolvedMerge pull request #1496 from benjchristensen/ring-buffer

Change RxRingBuffer Queue UsageMerge pull request #1495 from puniverse/master

Upgrade to Quasar 0.6.0spsc ring buffer concurrency testMerge pull request #1497 from benjchristensen/ring-buffer

spsc ring buffer concurrency testnon-deterministic testUserSubscriberUsingRequestAsync

fix non-deterministic failures of BackpressureTests.testUserSubscriberUsingRequestAsync

I was able to replicate the occasional failure by putting it in a tight loop. With these changes it no longer fails.Merge pull request #1498 from benjchristensen/testUserSubscriberUsingRequestAsync

non-deterministic testUserSubscriberUsingRequestAsyncretrytest.iterativeBackoff

Unable to replicate failure of this test ... but adding assertNoErrors so we can see an exception if it happens again.Merge pull request #1499 from benjchristensen/retryTest-iterativeBackoff

retrytest.iterativeBackoffblocking synchronous next

Fixes https://github.com/Netflix/RxJava/issues/624Eliminate duplication of List in toList

Fixes https://github.com/Netflix/RxJava/issues/1218Fix typo

as per https://github.com/Netflix/RxJava/issues/1266Restore use of messagePrefix

as per https://github.com/Netflix/RxJava/issues/1266messagePrefix null checkMerge pull request #1504 from benjchristensen/issue-1218

Eliminate duplication of List in toListMerge pull request #1501 from benjchristensen/blocking-next

blocking synchronous nextBufferWithSize with Backpressure Supportremoving unicode ligature that breaks buildRevert to copying list in toList

It is a breaking change to existing code to make it immutable, so reverting back to copying.Merge pull request #1513 from benjchristensen/to-list-copy

Revert to copying list in toListSupport Subject Factory with MulticastTemporarily skipping rxjava-quasar

Can't get ASM 5.0.3 to work in build so skipping rxjava-quasar until that is solved.[Gradle Release Plugin] - pre tag commit:  '0.20.0-RC3'.[Gradle Release Plugin] - new version commit:  '0.20.0-RC4-SNAPSHOT'.Restore rxjava-quasarVersion 0.20.0-RC3Version 0.20.0-RC3Fix typos in javadoc comments.Remove unused param commentsMerge pull request #1519 from benjchristensen/jruby-docs

Remove unused param commentsFix non-deterministic testMerge pull request #1520 from benjchristensen/issue-1429

Fix non-deterministic testFix toIterator Exception HandlingMerge pull request #1521 from benjchristensen/issue-1450

Fix toIterator Exception HandlingMerge pull request #1518 from SeanPONeil/typo_fixes

Fix typos in javadoc comments.Bump to Robolectric 2.3, make samples build under Studio 0.8.+

refs https://github.com/Netflix/RxJava/pull/1449Fix issue #1522Merge pull request #1515 from benjchristensen/multicast-factory

Support Subject Factory with MulticastMerge pull request #1468 from zsxwing/rxscala-completeness

RxScala: Update CompletenessTest.scalaRestore use of SpmcArrayQueue in RxRingBuffer

- Modification of SpmcArrayQueue with fix from https://github.com/JCTools/JCTools/issues/21
- Restore RxRingBuffer to use SpmcArrayQueue
- this reduces object allocation significantly (see pull request for screenshots)Merge pull request #1526 from benjchristensen/ring-buffer-queue

Restore use of SpmcArrayQueue in RxRingBufferFailing unit test for reduce, showing it does not implement backpressure correctlyAdded another unit test to OperatorReduce/backpressureAdd operators to create Observables from BroadcastReceiver

it allows to listen global and local (with support LocalBroadcastManager) broadcastsremove main thread unsubscribe, fix LocalBroadcastOperatorTestfix sticky intent duplication, add tests for OperatorBroadcastOptimize the fix for takeLast and handle the race conditionFix the unbounded check for mergeMake "single" support backpressure

Signed-off-by: zsxwing <zsxwing@gmail.com>Merge pull request #1530 from zsxwing/issue-merge

Fix the unbounded check for mergeMerge pull request #1523 from zsxwing/issue-1522

Fix issue #1522Merge pull request #1528 from Yarikx/android-broadcasts-rebased

Add operators to create Observables from BroadcastReceiver (rebased)Merge pull request #1527 from mattrjacobs/reduce-fails-on-backpressure

Failing unit test for reduce, showing it does not implement backpressure correctlyConcat Backpressure

Route backpressure through the inner subscribers.
Fixes https://github.com/Netflix/RxJava/issues/1480Amb with backpressure supportPropagate request(n) to each AmbSubscriber

... and then keep propagating to the winner.Merge pull request #1533 from benjchristensen/issue-1516

Amb + BackpressureMerge pull request #1534 from benjchristensen/concat-backpressure

Concat Backpressure`scheduleRec` for recursive scheduling (Scala)Handle overflow[Gradle Release Plugin] - pre tag commit:  '0.20.0-RC4'.[Gradle Release Plugin] - new version commit:  '0.20.0-RC5-SNAPSHOT'.Version 0.20.0-RC4add "@since 0.20" annotation to new multicast() variantMake Android ViewObservable.input observe TextView instead of StringAdding backpressure to OnSubscribeRedoFixing a bug and a potential for other concurrency issues.Bring back ViewObservable.input(EditText, boolean) and rename new version to ViewObservable.textjavadocs: add @see links to wiki discussion of "Backpressure"; add marble diagrams for onBackpressureFoo() operatorsRxScala: Add retryWhen/repeatWhen methods

- Add example usage of retryWhen/repeatWhen to RxScalaDemoMerge pull request #1555 from jbripley/rxscala-retrywhen

RxScala: Add retryWhen/repeatWhen methodsMerge pull request #1552 from abersnaze/most-recent-null

Fixing a bug and a potential for other concurrency issues.SwitchOnNext with backpressure supportMerge branch 'master' of https://github.com/Netflix/RxJava into docsmergeMap generics

Fixes issue #1550Merge pull request #1558 from benjchristensen/issue-1550

mergeMap genericsMore consistent hooks for scheduler plugins.  This is a rework of #1514.
* Deprecated RxJavaDefaultSchedulers and RxJavaDefaultSchedulersDefault (I think these names are confusing)
* Added RxJavaSchedulersHook
** Ability to override entire schedulers from scratch
** Ability to decorate Action0 before submission to SchedulerflatMap overloads

- migrate mapPair to use actual merge instead of reimplementing it
- deprecate mergeMapMerge pull request #1560 from benjchristensen/flatMap-mergeMap

flatMap overloadsMerge pull request #1537 from GeorgiKhomeriki/master

recursive scheduling in RxScalajavadoc changes related to the mergeMap[Iterable] => flatMap[Iterable] changeoverRemove Variance on Defer

See https://github.com/Netflix/RxJava/issues/1157 for painful background.Merge pull request #1561 from benjchristensen/issue-1157-defer

Remove Variance on DeferTakeLastTimed with backpressure supportFix errors in Completeness.scala and also improve itAdd a blank line to fix the bullet points issueMerge pull request #1559 from mattrjacobs/scheduler-plugin

More consistent hooks for scheduler plugins.  This is a rework of #1514.Merge pull request #1548 from stealthcode/BPRedo

Adding backpressure to OnSubscribeRedoMerge pull request #1564 from zsxwing/rxscala-completeness

RxScala: Fix errors in Completeness.scala and also improve itMerge pull request #1562 from zsxwing/backpressure-takeLastTimed

TakeLastTimed with backpressure supportMerge pull request #1557 from zsxwing/backpressure-switch

SwitchOnNext with backpressure supportMerge pull request #1507 from zsxwing/backpressure-bufferWithSize

BufferWithSize with Backpressure SupportFixing Kotlin Defer

Broke this with https://github.com/Netflix/RxJava/pull/1561Merge pull request #1565 from benjchristensen/kotlin-defer

Fixing Kotlin DefergroupBy with element selector

Fixes https://github.com/Netflix/RxJava/issues/1554Merge pull request #1567 from benjchristensen/groupBy-selector

groupBy with element selectorCompose/Transformer

See https://github.com/Netflix/RxJava/issues/1416 for discussion that led to this.

This does not have co/contra-variance which needs to be figured out.Compose/Transform Covariance

Failing test while exploring generic variance for https://github.com/Netflix/RxJava/issues/1416Merge pull request #1568 from benjchristensen/compose-transformer

Compose/TransformerFix for mapcat, issue #1556

Corrected mapcat to actually concat its results rather than merging.
Added warning to docstring thta this might not be ideal.

Added flatmap to cover map+merge case.Merge pull request #1570 from daveray/rx-clj-fix-mapcat

Fix for mapcat, issue #1556javadoc enhancements for recent groupBy/compose/Transformer changesRemove Timeout in Blocking Iterator

This was a temporary timeout to track down bugs.Merge pull request #1572 from benjchristensen/remove-toBlocking-timeout

Remove Timeout in Blocking IteratorRemove Temporary Timeout in take

Fix it properly this time :-)Backpressure: parallel

Fixes https://github.com/Netflix/RxJava/issues/1485Merge pull request #1573 from benjchristensen/parallel-backpressure

Backpressure: paralleladditional javadoc enhancements for lift & composeUse single Executor for all tests

... so it doesn't leak for every test.[Gradle Release Plugin] - pre tag commit:  '0.20.0-RC5'.[Gradle Release Plugin] - new version commit:  '0.20.0-RC6-SNAPSHOT'.Version 0.20.0-RC5combineLatest with backpressure

Implementation updated to support reactive pull: https://github.com/Netflix/RxJava/issues/1476Merge pull request #1575 from benjchristensen/combineLatest-backpressure

combineLatest with backpressureblack magic applied.Merge pull request #1569 from benjchristensen/compose-transformer-variance

Compose/Transform CovarianceFix the compose covarianceFix the 'compose' unit testClarify OperatorTextViewInputTest methodsMerge pull request #1577 from zsxwing/compose-covariance

Fix the compose covariancefrom(T) -> just(T)

See https://github.com/Netflix/RxJava/issues/1563 for discussion.zip(Iterable) -> zipWith(Iterable)

As per https://github.com/Netflix/RxJava/issues/1578Merge pull request #1581 from benjchristensen/zip-zipWith

zip(Iterable) -> zipWith(Iterable)Deprecate GroupedObservable.from

It was a bad solution. Use Observable.groupBy with element selector instead

See https://github.com/Netflix/RxJava/issues/1579Merge pull request #1582 from benjchristensen/groupedObservable-from

Deprecate GroupedObservable.fromRedo/Repeat Backpressure

Fix backpressure and memory leaks

This now works:

    public static void main(String[] args) {
        Observable<Integer> o1 = Observable.from(1, 1).concatWith(Observable.just(-1).repeat());
        Observable<Integer> o2 = Observable.from(2, 2, 2, 2);
        Observable.zip(o1, o2, (a, b) -> a + b).forEach(System.out::println);
    }Merge pull request #1583 from benjchristensen/repeat-concat

Redo/Repeat Backpressurejavadoc enhancements for zip(iterable) => zipWith(iterable) switchoverMerge pull request #1576 from benjchristensen/from-items

from(T) -> just(T)Merge pull request #1545 from ronshapiro/master

Make Android ViewObservable.input observe TextView instead of String[Gradle Release Plugin] - pre tag commit:  '0.20.0-RC6'.[Gradle Release Plugin] - new version commit:  '0.20.0-RC7-SNAPSHOT'.Version 0.20.0-RC6javadoc enhancements for from(a,b,c...) to just(a,b,c...) switchoverRxScala: Observable.items(T*) -> Observable.just(T*)RxScala: Switch mapped RxJava methods to map to non-deprecated versions

- Mark onErrorFlatMap/from(Iterable, Scheduler) as deprecated, since the RxJava version will go awayMerge pull request #1587 from jbripley/rxscala-replace-deprecated

RxScala: Switch mapped RxJava methods to non-deprecated versionsMerge pull request #1586 from jbripley/rxscala-just

RxScala: Observable.items(T*) -> Observable.just(T*)Added doOnSubscribe() to ObservableDecouple Dispose Function for Using

As per discussion at https://github.com/Netflix/RxJava/issues/1466Merge pull request #1589 from g9yuayon/operatorOnUnsubscribed

Added doOnSubscribe() to Observableand... the inevitable javadoc enhancements (for the new doOnUnsubscribe method)...doOnSubscribeMerge pull request #1593 from benjchristensen/doOnSubscribe

doOnSubscribereactive.io: RxScala getting started examplesRxScala: Add mapping to RxJava doOnUnsubscribejavadoc enhancements for the new doOnSubscribe() methodreuse existing methodsRxScala: Add mapping to RxJava doOnSubscribe

- Fix doOnUnsubscribe JavaDoc to not use @code/@linkRxScala: JavaDoc fixes to not use code or linkRxScala: Change "multicast" to be consistent with RxJavaMake retryWhen the same with the Scheduler as the retryWhen without the Scheduler.removed the unnecessary ` extends Notification<?>` from repeatWhen too.Merge pull request #1602 from abersnaze/consistent-retrywhen

Make retryWhen the same with the Scheduler as the retryWhen without the SchedulerMerge pull request #1600 from jbripley/rxscala-javadocfixes

RxScala: JavaDoc fixes to not use code or linkMerge pull request #1598 from jbripley/rxscala-doonunsubscribe

RxScala: Add mapping to RxJava doOnUnsubscribeMerge pull request #1599 from davidmoten/reuse

reuse existing methodsMerge pull request #1597 from GeorgiKhomeriki/master

reactivex.io: RxScala getting started examplesRxScala: Update signatures of retryWhen/repeatWhen to match RxJavaMerge pull request #1605 from jbripley/rxscala-retrywhensignature

RxScala: Update signatures of retryWhen/repeatWhen to match RxJavaMerge pull request #1601 from zsxwing/rxscala-multicast

RxScala: Change "multicast" to be consistent with RxJavaadd missing window with time overload, the one that has control over every parameterRxScala: Add backpressure supportUpdate createExampleWithBackpressure to use subscribeOnMerge pull request #1608 from davidmoten/window-add-overload

Add missing window with time overloadMerge pull request #1609 from zsxwing/rxscala-backpressure

RxScala: Add backpressure supportDeprecate Multicast without FactoryDeprecate Old Using MethodMerge pull request #1592 from benjchristensen/using-1466

Decouple Dispose Function for UsingDeprecate Superfluous Methods with Scheduler Overload

These should just use subscribeOn if scheduling is wanted.Merge pull request #1611 from benjchristensen/superfluous-overloads

Deprecate Superfluous Methods with Scheduler OverloadMerge pull request #1610 from benjchristensen/multicast-without-factory

Deprecate Multicast without Factory0.20.0-SNAPSHOT[Gradle Release Plugin] - pre tag commit:  '0.20.0'.[Gradle Release Plugin] - new version commit:  '0.20.1-SNAPSHOT'.Migrate Non-Core Modules Out

- Delete all modules that have been moved into separate projects.
- rename rxjava-core to rxjava0.20.0Update README to reflect repository move.Replacing Netflix/RxJava with ReactiveX/RxJavaMerge pull request #1613 from daschl/more-namespace-changes

Moving Netflix to ReactiveXcopying over recent javadoc enhancements from the 0.20 branch#1607 wiping the javadoc @since slate clean for 1.0fix the usage of deprecated methods.Merge pull request #1615 from abersnaze/migrate-rx-string

fix the usage of deprecated methods.Deprecation Removal

Removing all deprecated methods and types for 1.0 https://github.com/ReactiveX/RxJava/issues/1001Remove Deprecated Usage in Contrib ModulesMerge pull request #1621 from benjchristensen/deprecation-removal

Deprecation RemovalOptimize single BlockingObservable operations.

This changeset optimizes all blocking operations that just return a single
value. The previous code used an iterator all the time, adding significant
GC pressure with iterators and a backing LBQ.

The following numbers are from the added JMH tests just as a general
measurement. The most boost is gained from small results and less
GC pressure.

Before this change:
r.o.BlockingObservablePerf.benchFirst          1  thrpt         5  2839391.882    17771.079    ops/s
r.o.BlockingObservablePerf.benchFirst       1000  thrpt         5  2046716.781    22884.125    ops/s
r.o.BlockingObservablePerf.benchFirst    1000000  thrpt         5  2067456.792    15499.650    ops/s
r.o.BlockingObservablePerf.benchLast           1  thrpt         5  2160081.041    21230.437    ops/s
r.o.BlockingObservablePerf.benchLast        1000  thrpt         5    83270.845      871.836    ops/s
r.o.BlockingObservablePerf.benchLast     1000000  thrpt         5      100.190        1.001    ops/s
r.o.BlockingObservablePerf.benchSingle         1  thrpt         5  3702921.521   154008.164    ops/s

After this change:
r.o.BlockingObservablePerf.benchFirst          1  thrpt         5  6466732.996   191239.670    ops/s
r.o.BlockingObservablePerf.benchFirst       1000  thrpt         5  3752276.751   135138.711    ops/s
r.o.BlockingObservablePerf.benchFirst    1000000  thrpt         5  3840942.600    59305.202    ops/s
r.o.BlockingObservablePerf.benchLast           1  thrpt         5  4110186.134    98795.733    ops/s
r.o.BlockingObservablePerf.benchLast        1000  thrpt         5    84528.104     1710.853    ops/s
r.o.BlockingObservablePerf.benchLast     1000000  thrpt         5       99.460        2.091    ops/s
r.o.BlockingObservablePerf.benchSingle         1  thrpt         5 11897793.778   321260.803    ops/s0.20.1Merge pull request #1635 from daschl/blockingperf

Optimize single BlockingObservable operations.Composite Exception - Circular Reference Handling

Same change as https://github.com/ReactiveX/RxJava/pull/1632 against 0.20 for 1.xMerge pull request #1638 from benjchristensen/composite-exception

Composite Exception - Circular Reference HandlingdoOnEach - Handle Fatal Exceptions

Merging change from 0.20 into 1.x => https://github.com/ReactiveX/RxJava/pull/1631/filesMerge pull request #1639 from benjchristensen/doOnEach-error-swallowing

doOnEach - Handle Fatal Exceptions0.20.2add license headerCopying javadoc enhancements for CompositException from 0.20migrate to single-module buildNebula Build - Single ModuleMerge pull request #1644 from benjchristensen/nebula-build

Nebula Build - Single ModuleUpdate build.gradle

GroupID is not needed as it will use the default `io.reactivex`Create .travis.ymlJDKs for TravisOnly JDK 7 for TravisTravis build imageRemove ParallelMerge

Removing confusing operator before locked in stone with 1.0.0 FinalMerge pull request #1645 from benjchristensen/remove-parallel-merge

Remove ParallelMergeOperator Scan Backpressure Fix

Problem 1) The initial value was being emitted before subscription which caused issues with request/producer state, particularly if filter() was used to skip that initial value and then called request(1) before the real request had been sent.
Problem 2) The initial value was not accounted for by the request so it was sending 1 more value than requested. It now modifies the request to account for it.
Problem 3) Redo relied upon these nuances to work. I've fixed this by using a simpler implementation that just maintains state within a map function.Merge pull request #1652 from benjchristensen/1.x-scan-backpressure-fix

Operator Scan Backpressure Fix0.20.3Update CHANGES.md1.0.0-rc.21.0.0-rc.2Removing deprecated operators from operator decision treesFix Javadoc README linkMerge pull request #1665 from loganlinn/patch-1

Fix Javadoc README linkUpdate README.mdUpdate CONTRIBUTING.md

Added 0.x and 1.x branches.Fix the bug that Switch doesn't propagate 'unsubscribe'OperatorScan should check for MAX_VALUE on requestIgnore furthur messages after entering terminate stateError Handling Unsubscribe and Terminal StateMake TakeUntil obey Rx contract0.20.4 and 1.0.0-rc.3Merge pull request #1672 from benjchristensen/merge-0_20_4

Merge 0.20.4 Fixesfix typoRemove CloudBees and Pull Request Logo

- migrating to Travis
- Makes no sense to show the pull request build status as there can be many and any of them could fail without meaning anything for the project.Update README.mdNotificationLite.ErrorSentinel.toString

It should delegate the toString to the Exception, not reach into the message. Some Exceptions don't have a message so this could print "null" and not show the exception type.Unsubscribe eagerly and drop queued onNext to emit onError

The queue will be drained to find and emit the onError.Assert onError cuts ahead of onNext

... and doesn't allow intermittent onNext via a race of draining the queue and emitting (the draining thread must be where the skipping happens, not the producer thread).Don't allocate an empty ArrayList for each Observable.empty callIssue #1642 Fix null-emitting combineLatestMerge pull request #1687 from jbripley/opt-empty

Don't allocate an empty ArrayList for each Observable.empty callMerge pull request #1705 from edenman/1.x

Issue #1642 Fix null-emitting combineLatestSlightly cleaner code for onNext from bufferMerge pull request #1713 from benjchristensen/tweak-pull-1705-fix

Slightly cleaner code for onNext from bufferMerge pull request #1683 from benjchristensen/observeOn-error

ObserveOn Error HandlingAdded a unit test to demonstrate regression in Observable.mergeDelayErrorFix the failing Observable.mergeDelayError synchronous error unit testFix compose genericsFix Rx serialization bug in takeUntil againFix the race condition in BufferUntilSubscriberUse EmptyObserver instead of Subscribers.empty()

onError should be ignored after unsubscribe is called.Merge pull request #1714 from benjchristensen/merge-20

Merge 0.20.5 into 1.xRemove Observable.Parallel

see https://github.com/ReactiveX/RxJava/issues/1673Merge pull request #1716 from benjchristensen/remove-parallel

Remove Observable.Parallel0.20.5 and 1.0.0-rc.4Bug in the onBackpressure operatorsAdd a shim to make it so the public api for repeatWhen and retryWhen don't expose Notification<?>forgot to commit the changes to the tests.Merge pull request #1719 from abersnaze/onBackpressure-request-max

Bug in the onBackpressure operatorsMerge pull request #1720 from abersnaze/dematerize-reWhen

Change repeatWhen and retryWhen signatures.fix for merge dropping values from scalarValueQueue and not completing during request(..) when the last value emitted was from scalarValueQueueRemove Comment

This comment is no longer correct. 1420 was resolved.Synchronize Access

The `wip` variable needs its access to be synchronized. Then it calls drainAndComplete outside the lock.Merge pull request #1726 from benjchristensen/fix-merge-1723

Fix Merge: backpressure + scalarValueQueue don't play nicelyback pressure support for group by operatorgroupByUntil -> groupBy

This collapses groupByUntil and groupBy into a single groupBy operator. The new implementation has 2 major changes:

1) It supports reactive pull backpressure.
2) Child GroupedObservables can be unsubscribed and they will be cleaned up and then new instances for the same key can be emitted, like groupByUntil, except that now instead of passing in a special durationSelector function, the child can be composed using take/takeUntil/etc to cause an unsubscribe.

If the previous non-obvious groupBy behavior is wanted, then instead of unsubscribing, it can be filtered to ignore all further data, which is what the old groupBy used to do when a child was unsubscribed.Request Up When Dropping ValuesObserveOn Cleanup

- make code easier to understand with some refactoring of the pollQueue loop
- add a unit test to ensure correct behavior with a hot Observable sourceObserveOn Error Propagation

- errors were not being propagated if backpressure was exerted (requested==0)
- terminal events do not need to be requested so it now ignores the requested count to emit onErrorMerge pull request #1727 from benjchristensen/groupByWithBackpressure

Proposed groupBy/groupByUntil ChangesMerge pull request #1728 from benjchristensen/observeOnErrorPropagation

ObserveOn Error PropagationMerge pull request #1729 from benjchristensen/combineLatest-1717

CombineLatest: Request Up When Dropping ValuesRemove Unused CodeMerge pull request #1731 from benjchristensen/issue-1525

Remove Unused CodeAdd datesVersion 1.0.0-rc.5Move To Proper Location

Was accidentally committed in old rxjava-core src folder.Merge pull request #1733 from benjchristensen/clean-stray-file

Move To Proper LocationUpdate README.mdjavadoc changes to correspond with recent method changesmore javadoc changes to correspond with recent method changesFix TrampolineScheduler NullPointerException

I tried for about 30 minutes to replicate the NPE reported in https://github.com/ReactiveX/RxJava/issues/1702 but couldn't.
It makes sense reading the code that an unsubscribe could trigger an NPE though so I'm fixing it as per recommendation of @DylanSale even though I can't replicate.
I confirmed that the items are being put in the queue BEFORE the wip variable is incremented, so that concurrency seems okay.Remove use of ThreadLocal

This was an awkward leftover from early version of RxJava (pre v0.17).Delay Operator with Reactive Pull Backpressure

Updated the implementations to support reactive pull backpressure.
Fixes https://github.com/ReactiveX/RxJava/issues/1724Fix Slow Non-deterministic Test

Somehow I missed the Thread.sleep to force the scenario so most of the time this test would run very slow (or forever).
I'm surprised the unit tests passed before... just random luck on thread scheduling.Merge pull request #1739 from benjchristensen/observeOn-testErrorPropagatesWhenNoOutstandingRequests

Fix Slow Non-deterministic TestMerge pull request #1738 from benjchristensen/issue-1724

Delay Operator with Reactive Pull BackpressureMerge pull request #1736 from benjchristensen/issue-1702

Fix TrampolineScheduler NullPointerExceptionlongCount -> countLong

Fixes https://github.com/ReactiveX/RxJava/issues/1684Merge pull request #1740 from benjchristensen/countLong

longCount -> countLongDelete EmptyObserver

It creates no value and confuses with Observers.empty() which throws an OnErrorNotImplementedException if onError is invoked.
Fixes https://github.com/ReactiveX/RxJava/issues/1741Clarify Javadoc on Observers.empty()

It throws an Exception ... and now EmptyObserver is gone.Swallow Errors in TestObserver

If a delegate is not provided then do nothing.
Fixes https://github.com/ReactiveX/RxJava/issues/1571Merge pull request #1742 from benjchristensen/issue-1571

EmptyObserver and TestObserverSubject Error Handling

Fixes https://github.com/ReactiveX/RxJava/issues/1685 by delaying errors that are caught until after all subscribers have a chance to receive the event.

Note that this has a lot of code duplication to handle this across the Subject implementations. It may be worth abstracting this logic ... but right now I'm just doing what makes sense to fix this as the Subject abstractions are non-trivial.Merge pull request #1743 from benjchristensen/issue-1685

Subject Error HandlingSerializedSubject

See https://github.com/ReactiveX/RxJava/issues/1744Fatal System.err Logs on Unhandled Exceptions

If an exception is thrown on a thread then we can't do anything with it so will log out to System.err.

Fixes https://github.com/ReactiveX/RxJava/issues/1682 ScheduledAction Swallows ErrorsMerge pull request #1746 from benjchristensen/issue-1682

Fatal System.err Logs on Unhandled ExceptionsMerge pull request #1745 from benjchristensen/serialized-subject

SerializedSubjectAdded final keyword and private constructor to private/utility classes.javadoc fixes (countLong, subscriptionDelay, Observables)minor javadoc formatting fixMerge pull request #1747 from akarnokd/Cleanup_Utility_Classes

Cleanup: final and utility classes1.0.0-rc.6add javadocs to describe SerializedSubject class
(also correct error in javadoc comments for OperatorDoOnSubscribe, for what it's worth)EmptyObserver

As per https://github.com/ReactiveX/RxJava/pull/1742/files#r18738531Merge pull request #1749 from benjchristensen/buffer-empty

BufferUntilSubscriber EmptyObserverFix NPE when iterable is nullRemoved unused import and variables.Merge pull request #1751 from akarnokd/Remove_unused

Removed unused imports and variables.Merge pull request #1750 from zsxwing/OnSubscribeFromIterabl-NPE

Fix NPE when iterable is nullAdded missing headers, removed unnecessary castsMerge pull request #1752 from akarnokd/Cleanup_Headers_n_Casts

Added missing headers, removed unnecessary castsOnSubscribeRefCount with Synchronous Support

Fixes https://github.com/ReactiveX/RxJava/issues/1688OnSubscribeRefCount UnitTests

Additional tests on top of those started by @davidmotenMerge pull request #1755 from benjchristensen/issue1688

OnSubscribeRefCount with Synchronous SupportCleanup: added missing annotations, removed unnecesary annotationsMerge pull request #1757 from akarnokd/Cleanup_Override_n_SuppressWarnings

Cleanup: added missing annotations, removed unnecesary annotationsCompose genericsCombine RefCount TestsMerge pull request #1763 from benjchristensen/cleanup-refCount-tests

Combine RefCount Tests0.20.6set producer to allow back pressure signals to flow between parent and childUnhandled errors go to UncaughtExceptionHandler

Rather than swallowing/logging errors, ScheduledAction now delivers them
to the UncaughtExceptionHandler for the executing Thread. This gives
client applications control over the handling of errors that occur off
of the calling Thread.Merge pull request #1766 from loganj/uncaught

Unhandled errors go to UncaughtExceptionHandlerMerge pull request #1765 from neerajrj/onErrorResumeBackpressure

backpressure support in onErrorResumeNext* operatorsExecutorScheduler delivers uncaught exceptions

Instead of swallowing unhandled errors, ExecutorScheduler delivers them
to the executing thread's UncaughtExceptionHandler.

This addresses the same issue as ReactiveX/RxJava#1682, but for
ExecutorScheduler which does not used ScheduledAction.OnErrorResume Backpressure TestsMerge pull request #1768 from benjchristensen/onErrorTests

OnErrorResume Backpressure TestsMerge pull request #1767 from loganj/uncaught_executor

ExecutorScheduler delivers uncaught exceptionsVersion 1.0.0-rc.7back pressure supportback pressure testsMerge pull request #1771 from neerajrj/onErrorReturnBackpressure

On error return backpressureIncreased the interval time to 100ms.Covariance Test with GroupedObservable.composeMerge pull request #1776 from benjchristensen/compose-generics

Observable.compose GenericsMerge pull request #1775 from akarnokd/BlockingOperatorNextTestFix

BlockingOperatorNextTest.testSingleSourceManyIterators fixexclude rx.internal.
exclude RxJavaErrorHandlerDefault by deleting it.Change Transformer to Func1<Observable<T>, Observable<R>>Merge pull request #1778 from zsxwing/compose

Change Transformer to Func1<Observable<T>, Observable<R>>Merge pull request #1777 from abersnaze/javadoc-exclude

Excluding things from the javadocPublish with BackpressureMerge pull request #1784 from benjchristensen/publish-backpressure

Publish with BackpressureRemove Multicast

The implementation is still there as `replay` is still using it, but the public API is removed.Merge pull request #1786 from benjchristensen/1779-multicast

Remove MulticastRemove *withIndex Operators

See https://github.com/ReactiveX/RxJava/issues/1782 -> Remove takeWhileWithIndex & skipWhileWithIndexRemove PublishLast/InitialValue

See https://github.com/ReactiveX/RxJava/issues/1785GroupedObservable.from/create

See https://github.com/ReactiveX/RxJava/issues/1668Merge pull request #1787 from benjchristensen/1782-remove-withIndex

Remove *withIndex OperatorsMerge pull request #1789 from benjchristensen/1668-groupedObservable

GroupedObservable.from/createFix for #1791 - don't retry (subscribe) to source if child has unsubscribed.Take Unsubscribes Before OnNext

To prevent issues such as https://github.com/ReactiveX/RxJava/issues/1791Merge pull request #1793 from benjchristensen/1791_first_with_retryWhen

Take/Redo Unsubscribe1.0.0-rc.8Merge pull request #1788 from benjchristensen/1785-remove-publish-overloads

Remove PublishLast/InitialValueImprove TestSubject Javadoc

As per https://github.com/ReactiveX/RxJava/issues/1759Merge pull request #1796 from benjchristensen/testsubject-javadoc

Improve TestSubject JavadocJavadocs for MissingBackpressureException (#1800)New and improved javadocs for MissingBackpressureException (#1800)add hasObservers method to Subjects (#1772)

as per https://github.com/ReactiveX/RxJava/issues/1772

SerializedSubject now keeps track of the actual Subject.
BufferUntilSubscriber synchronizes on the state guard.Note on Versioning and GroupIDsPrint full classname (inner class support) and fix enum outputMerge pull request #1803 from edenman/1.x

Print full classname (inner class support) and fix enum outputMerge pull request #1802 from simonbasle/hasObservers

add hasObservers method to Subjects (#1772)Remove Actions Utility Methods

As per https://github.com/ReactiveX/RxJava/issues/1799Remove `Not` Class

As per https://github.com/ReactiveX/RxJava/issues/1798Fix the RxClojure project link.Merge pull request #1808 from jparise/readme-clojure-link

Fix the RxClojure project link.fix javadoc description of share()Merge pull request #1806 from benjchristensen/remove-utilities

Remove Unnecessary UtilitiesRemove Javadoc LinebreaksRemove Utility Functions from Public API

Fixes https://github.com/ReactiveX/RxJava/issues/1797Merge pull request #1809 from benjchristensen/1797-utility-functions

Remove Utility Functions from Public APIFix issue #1812 that zip may swallow requestsMerge pull request #1813 from zsxwing/issue1812

Fix issue #1812 that zip may swallow requestsCreate README.mdUpdate README.mdFix Synchronous OnSubscribe Exception Skips Operators

Fixes https://github.com/ReactiveX/RxJava/issues/1816Merge pull request #1817 from benjchristensen/lift-error-handling

Fix Synchronous OnSubscribe Exception Skips OperatorsFix Concat Breaks with Double onCompleted

Fixes https://github.com/ReactiveX/RxJava/issues/1818Merge pull request #1819 from benjchristensen/issuje-1818-concat

Fix Concat Breaks with Double onCompleted1.0.0-rc.91.0.0-rc.9This doesn't belong here. Replaced by http://reactivex.io/documentation/Operators/operators.htmlAdd check to ensure that the worker was removed from the queue, before unsubscribing that worker.Unit Test By Window Variant

Split the unit tests up to match the implementation files.
Add unit tests for https://github.com/ReactiveX/RxJava/issues/1546 to OperatorWindowWithSizeTestFixes Early Unsubscribe for Non-Overlapping Window

https://github.com/ReactiveX/RxJava/issues/1546Fixes Early Unsubscribe for Overlapping Window

- https://github.com/ReactiveX/RxJava/issues/1546
- This also fixes the fact that the overlapping window overload was not propagating unsubscribe before. A new unit test caught that.Merge pull request #1829 from benjchristensen/1546-window

Fix Window by Count Unsubscribe BehaviorMerge branch 'mergeDelayErrorFix' of github.com:EmteZogaf/RxJava into 313-mergeDelayError

Unit test for https://github.com/ReactiveX/RxJava/issues/313Fix mergeDelayError Handling of Error in Parent Observable

Fixes https://github.com/ReactiveX/RxJava/issues/313Merge pull request #1830 from benjchristensen/313-mergeDelayError

Fix mergeDelayError Handling of Error in Parent ObservableMerge pull request #1827 from alexwen/1826_scheduler_termination

CacheThreadScheduler Evictor should Check RemovalFix Take Early Unsubscription Causing Interrupts

Fixes https://github.com/ReactiveX/RxJava/issues/1804Fix Thread Safety for Unsubscribe

I'm using a separate variable so the volatile is only touching during window start/end and unsubscribe rather than every onNext.Merge pull request #1833 from benjchristensen/window-tweaks

Fix Thread Safety for Unsubscribe of WindowSubject.toSerialized

Adds toSerialized as discussed in https://github.com/ReactiveX/RxJava/issues/1748Scan/Reduce with Seed Factory

Adds overload with seed factory as per https://github.com/ReactiveX/RxJava/issues/1831RxRingBufferSize (128 default, 16 on Android)

- changing from 1024 to 128 based on perf tests
- platform dependent check for Android to set to 16 to reduce memory usageIndexedRingBufferSize (256 default, 8 on Android)

- changing from 512 to 256 based on perf tests
- platform dependent check for Android to set to 8 to reduce memory usage (use cases on Android should rarely if ever hit the use case with merge that requires the higher buffer sizes for performance)Merge pull request #1836 from benjchristensen/ring-buffer-size

Reduce Ring Buffer Default Sizes (and lower for Android)Merge pull request #1835 from benjchristensen/reduce-scan-mutable-seed

Scan/Reduce with Seed FactoryMerge pull request #1832 from benjchristensen/thread-interrupts-take

Fix Take Early Unsubscription Causing InterruptsMerge pull request #1834 from benjchristensen/toSerializedSubject

Subject.toSerializedDelete gradle.propertiesUpdate README.mdUpdate README.mdminor corrections to javadocs for new scan/reduce variants (#1835)make javadoc for zip() variants more precise (#1858)make javadocs for scan() more precise (#1857)make javadocs for reduce() more precise (#1856)clarify return value of publish() in javadocs (#1855)clean up onBackpressureDrop() javadocs and make similar to those for onBackpressureBuffer() (#1854)Improve asObservable() javadoc description (#1853)remove links to .NET docs from our javadocs (#1852)deprecating inferiority complex (#1852)Hiding implementation details from Scheduler javadocs (#1851)javadocs for Subscriber variants: take care of Observer/Subscriber distinction (#1848)promote Observer.create(onNext) note about onError to sentence #1 of javadoc description (#1847)advanced javadoc formatting yoga in GroupedObservable class description (#1846)In javadocs, warn developers away from using BlockingObservable in production code (#1844)in BlockingObservable.forEach() javadoc, clarify what happens in case of error notification from underlying Observable (#1844)overridden onFoo() methods in Subscriber subclasses need their own javadocs (#1849 #1850).
Also: Observer javadocs are a bit too groovy.Make the javadoc descriptions of various Exception implementations parallel one another better (#1841)Add missing javadoc interface descriptions for some ActionN variants (#1842)Add missing javadoc interface descriptions for the various FuncN variants (#1843)Fix memory leak in bounded ReplaySubject due to retaining the node index
indefinitely once the Subscriber caught up.1.0.0-rc.100.20.7Remove Unused Scheduler.parallelism

Before hitting 1.0 removing this API as it is not used.Merge pull request #1882 from benjchristensen/scheduler-parallelism

Remove Unused Scheduler.parallelismFix Scan/Reduce/Collect Factory Ambiguity

This puts the seed factory on `collect` and removes it from `scan` and `reduce` due to ambiguity.
See https://github.com/ReactiveX/RxJava/pull/1883 and https://github.com/ReactiveX/RxJava/issues/1881Merge pull request #1884 from benjchristensen/mutable-collect-scan-reduce

Fix Scan/Reduce/Collect Factory AmbiguityMerge pull request #1866 from akarnokd/ReplaySubjectMemoryLeakFix

Fix memory leak in bounded ReplaySubject due to retaining the node indexFixed unsubscription issue in buffer with time and a potential
concurrency issue in merge.Whitespace fix.Merge pull request #1886 from akarnokd/MergeFix

Buffer with time and merge fixVersion 1.0.0-rc.11Version 1.0.0-rc.12javadocs: remove leftover "@since" annotations; add param descriptionVersion 1.0.0Fixed incorrect error merging.The backpressure exception might cut ahead of all onNext events.Avoid request(0) to trigger a recursive call.Avoid self-interrupting of a completing ScheduledAction.Cleanup the worker.Simplified the memory footprint.Merge pull request #1893 from akarnokd/MergeDelayErrorFix

Fixed incorrect error merging.Perf profile & simplifications.Some class simplifications.Add optional bound to onBackpressureBuffer

The operator takes an optional capacity for the buffer and a callback to
be triggered when the buffer fills up.Fixed redo & groupBy backpressure managementRestore timeout on the test.Operator OnBackpressureBlockFixed accidental import * expansion.Do not leave drain if queue has data and downstream doesn't do
backpressure.Fixed typo.Fix TestScheduler Handling of Immediate vs Virtual TimeMerge pull request #1901 from akarnokd/RedoRequestFix

Fixed redo & groupBy backpressure managementVersion 1.0.1Merge pull request #1903 from benjchristensen/testscheduler-1790

Fix TestScheduler Handling of Immediate vs Virtual TimeFix the bug that Scan may request 0 when n is 1Merge pull request #1898 from akarnokd/ScheduledActionNoInterrupt

Scheduled action no interruptVersion and Lifecycle Annotations

Use of annotations for lifecycle are inspired by Guava: https://github.com/google/guava#important-warningsBeta & Experimental Annotations

See https://github.com/ReactiveX/RxJava/issues/1824Merge pull request #1904 from zsxwing/fix-scan

Fix the bug that Scan may request 0 when n is 1Merge pull request #1905 from benjchristensen/lifecycle-annotations

Beta & Experimental AnnotationsMerge branch 'OnBackpressureBlock' of github.com:akarnokd/RxJava into onBackpressureBlockMarking OnBackpressureBlock as @Experimental

I chose Experimental instead of Beta since we may still change how it behaves based on what Scheduler is being used.Atomic operations JMH benchmarksgetAndSet benchmarksFixed retry without backpressure & test function to support bp.Merge pull request #1911 from akarnokd/AtomicPerf

Atomic operations JMH benchmarksMerge pull request #1912 from akarnokd/RetryWithBackpressureFix

Fixed retry without backpressure & test function to support bp.Merge pull request #1907 from benjchristensen/onBackpressureBlock

Experimental: onBackpressureBlockMerge branch '1.x' of github.com:srvaroa/RxJava into experimentalOnBackpressureBufferWithCapacityUse Action instead of Func0<Void>

As per https://github.com/ReactiveX/RxJava/pull/1899#discussion_r20863956Mark onBackpressureBuffer(count) as Betajavadocs: add "since" reminder; minor text changesBufferOverflowException -> MissingBackpressureExceptionrx.internal.* warningMerge pull request #1916 from benjchristensen/experimentalOnBackpressureBufferWithCapacity

Experimental onBackpressureBufferWithCapacityRevert "Experimental onBackpressureBufferWithCapacity"Merge pull request #1918 from ReactiveX/revert-1916-experimentalOnBackpressureBufferWithCapacity

Revert "Experimental onBackpressureBufferWithCapacity"1.0.2Update CHANGES.mdUpdate CHANGES.mdSet removeOnCancelPolicy on the threadpool if supportedFixed wrong Java 8 reflection API calljavadoc: diagrams for onBackpressureBlock (would benefit from a review)Move the codes out of the finally blockAdd onBackpressureBuffer with capacity

The operator takes an optional capacity for the buffer and a callback
that will be invoked if the buffer fills up, along with a
MissingBackpressureException in the Observable's onError.Scheduler.Worker to be finally unsubscribed to avoid interference.Any should not unsubscribe downstream.Fixed OperatorAll unsubscribing downstream.Merge pull request #1922 from akarnokd/SchedulersRemoveOnCancelPolicy

Set removeOnCancelPolicy on the threadpool if supportedMerge pull request #1926 from zsxwing/fix-merge-finally

Move the codes out of the finally blockMerge pull request #1928 from srvaroa/1.x

Add onBackpressureBuffer with capacityMerge pull request #1937 from akarnokd/SchedulerTestsFix

Scheduler.Worker to be finally unsubscribed to avoid interferenceAbstractOnSubscribe to help build Observables one onNext at a time.Fixed first emission racing with pre and post subscription.minor tweaks to javadocs for new onBackpressureBuffer variantsMerge pull request #1946 from akarnokd/AbstractOnSubscribe2

AbstractOnSubscribe to help build Observables one onNext at a time.tidying up AbstractOnSubscribe javadocsAdd "Subscriptions.unsubscribed" to fix the 'isUnsubscribed' issueRemove extraneous request(n) and onCompleted() calls when unsubscribed.Remove ActionSubscriptionFixed timer cast-to-int crash causing incorrect benchmark.Fixed race & late termination condition.Factored out the backpressure management into an experimental class and
reimplemented Buffer and Block strategies with it.Fix 'request(0)' issue in ScanMerge pull request #1947 from akarnokd/ReplaySubjectFirstEmissionFix

Fixed first emission racing with pre and post subscription.Merge pull request #1951 from abersnaze/unnecessary

Remove extraneous request(n) and onCompleted() calls when unsubscribed.Merge pull request #1952 from zsxwing/remove-action-subscription

Remove ActionSubscriptionMerge pull request #1953 from akarnokd/OperatorSerializePerfFix

Fixed timer cast-to-int crash causing incorrect benchmark.doOnRequest

Similar to doOnSubscribe, doOnNext, etcSerialSubscription and MultipleAssignmentSubscription should use Subscriptions.empty()Merge pull request #1960 from benjchristensen/doOnRequest

doOnRequestRemove Request Batching in Merge

Removing the batching until we can find a correct way to do it.

The performance impact of this change is seen here:

Benchmark                                          (size)   Mode   Samples          1.x    No Request Batching
r.o.OperatorMergePerf.merge1SyncStreamOfN               1  thrpt         5  4585554.607    4666745.314 102%
r.o.OperatorMergePerf.merge1SyncStreamOfN            1000  thrpt         5    51273.033      39922.246 78%
r.o.OperatorMergePerf.merge1SyncStreamOfN         1000000  thrpt         5       47.515         37.634 79%
r.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1  thrpt         5    90901.735      93454.726 103%
r.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000  thrpt         5        5.407          4.910 91%
r.o.OperatorMergePerf.mergeNSyncStreamsOf1              1  thrpt         5  4181618.767    4173322.551 100%
r.o.OperatorMergePerf.mergeNSyncStreamsOf1            100  thrpt         5   422193.599     408972.130 97%
r.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000  thrpt         5    36886.812      36448.978 99%
r.o.OperatorMergePerf.mergeNSyncStreamsOfN              1  thrpt         5  4815945.720    4887943.643 101%
r.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000  thrpt         5       43.926         39.027 89%
r.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1  thrpt         5    72578.046      70412.656 97%
r.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000  thrpt         5     3260.024       3064.403 94%
r.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1  thrpt         5  4678858.201    4808504.588 103%
r.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000  thrpt         5    34407.547      36364.476 106%
r.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000  thrpt         5       31.312         32.261 103%Handle 0 or negative request in BufferFix NPE when the key is null in GroupByFix the issue that Sample doesn't call 'unsubscribe'add @since section to doOnRequest() javadocsBump to 2.2Apply java pluginMerge pull request #1961 from benjchristensen/issue-1941-remove-request-batching

Remove Request Batching in MergeMerge pull request #1968 from ReactiveX/bump-to-2.2

Upgrade to Gradle 2.2Merge pull request #1938 from akarnokd/OperatorAnyFix

Any/All should not unsubscribe downstream.Merge pull request #1950 from zsxwing/unsubscribed

Add "Subscriptions.unsubscribed" to fix the 'isUnsubscribed' issueMerge pull request #1957 from zsxwing/fix-scan

Fix 'request(0)' issue in ScanMerge pull request #1964 from zsxwing/fix-buffer-request

Handle 0 or negative request in BufferMerge pull request #1966 from zsxwing/fix-groupby-null-key

Fix NPE when the key is null in GroupByFix the issue that GroupBy may not call 'unsubscribe'Propagate onError to all groupsMerge pull request #1965 from zsxwing/fix-sample-unsubscribe

Fix the issue that Sample doesn't call 'unsubscribe'Add a new state of `terminated` to fix the race condition of `errorEmitted`; Add more comments.Fixed test issuing non-serialized messages to the subject.javadocs: minor style, grammar changes; add @since annotation to new methodUpdate as per reviewMerge pull request #1973 from akarnokd/ReplaySubjectFix1215

Fixed test issuing non-serialized messages to the subject.Version 1.0.3Merge pull request #1967 from zsxwing/fix-groupby-unsubscribe

Fix the issue that GroupBy may not call 'unsubscribe'OperatorDoOnRequest.ParentSubscriber should be static classFixed wrong subject use in test.Fixed potential request value overflow.Merge pull request #2053 from akarnokd/ReplaySubjectBoundedFix1218

Fixed wrong bounded ReplaySubject use in test.Added Operator switchIfEmpty, like defaultIfEmpty but subscribes to and emits the items in an Observable if the source is emptyAddressing review feedback:

Ensure that we unsubscribe upstream "parent" when switching to alternate. That way upstream will trigger unsubscribe when the first Observable completes. Added test.
Child should contain downstream subscriptions - not parent.Fix for back pressure on the alternate subscription.Fix the issue that map may swallow fatal exceptionsenable faster travis buildsMerge pull request #2156 from zsxwing/map-swallow-fatal-exceptions

Fix the issue that map may swallow fatal exceptionsMerge pull request #2052 from davidmoten/make-class-static

OperatorDoOnRequest.ParentSubscriber should be static classMake Publish Operator Release RingBuffer

- it was retaining the RxRingBuffer reference between subscribes which meant it was never released to the object poolMerge pull request #2237 from benjchristensen/publish-ring-buffer-usage

Make Publish Operator Release RingBufferFix the bug that cache doesn't unsubscribe the source Observable when the source is terminatedadd check for isUnsubscribed to OperatorTakeLast fast pathVersion 1.0.4Few adjustments.Fixed the error function.A first set of stateless operators that don't need to be instantiated
for lift all the time.Fixed comment typo, added the rest of the operatorsupdating javadocs to link to latest web docsFail early if a null subscription is added to a CompositeSubscription.
Otherwise, it'll just fail late when unsubscribing, which is much harder
to trace.Fixes indentation.IllegalArgumentException > NPEFix for https://github.com/ReactiveX/RxJava/issues/2191 - OperatorMulticast fails to unsubscribe from source.Moved test cases for issue #2191 into OperatorReplayTestUnbroken TestSubscriberMerge pull request #2332 from akarnokd/OperatorRetryTestFixAttempt

Operator retry test fixMerge pull request #2244 from davidmoten/take-last-unsub

OperatorTakeLast add check for isUnsubscribed to fast pathScheduledExecutorService: call purge periodically on JDK 6 to avoid
cancelled task-retention.Fixed file comment, larger timeout for a testUnsubscribe when thread is interruptedRemove the execute permission from source filesMerge pull request #2469 from zsxwing/file-permission

Remove the execute permission from source filesSubject state information methods & bounded ReplaySubject termination
fixFixes NPEs reported in ReactiveX#1702 by synchronizing queue. Adds unit test for regression.Use unsubscribed check instead of a null check.Fixes NPEs reported in ReactiveX#1702 by synchronizing queue. Adds unit test for regression.Merge branch 'fix1702' of https://github.com/jnlopar/RxJava into fix1702Don't block the action on the queue lock.Added experimental annotationsMerge pull request #2455 from duncani/Issue#2191

Fix for #2191 - OperatorMulticast fails to unsubscribe from sourceMergeTest.testConcurrency timeout to let other tests runMerge pull request #2474 from akarnokd/MergeTestTimeout

MergeTest.testConcurrency timeout to let other tests runMerge pull request #2335 from akarnokd/StatelessOperators

A set of stateless operators that don't need to be instantiatedSynchronousQueue.clone fixMerge pull request #2447 from jnlopar/1.x

Fail early if a null subscription is added to a CompositeSubscription.Merge pull request #2475 from akarnokd/SyncQueueCloneFix

SynchronousQueue.clone fixFixed off-by-one error and value-drop in the window operator.BackpressureTests: adjusted some tests to make them more reliable.Fixed SLOW_PASS_THRU to prevent JIT optimizing it away.Merge pull request #2477 from akarnokd/BackpressureTestsFix0121

Backpressure tests fix 0121Merge pull request #2476 from akarnokd/WindowFixes0121

Fixed off-by-one error and value-drop in the window operator.RefCountAsync: adjusted time values as 1 ms is unreliableMerge pull request #2478 from akarnokd/TestRefCountAsyncFix

testRefCountAsync: adjusted time values as 1 ms is unreliableMerge pull request #2238 from zsxwing/issue2191

Fix the bug that cache doesn't unsubscribe the source Observable when th...Merge pull request #1840 from roman-mazur/unsubscribe-on-interrupt

BlockingObservable: Unsubscribe when thread is interruptedUse a PBQ instead of a PQ on the trampoline. Moves counter inside to worker class and ditches the separate field updater.Merge: fixed hangs & missed scalar emissionsFixes indent.Operator DoTakeWhileBack to a field updater.Merge pull request #2471 from jnlopar/fix1702

Fixes NPEs reported in ReactiveX#1702 by synchronizing queue.Merge with max concurrency now supports backpressure.Fixed line delimiters.Added capacity increase on poll.Less concurrent threads and more in-line timeout detection.Added value null checkChanged operator names, fixed backpressure.remove unnecessary imports, add missing generic types, add SuppressWarnings(unchecked)Merge pull request #2482 from akarnokd/MergeFix0122

Merge: fixed hangs & missed scalar emissionsMerge pull request #2547 from davidmoten/fix-more-warnings

Warnings cleanupMerge pull request #2465 from akarnokd/SchedulerPurgeForJDK6

ScheduledExecutorService: call purge periodically on JDK 6 to avoidhandle request overflow for OperatorMergeMerge pull request #2543 from davidmoten/merge-request-overflow

OperatorMerge handle request overflowSubscriber.request should throw exception if negative request madeMerge pull request #2548 from davidmoten/request-check

Subscriber.request should throw exception if negative request madeonStart requests should be additive (and check for overflow)Merge pull request #2550 from davidmoten/request-additive

Subscriber.onStart requests should be additive (and check for overflow)Publish: fixed incorrect subscriber requested accountingMerge pull request #2470 from akarnokd/SubjectAdditionalMethods

Subject state information methods & bounded ReplaySubject terminationRxRingBuffer with synchronizationCorrecting javadocs for the amb/ambWith operatorsUpdate RxRingBuffer.java

Fixes in comments.Update RxRingBuffer.java

Yet another undelryingRemoved commented-out code.Merge pull request #2553 from akarnokd/RxRingBufferSynchronized

RxRingBuffer with synchronizationUpdating queue code from JCToolsHandle concurrent unsubscription in drain (avoid NPE).Merge pull request #2540 from akarnokd/MergeMaxConcurrentBackpressure

Merge with max concurrency now supports backpressure.Split error conditions into separate test lines.Obstruction detection in tests.CombineLatest: fixed concurrent requestUpTo yielding -1 requests
sometimes.RefCount: disconnect all if upstream terminatesMerge pull request #2565 from akarnokd/TestObstructionDetection

Obstruction detection in tests.Merge pull request #2563 from akarnokd/RetryBackpressureParallelTestChange

Retry backpressure test: split error conditions into separate test lines.Give more time to certain concurrency tests.add request overflow check for OnSubscribeFromIterableMerge pull request #2572 from akarnokd/TestsMoreTime

Give more time to certain concurrency tests.Merge pull request #2559 from davidmoten/from-iter-request-overflow

OnSubscribeFromIterable - add request overflow checkSizeEviction test needs to return false when verifying if it needs evictionMerge pull request #2574 from jnpr-jalandip/1.x

SizeEviction test needs to return falsesubscribeOn drops the subscriptions returned from the scheduler.Merge pull request #2561 from akarnokd/JCToolsUpdate0129

Updating queue code from JCToolsMerge pull request #2575 from abersnaze/subscribeOn_subscription

subscribeOn drops the subscriptions returned from the scheduler.Merge pull request #2566 from akarnokd/CombineLatestBackpressureFix

CombineLatest: fixed concurrent requestUpTo yielding -1 requestsMerge pull request #2552 from akarnokd/OperatorPublishRequestFix

Publish: fixed incorrect subscriber requested accountingRevert "subscribeOn drops the subscriptions returned from the scheduler."Merge pull request #2578 from ReactiveX/revert-2575-subscribeOn_subscription

Revert "subscribeOn drops the subscriptions returned from the scheduler....Allow configuring maximum number of computation scheduler threadsFixed typo.Fixed race in testConnectUnsubscribeRaceCondition()Added perf tests for various container-like subscriptionsFixed local variables, added blackhole to *Local benchmarksMerge pull request #2583 from akarnokd/SubscriptionPerfs

Added perf tests for various container-like subscriptionsChanged predicate to stopPredicate: stops on becoming true.Fixed some concerns with the operator.Using @Experimental, covariance and final classMerge pull request #2585 from akarnokd/switch_if_empty

Operator: switchIfEmptyMerge pull request #1955 from akarnokd/OnBackpressureBlockFix

OnBackpressureXXX: support for common drain manager & fix for former concurrency bugsadd @since annotation to new operator (also: remove "Beta" section as it's been moved from Beta to Experimental status)Repeat/retry: fixed unbounded downstream requesting above Long.MAX_VALUEZip: fixed unbounded downstream requesting above Long.MAX_VALUEChanged the naming of the NewThreadWorker's system parametersChanged system-parameter naming.Merge pull request #2591 from akarnokd/NewThreadSchedulerSyskey

Changed the naming of the NewThreadWorker's system parametersMerge pull request #2590 from akarnokd/ZipHangFix

Zip: fixed unbounded downstream requesting above Long.MAX_VALUEMerge pull request #2589 from akarnokd/OperatorDistinctFix

Repeat/retry: fixed unbounded downstream requesting above Long.MAX_VALUEZip: emit onCompleted without waiting for request + avoid re-reading
fieldsLess iteration.Merge pull request #2493 from akarnokd/OperatorDoTakeWhile

Operator TakeUntil with predicateMerge pull request #2567 from akarnokd/RefCountDisconnectOnTerminalEvent

RefCount: disconnect all if upstream terminatesMerge pull request #2593 from akarnokd/ZipHangFix2

Zip: emit onCompleted without waiting for request + avoid re-reading fieldsRevert Behavior Change in TestSubscriber.awaitTerminalEvent

Reverts change made at https://github.com/ReactiveX/RxJava/pull/2332/files#diff-fbed6a16f49022fd2b10f45fd6dd015bR230

See discussion at https://github.com/ReactiveX/RxJava/issues/2549#issuecomment-72783738

The Javadoc for this method clearly states that it will wait until completion or timeout. It does not say it will throw an exception on timeout, so we can not start throwing as that is a behavioral change.Merge pull request #2594 from benjchristensen/test-subscriber

Revert Behavior Change in TestSubscriber.awaitTerminalEventVersion 1.0.5Gradle & Travis Release Config

Configuring Travis for build and release. This was tested at https://github.com/ReactiveX/BuildInfrastructureMerge pull request #2595 from benjchristensen/release-via-travis

Gradle & Travis Release ConfigNebula Config for Travis Build/ReleaseSecure Variables for ReleaseAdded common throwIfAny to throw 0 or more exceptionsAdjusted subject error text.Added experimental annotation, using propagate.add @since annotation to javadocs for new takeUntil variantAdd Snapshot SupportUpdate buildViaTravis.shAdd Release BranchUse buildViaTravis for all flowsReporting stackoverflow caused stackoverflowSnapshot with Patch Version

See https://github.com/ReactiveX/RxJava/issues/2586#issuecomment-72937790improve OnSubscribeRefCount commentsFixed comment and missing valueScript fixMerge pull request #2609 from akarnokd/BuildFix

Fixed comment and missing valueBuild at least as if it was a pull request.Merge pull request #2610 from akarnokd/BuildFix2

Build at least as if it was a pull request.Changed empty into a stateless constant observable.add diagram for new takeUntil variant
and a few other related javadoc tweaks
and remove a troublesome unicode ligature from SpscArrayQueue.java that's causing a compiler warningAdd release.travisci Property

As per https://github.com/ReactiveX/RxJava/issues/2586#issuecomment-73136205Disable SnapshotFlatMap overloads with maximum concurrency parameterMake travis run a proper build.Merge pull request #2628 from akarnokd/BuildFix3

Make travis run a proper build.Merge pull request #2607 from davidmoten/refcount-comments

OnSubscribeRefCount - improve commentsMerge pull request #2622 from akarnokd/EmptyObservable

Changed Observable.empty() into a stateless constant observable.Cast back Observer to Subscriber if passed to subscribe(Observer)Merge pull request #2630 from akarnokd/FixSubscriberLoss

Cast back Observer to Subscriber if passed to subscribe(Observer)Reenable Snapshotrelease.scope=patchreverting release.scope=patchproject.setProperty('release.scope', 'patch')

as per https://github.com/ReactiveX/RxJava/issues/2586#issuecomment-73316386Update build.gradle

I don't enjoy trial and error with build systems.Create gradle.properties

as per https://github.com/ReactiveX/RxJava/issues/2586#issuecomment-73331618Update build.gradleFix a potential memory leak in schedulePeriodicallyRevert the change in recursiveActionUse MultipleAssignmentSubscription to save an importMerge pull request #2642 from zsxwing/fix-memory-leak

Fix a potential memory leak in schedulePeriodicallyMissing Unsafe class yields NoClassDefFoundError so checking for Exception is not really appropriate. Let's catch all throwables.Merge pull request #2644 from jtulach/MissingClassThrowsError

Missing Unsafe class yields NoClassDefFoundErrorTakeWhile: don't unsubscribe downstream.Merge pull request #2580 from akarnokd/ComputationSchedulerConfig

Allow configuring the maximum number of computation scheduler threadsMerge pull request #2601 from akarnokd/CommonUnsubscribeThrow

Added common Exceptions.throwIfAny to throw a collection of exceptionsMerge pull request #2648 from akarnokd/OnCompletedFix

TakeWhile: don't unsubscribe downstream.Merge pull request #2627 from akarnokd/FlatMapMaxConcurrent

FlatMap overloads with maximum concurrency parameterFix Pull Request ConditionalsVersion 1.0.6javadocs: add @since annotations to new methods; fix formatting, polish wording for new Subscriber constructorConditional logic for pull requestDelete publishViaTravis.shExplicit build + snapshotjavadocs: adding (+ correcting one) @since annotationsSwitchOnNext: fixed wrong producerRestore merge changes: not related to the bugMerge pull request #2655 from akarnokd/Issue2654

SwitchOnNext: fix upstream producer replacing the ops own producerOperator WithLatestFromExperimental annotation.Optimized isUnsubscribed checkusing should use unsafeSubscribe, allow eager disposal to enable the synchronous caseMerge pull request #2759 from davidmoten/using-redev

Observable.using should use unsafeSubscribe and enable eager disposalMerge pull request #2762 from akarnokd/SubscriptionOpt

Optimized isUnsubscribed checkMerge pull request #2760 from akarnokd/WithLatestFrom

Operator: WithLatestFrom1.0.7javadocs: withLatestFrom diagram, @since annotations, standardize on formatting and terminology, add compiler nags for missing contentOptimized scalar observeOn/subscribeOnFix typoadd request overflow check for combineLatestMerge pull request #2769 from davidmoten/combineLatest-request-overflow

OperatorCombineLatest request overflow checkadd request overflow check to OperatorOnBackpressureDropMerge pull request #2770 from davidmoten/onBackpressureDrop-request-overflow

OperatorOnBackpressureDrop request overflow checkadd request overflow check to OnSubscribeRangeMerge pull request #2771 from davidmoten/range-request-overflow

OnSubscribeRange request overflow checkMerge pull request #2767 from akarnokd/ScalarScheduleOn

Optimized scalar observeOn/subscribeOnfix several typosOperatorMulticast.connect(connection) should return first subscription on multiple calls, address possible race condition provoking IAEfix typo in commentrevert visibility of fields and add == this check for guarded subscriptionissue-2764: add new operator onBackpressureDrop(Action1 onDrop)shouldSubscribe boolean variable not requiredFix the bug that 'publish' will cache items when no subscriberMerge pull request #2779 from davidmoten/connect-returns-null

OperatorMulticast.connect(connection) should not return nullMerge pull request #2777 from stevenzwu/typo

fix several typosMerge pull request #2788 from zsxwing/publish-no-subscriber

Fix the bug that 'publish' will cache items when no subscriberMerge pull request #2776 from stevenzwu/issues-2764

issue-2764: add new operator onBackpressureDrop(Action1 onDrop)Add Experimental to onBackpressureDrop(Action1)Implement hook to render specific types in OnNextValuestatically reference the plugin and mark as experimentalObserveOn throughput enhancementsCorrected all Java interfaces declarationsFixed takeUntil not unsubscribing from either of the observables in case
of a terminal condition.revert eager static ref to plugin + better exception handling around renderMerge pull request #2804 from akarnokd/Perf0225

ObserveOn throughput enhancementsMerge pull request #2809 from akarnokd/TakeUntilTerminationFix

Fixed takeUntil not unsubscribing from either of the observables in case1.0.8800kb jar.Added more to take to decrease the likelyhood that nothing is dropped.Merge pull request #2817 from akarnokd/OnBackpressureDropWithActionFix

Fix for non-deterministic: testOnBackpressureDropWithActionSmall fix in the sentences of getValue.Merge pull request #2818 from akarnokd/SubjectJavadocFix

Small fix for the getValue javadoc in AsyncSubject and BehaviorSubjectBackpressure for window(size)Changed javadoc regarding backpressureEnable maven central sync via bintrayMerge pull request #2823 from rspieldenner/maven_sync

Enable maven central sync via bintrayMerge pull request #2807 from artem-zinnatullin/correct-interfaces

Corrected all Java interfaces declarationsMerge pull request #2632 from simonbasle/plugErrorRenderer

Implement hook to render specific types in OnNextValuejavadocs: adding @since annotation; adjusting failed @link targets to @codeChecking if the test change is the main cause or not.Merge pull request #2831 from akarnokd/OnBackpressureDropWithActionReduced

testOnBackpressureDropWithAction restored original test countDebug build failuresAdding caching to Travismemory for test

Attempt at fixing build failures https://github.com/ReactiveX/RxJava/issues/2832Removing debugAdd .gradle to cacheincrease memory for testFixed a non-deterministic test and a few scheduler leaks.Merge pull request #2837 from akarnokd/TestFixes0318

Fixed a non-deterministic test and a few scheduler leaks.Fixed javadoc for Observable.repeat() methodMerge pull request #2825 from fatroom/repeat_javadoc

Fixed javadoc for Observable.repeat() methodFix typo in OnSubscribe interface's JavadocMerge pull request #2838 from avram/patch-1

Fix typo in OnSubscribe interface's JavadocFix for issue 2844: wrong target of request on repeatMerge pull request #2845 from akarnokd/Issue2844Fix

Fix for repeat: wrong target of requestAdd 'request(Long.MAX_VALUE)' in 'onStart' to fix the backpressure issue of debounceAdd a unit test for debounce's backpressure issueChange retryWhen to eagerly ignore an error'd source's subsequent eventsMerge pull request #2851 from zsxwing/fix-debounce

Add 'request(Long.MAX_VALUE)' in 'onStart' to fix the backpressure issue of debounceMerge pull request #2852 from akarnokd/RetryOldSubscribeFix

Change retryWhen to eagerly ignore an error'd source's subsequent eventsfix unsub of OperatorDoOnRequest and add more unit testsMerge pull request #2859 from davidmoten/doOnRequest-fix-2

OperatorDoOnRequest should unsubscribe from upstreamFixed request accounting, increased visibility of BackpressureUtilsOperatorSingle should request exactly what it needsMerge pull request #2854 from akarnokd/AbstractOnSubscribeRequestFix

Fixes wrong request accounting in AbstractOnSubscribeMerge pull request #2860 from davidmoten/OperatorSingle-request-accounting

OperatorSingle should request exactly what it needsensure OperatorZipTest.testZipRace does not fail on slower machineswarnings cleanup in test sourceMerge pull request #2861 from davidmoten/zipRace-fix

Ensure OperatorZipTest.testZipRace does not fail on slower machinesadd generic type to IndexedRingBuffer.POOL and modifiy IndexedRingBuffer.getInstance so that infers typeuse simpler naming in Action1, Func1 because is used as a default for IDEs when generating implementing methodsMerge pull request #2864 from davidmoten/main-warnings

IndexedRingBuffer.getInstance can infer typeMerge pull request #2862 from davidmoten/test-warnings

Cleanup warnings in test sourceremove unused code that was the subject of varargs warnings, remove unused importFixed reentrancy issue with the error producer.Merge pull request #2868 from akarnokd/RetryWithBackpressureFix

Fixed reentrancy issue with the error producer.Merge pull request #2867 from davidmoten/remove-unused

More warnings cleanupMerge pull request #2866 from davidmoten/Action1-argument-name

Use simpler naming in Action1, Func1 to assist IDEs1.0.9use explicit versioning for gradle-rxjava-project-pluginUse the correct accounts for sonatype syncFixes NPE in requestFromChild method.Merge pull request #2875 from akarnokd/ConcatNPEFix

Fix: NPE in requestFromChild method.use singleton reduction functions in count and countLongchild.onNext should not be called after child.onErrorMerge pull request #2882 from davidmoten/scan-fix

OperatorScan - don't call onNext after onError is calledProposal: standardized Subject state-peeking methods.fix race condition for range where two threads concurrently request Long.MAX_VALUE and both start the fast path thus possibly some items more than onceMerge pull request #2892 from davidmoten/range-race

Fix Observable.range race conditionConcat: fixed reentrancy problem in completeInnerfix race condition for Observable.from(Iterable) where two concurrent calls to the Producer.request with Long.MAX_VALUE could start the fast path twiceMerge pull request #2895 from davidmoten/from-iter-race

Fix Observable.from(Iterable) race conditionadd unit test to ensure that range with count of 0 sends onComplete even when initial request is 0Observable.from(iterable) should emit onCompleted even if none requested when iterable is emptyMerge pull request #2898 from davidmoten/range-eager-complete

Observable.range - add unit test for eager completion on emptyMerge pull request #2899 from davidmoten/from-iter-eager-complete

Observable.from(empty) to emit onComplete even when 0 requestedMerge pull request #2894 from akarnokd/ConcatOverflowFix

Concat: fixed reentrancy problem in completeInnerOperators toList and toSortedList now support backpressureMerge pull request #2880 from davidmoten/reduce-optimization

Use singleton reduction functions in count and countLongstack overflow test can hang build, simplify the tests and ensure don't hangMerge pull request #2902 from davidmoten/exceptions-test

Prevent ExceptionsTest from hanging when testing stack overflowFix for #2896 overlapping windows. Source was emitting t multiple times while holding queue.Merge pull request #2897 from alexwen/window_overlap

Fix for overlapping windows.TakeLastQueueProducer add request overflow checkMerge pull request #2904 from davidmoten/take-last-queue-producer-request-overflow

TakeLast - add request overflow checkreduce gc pressure by using singleton Operators for single, distinct, distinctUntilChanged, onBackpressureBuffer, isEmptyMerge pull request #2905 from davidmoten/single-singleton

Use singleton Operators where we canFix the drainer to check if the queue is empty before quitting.Merge pull request #2909 from akarnokd/RxRingBufferTestFix

Fix the drainer to check if the queue is empty before quitting.OperatorPublish benchmarkMerge pull request #2911 from akarnokd/OperatorPublishPerf

OperatorPublish benchmarkOperatorPublish full rewrite with comments + its perf fixFix the performance degradation due to different schedule execution and
SubscriptionList.add() and thread unparking.add OperatorTakeLastOneMerge pull request #2914 from davidmoten/take-last-one

Optimization - use OperatorTakeLastOne for takeLast(1)improve perf of OperatorIgnoreElementsMerge pull request #2915 from davidmoten/ignore-elements-singleton

Observable.ignoreElements - optimizeprevent request overflow in OperatorObserveOn and add unit test that fails on original codebase but passes with changeMerge pull request #2883 from akarnokd/ExtendedSubjectAPI

Proposal: standardized Subject state-peeking methods.Merge pull request #2901 from akarnokd/ToSortedListBackpressure

Operators toList and toSortedList now support backpressureensure this does not escape from ObserveOnSubscriber constructor by moving code to an init() method and calling after constructionMerge pull request #2921 from davidmoten/observe-on-request-overflow

OperatorObserveOn - handle request overflow correctlyNon-blocking version of the toBlocking().latest() operator.Javadocs: adding @since annotations to new public methods, cleaning up Subject javadocs a bitMerge pull request #2814 from akarnokd/OperatorPublishRewrite

Operator Publish full rewriteMerge pull request #2820 from akarnokd/WindowWithSizeBackpressure

Backpressure for window(size)Merge pull request #2912 from akarnokd/FixEventLoopsPerfDegradation

Fix the performance degradation due to different schedule execution andFixed schedule race and task retention with ExecutorScheduler.Fix termination race condition in OperatorPublish.dispatchMerge pull request #2934 from akarnokd/OperatorPublishRaceFix

Fix termination race condition in OperatorPublish.dispatchTest that finds a TestScheduler bugFixed TestSubject bug in onNextFixed TestSubject bug in onError and onCompletedadd code quality plugins to build.gradle (jacoco, findbugs)Merge pull request #2936 from jacek-marchwicki/fix-observer-bug

Fix TestSubject bugFixed Observable.combineLatest overflow bug on Android

RxRingBuffer size is not a constant and on Android is
less then 128 (16). So it causing silent issues when
there were given 16 < Observers < 128.Merge pull request #2938 from jacek-marchwicki/combine-last-overflow

Fixed Observable.combineLatest overflow bug on AndroidFixes another race between terminalEvent and the queue being empty.Merge pull request #2939 from akarnokd/OperatorPublishFix0508

publish: Fix another race between terminalEvent and the queue being empty.Remove unnecessary localHasValue check

Due to !hasValue check localHasValue field is always trueMerge pull request #2940 from tomrozb/localHasValue-always-true

Remove unnecessary localHasValue checkfix OperatorObserveOn race condition where onComplete could be emitted despite onError being calleduse new pollQueue from @akarnokddon't reduce requested by produced if requested is Long.MAX_VALUEMerge pull request #2937 from davidmoten/findbugs

Add code quality plugins to build.gradle (jacoco, findbugs)Merge pull request #2929 from davidmoten/observe-on-race

OperatorObserveOn onComplete can be emitted despite onError being calledMerge pull request #2907 from akarnokd/SchedulerFromFix

Fixed schedule race and task retention with ExecutorScheduler.Merge pull request #2872 from rspieldenner/sonatype_sync

Use the correct accounts for sonatype syncMerge pull request #2871 from davidmoten/explicit-version

Use explicit versioning for gradle-rxjava-project-pluginMerge pull request #2923 from akarnokd/OnBackpressureLatest

OnBackpressureLatest: Non-blocking version of the toBlocking().latest() operator.More assertions for TestSubscriberremove findbugs and jacoco because are run with default build, will figure out laterMerge pull request #2949 from davidmoten/jacoco-disable

Remove findbugs+jacoco from build.gradleJavadocs: adding marble diagram, return value for onBackpressureLatestadd request overflow checks and prevent Long.MAX_VALUE requests being decremented in OperatorGroupBy, added unit test that failed with previous codeMerge pull request #2950 from davidmoten/group-by-request-overflow

OperatorGroupBy - check for request overflow and don't decrement when at Long.MAX_VALUEOperatorConcat - use BackpressureUtils to prevent request overflow and add n > 0 check to prevent race conditionMerge pull request #2951 from davidmoten/concat-request-overflow

OperatorConcat - prevent request overflow and fix race conditionOperatorObserveOn should not request more after child is unsubscribedMerge pull request #2956 from davidmoten/observe-on-unsub

OperatorObserveOn should not request more after child is unsubscribedStandard producers and some more (platform-safe) queues from JCToolsMerge pull request #2948 from ReactiveX/TestSubscriberPlus

More assertions for TestSubscriberAdded links to the source of the new queue classes.The usual anally-retentive javadoc edits.1.0.11Merge pull request #2963 from ReactiveX/StandardProducers

Set of standard producers and updated queue implementations with someMerge pull request #2966 from ReactiveX/javadocs

The usual anally-retentive javadoc edits.Deprecated onBackpressureBlock.Fixed window(time) to work properly with unsubscription, added
backpressure support to window(size, skip).Deprecate and rename the timer methods that take initial delay and period to interval.fix Amb backpressure problemsadd factory methods to TestSubscriberFixed multiple calls to onStart.Merge pull request #2961 from davidmoten/amb-bug

fix Amb backpressure bugfix OperatorConcat request race conditions with ProducerArbiterMerge pull request #2960 from davidmoten/concat-race

fix OperatorConcat race condition where request lostmake OperatorSerializeTest.testMultiThreadedWithNPEinMiddle fail less oftenMerge pull request #2985 from davidmoten/serialize-fix

improve OperatorSerializeTest.testMultiThreadedWithNPEinMiddleimplement backpressure for OperatorAll and include last value in cause if exception occursMerge pull request #2986 from davidmoten/all-backp

OperatorAll  - implement backpressure and include last value in exception causefix skip race conditions and request overflowMerge pull request #2987 from davidmoten/skip-bug

fix skip() race condition and request overflowadd backpressure support for OperatorAny and include last value in exception causeMerge pull request #2988 from davidmoten/any-backp

Operator exists() - implement backpressure and include last value in exception causeprevent OperatorTake from requesting more than neededMerge pull request #2989 from davidmoten/take-request-bug

prevent take() from requesting more than neededimprove Subscriber readability and don't perform unnecessary test in request methodinclude last value in cause when error occurs in takeUntil(predicate)fix render value in error last cause for primitive typesMerge pull request #2991 from davidmoten/take-until-predicate-last-cause

takeUntil(predicate) - include last value in error causeMerge pull request #2992 from davidmoten/error-cause-primitives

Fix value rendering in error last cause for primitive typesadd value as last cause to error in takeWhile(predicate)Merge pull request #2993 from davidmoten/take-while-cause

takeWhile(predicate) - include last value in error causeadd request overflow checking to OperatorSwitchfix OnSubscribeRedo race conditionsfix request processing in OperatorSwitchIfNextMerge pull request #2996 from davidmoten/switch-if-empty-request-bug

switchIfEmpty - fix backpressure bug and lost requestsFix a wrong assertion in assertErrorMerge pull request #2999 from zsxwing/assert-error

Fix a wrong assertion in assertErrorReplace the Java 7 AssertionError(message, cause) with RuntimeExceptionuse Subscribers.from()Use initCause to initialize AssertionErrorMerge pull request #3000 from zsxwing/java6

Replace the Java 7 AssertionError(message, cause) with RuntimeExceptionMerge pull request #3001 from davidmoten/use-subscribers-from

use Subscribers.from()add two unit tests for issue #3008ensure iterator.hasNext is not called unnecessarily as per #3006Merge pull request #3009 from davidmoten/from-iter-bug

Observable.from(iterable) - ensure it.hasNext() is not called unnecessarily #30061.0.12Merge pull request #2990 from davidmoten/subscriber-readability

Improve Subscriber readabilityrx.Single

Adds `rx.Single` as an "Observable Future" for representing work with a single return value.

See https://github.com/ReactiveX/RxJava/issues/1594 rx.Future/Task/Async/Single

This provides a type similar to `Future` in that it represents a scalar unit of work, but it is lazy like an `Observable` and many `Single`s can be combined into an `Observable` stream. Note how `Single.zip` returns `Single<R>` whereas `Single.merge` returns `Observable<R>`.

Examples of using this class:

```java
import rx.Observable;
import rx.Single;

public class TaskExamples {

    public static void main(String... args) {
        // scalar synchronous value
        Single<String> t1 = Single.create(t -> {
            t.onSuccess("Hello World!");
        });

        // scalar synchronous value using helper method
        Single<Integer> t2 = Single.just(1);

        // synchronous error
        Single<String> error = Single.create(t -> {
            t.onError(new RuntimeException("failed!"));
        });

        // executing
        t1.subscribe(System.out::println);
        t2.subscribe(System.out::println);
        error.subscribe(System.out::println, e -> System.out.println(e.getMessage()));

        // scalar Singles for request/response like a Future
        getData(1).subscribe(System.out::println);

        // combining Tasks into another Task
        Single<String> zipped = Single.zip(t1, t2, (a, b) -> a + " -- " + b);

        // combining Singles into an Observable stream
        Observable<String> merged = Single.merge(t1, t2.map(String::valueOf), getData(3));
        Observable<String> mergeWith = t1.mergeWith(t2.map(String::valueOf));

        zipped.subscribe(v -> System.out.println("zipped => " + v));
        merged.subscribe(v -> System.out.println("merged => " + v));
        mergeWith.subscribe(v -> System.out.println("mergeWith => " + v));
    }

    /**
     * Example of an async scalar execution using Single.create
     * <p>
     * This shows the lazy, idiomatic approach for Rx exactly like an Observable except scalar.
     *
     * @param arg
     * @return
     */
    public static Single<String> getData(int arg) {
        return Single.create(s -> {
            new Thread(() -> {
                try {
                    Thread.sleep(500);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                // deliver value
                    s.onSuccess("Data=" + arg);
                }).start();
        });
    }

}
```Merge pull request #3012 from benjchristensen/single-type

rx.Singlefix awaitTerminalEventAndUnsubscribeOnTimeoutAdd marble diagrams for Single operators.Javadoc improvements.A handful more javadoc changes (misnamed @params and such)Merge pull request #3019 from ReactiveX/PLP

Javadoc improvements for new Single classMerge pull request #2983 from akarnokd/MultiOnStartFix

Fixed multiple calls to onStart.Merge pull request #3018 from davidmoten/ts-await-bug

TestSubscriber - fix awaitTerminalEventAndUnsubscribeOnTimeoutMerge pull request #2972 from akarnokd/WindowUnsubscribeToComplete

Fixed window(time) to work properly with unsubscription, addedMerge pull request #2970 from akarnokd/BackpressureBlockDeprecated

Deprecated onBackpressureBlockMerge pull request #2975 from abersnaze/interval

Deprecate and rename two timer overloads to intervalMerge pull request #2982 from davidmoten/test-sub-factory-methods

TestSubscriber - add factory methodscache now supports backpressureMerge pull request #2995 from davidmoten/switch-overflow

switchOnNext - ensure initial requests additive and fix request overflowMerge pull request #2969 from akarnokd/OperatorCacheRewrite2

Operator cache() now supports backpressureMerge pull request #2997 from davidmoten/redo-fix-2

Fix retry() race conditionsConnectableObservable autoConnect operatorIf cache() now supports backpressure, correct javadocs to indicate this.Delay: error cut ahead was not properly serializedReplaced tabs with spaces for good.Merge pull request #3029 from akarnokd/TabsReplacedWithSpaces

Replaced tabs with spaces for good.Fix OperatorFlatMapPerf.flatMapIntPassthruAsync Perf Test

This test was reported broken in https://github.com/ReactiveX/RxJava/pull/2928#issuecomment-113229698

Fixing by adding the use of LatchedObserver.

Previously broken test results:

```
r.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1  thrpt         5   363615.622   115041.519    ops/s
r.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000  thrpt         5      350.204      125.773    ops/s
r.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000  thrpt         5        0.319        0.184    ops/s
```

Fixed results:

```
r.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1  thrpt         5   102109.681     8709.920    ops/s
r.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000  thrpt         5      403.071      130.651    ops/s
r.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000  thrpt         5        0.355        0.070    ops/s
```Merge pull request #3031 from benjchristensen/fix-flatMapIntPassthruAsync

Fix OperatorFlatMapPerf.flatMapIntPassthruAsync Perf TesttakeLast javadoc fixes, standardize on parameter names (count instead of num), improve message in OperatorTakeLast exceptioninstantiate EMPTY lazilyMerge pull request #3034 from davidmoten/empty-2

Instantiate EMPTY lazilyWindow with boundary observable: fixed unsubscription and behavior.Merge pull request #3033 from davidmoten/take-last-javadoc

takeLast() javadoc fixes, standardize parameter names (count instead of num)Merge pull request #3028 from akarnokd/DelayErrorCutaheadFix

Delay: error cut ahead was not properly serializedTestSubscriber javadoc improvementsadd backpressure support for defaultIfEmpty()Merge pull request #3043 from davidmoten/test-subscriber-javadoc

TestSubscriber javadoc cleanupMerge pull request #3042 from davidmoten/default-if-empty-backp-2

add backpressure support for defaultIfEmpty()ElementAt request management enhancedOperator replay() now supports backpressureNo need to allocate a new head node.CompositeException extra NPE protectionReduce test failure likelihood of testMultiThreadedWithNPEinMiddleMerge pull request #3052 from akarnokd/FixSerializedObserverTest

Reduce test failure likelihood of testMultiThreadedWithNPEinMiddlesingle: add toSingle method to Observable

* closes ReactiveX/RxJava#3038
* this method allows an observable which is guaranteed to return exactly one
  item to be converted to a Single
* NOTE: the semantics of this function are very similar to that of single
* i.e. errors are passed through, more than one item results in an
  IllegalArgumentException, completion without emission results in a
  NoSuchElementException and exactly one item is passed through the onSuccess
  method of SingleSubscriberMerge pull request #3049 from tilal6991/1.x

single: add toSingle method to ObservabletoSingle should use unsafeSubscribeadd and improve javadoc in SubscriberImprove toSingle() javadoc (diagram, see also, since-annotation)Merge pull request #3069 from ReactiveX/PLP

Improve toSingle() javadoc (diagram, see also, since-annotation)add Subscribers.wrapOperatorSwitch - fix lost requests race condition using ProducerArbiterMerge pull request #3065 from davidmoten/subscribers-wrap

add Subscribers.wrapMerge pull request #3058 from davidmoten/subscriber-javadoc

add and improve javadoc in SubscriberMerge pull request #3055 from davidmoten/single-subscribe-fix

toSingle() should use unsafeSubscribeMerge pull request #3048 from akarnokd/CompositeExceptionNull

CompositeException extra NPE protectionMerge pull request #3047 from akarnokd/OperatorReplayBackpressure

Operator replay() now supports backpressureMerge pull request #3045 from akarnokd/ElementAtImprovement

ElementAt request management enhancedMerge pull request #3039 from akarnokd/WindowFuncFix

Window with Observable: fixed unsubscription and behaviorMerge pull request #3023 from akarnokd/AutoConnect

ConnectableObservable autoConnect operatorMerge fully rewritten and other related optimizationsMerge pull request #2928 from akarnokd/OperatorMergeFullRewrite

Merge and MergeMaxConcurrent unified and rewrittenBinary examples including SNAPSHOTAdd "since" annotations to javadocs for new Experimental/Beta methodsfix forEach javadocbreak tests as approach timeout so that don't fail on slow machinesreduce probability of ExecutorSchedulerTest.testOnBackpressureDrop failing on slow machineRevert "No need to allocate a new head node."

This reverts commit 46f9138f509f22be61d435cfb79335396fc92c48.Revert "Operator replay() now supports backpressure"

This reverts commit 82d7b9cca2efd0a8f36ec3b700bb8f34c445a093.Revert "If cache() now supports backpressure, correct javadocs to indicate this."

This reverts commit ec3d522c826c3135b9f5e3a9bb34f62756ec95cc.Revert "cache now supports backpressure"

This reverts commit 18ff5afd380625f9157d9e9a3144baf845c09086.Merge pull request #3081 from abersnaze/cache-rollback

Revert of cache/replayFix autoConnect calling onStart twice.Private toObservable renamed to asObservable

- Making room for the public toObservable method.Single.toObservableMerge pull request #3091 from akarnokd/AutoConnectFix

Fix autoConnect calling onStart twice.Merge pull request #3092 from benjchristensen/single-toObservable

Single.toObservable1.0.13Fix request != 0 checking in the scalar paths of merge()Merge pull request #3093 from akarnokd/MergeAsyncTest

Fix request != 0 checking in the scalar paths of merge()Merge remote-tracking branch 'origin/1.x' into PLPwindow() behavior changed, so did marble diagram & thus its sizeMerge pull request #3086 from davidmoten/exec-sched-test-timing

improve ExecutorSchedulerTest.testOnBackpressureDropMerge pull request #3085 from davidmoten/on-drop-test-fix

break tests as approach timeout so that don't fail on slow machinesMerge pull request #3079 from davidmoten/foreach-javadoc

fix forEach javadocMerge pull request #3077 from ReactiveX/PLP

Add "since" annotations to javadocs for new Experimental/Beta methodsfix SynchronizedQueue.equalsFix take swallowing exception if thrown by the exactly the nth onNext
call to it.remove OperatorOnErrorFlatMap because unusedMerge pull request #3108 from davidmoten/remove-operator-on-error-flatmap

remove OperatorOnErrorFlatMap because unusedUnit tests and cleanup of JCTools' queues.Merge pull request #3109 from akarnokd/InternalUtilAtomicTests

Unit tests and cleanup of JCTools' queues.Merge pull request #3101 from akarnokd/TakeErrorHandlingFix

Fix take swallowing exception if thrown by exactly the nth onNext call to it.add backpressure to OperatorMaterializeTest coverage of rx.functions utility methods.Merge pull request #3110 from akarnokd/TestCoverageFunctions

Test coverage of rx.functions utility methods.cache() now supports backpressure (again)Operator replay() now supports backpressure (again)Movet LinkedArrayListTest to the test section.Merge pull request #3116 from akarnokd/OperatorCacheRewrite4

cache() now supports backpressure (again)Merge pull request #3117 from akarnokd/OperatorReplayRewrite4

Operator replay() now supports backpressure (again)Test coverage for the observers package.No InterruptedException with synchronous BlockingObservableRemove redundant type parameter in EmptyActionMerge pull request #3120 from ypresto/no-interrupt-for-sync

No InterruptedException with synchronous BlockingObservableImprove performance of NewThreadWorker.tryEnableCancelPolicy().
Disable search for ScheduledExecutorService.setRemoveOnCancelPolicy() on Android API < 21Merge pull request #3121 from artem-zinnatullin/android-setRemoveOnCancelPolicy

Improve performance of NewThreadWorker, disable search for setRemoveOnCancelPolicy() on Android API < 21Fix retry with predicate ignoring backpressure.Merge pull request #3129 from akarnokd/RetryPredicateFix

Fix retry with predicate ignoring backpressure.Merge pull request #3103 from davidmoten/materialize-backp

materialize() - add backpressure supportAdd links to page that explains The Observable ContractImplemented Observable.x(ConversionFunc) to allow external extensions to Observables.Merge pull request #3082 from stealthcode/conversion

Observable.x(ConversionFunc) to allow extensions to Observableseliminate javadoc compiler warnings, add "since" stubFromIterable overhead reduction.Correct scheduler memory leak test for from(Executor) and added check
for periodic tasks retention as well.Merge pull request #3141 from akarnokd/SchedulerLeakCheck

Improved Scheduler.Worker memory leak detectionFix for BackpressureUtils method javadocRemove redundant cast in ExceptionsRemove unnecessary static modifierRange overhead reductionMerge pull request #3143 from artem-zinnatullin/backpressure-utils-javadoc-fix

Fix for BackpressureUtils method javadocMerge pull request #3144 from artem-zinnatullin/remove-redundant-cast-in-exceptions

Remove redundant cast in ExceptionsMerge pull request #3147 from artem-zinnatullin/unnecessary-static-modifier

Remove unnecessary static modifierMerge pull request #3104 from davidmoten/synchronized-queue-equals

Fix SynchronizedQueue.equalsMerge pull request #3123 from jacek-rzrz/1.x

Remove redundant type parameter in EmptyActionMerge pull request #3112 from akarnokd/TestCoverageObservers

Observers package test coverage and fixes.Merge pull request #3078 from davidmoten/switch-fix

switchOnNext() - fix lost requests race conditionMerge pull request #3137 from akarnokd/FromIterablePerf

FromIterable overhead reduction.Merge pull request #3138 from akarnokd/RangePerf

Range overhead reduction.Remove redundant final modifier from static method in ActionsMerge pull request #3142 from artem-zinnatullin/actions-redundant-final

Remove redundant final modifier from static method in ActionsVersion 1.0.142.x Initialization

- clearing out rx.* packages to start building 2.x in io.reactivex
- starting fresh since the fundamental design will change to adopt ReactiveStreams interfaces and require touching virtually every fileTravis 2.x BranchClear for 2.xJava 8Java 82.0.0-DP0-SNAPSHOT

Trying to make the build pick up this version for snapshots on the 2.x branch.2.0.0-DP0

Override inferred version.Update gradle.propertiesRS dependency, some basic Observable/Observer methods.Javac workaround.Some safe queue implementationsMerge pull request #3175 from akarnokd/InternalInfrastructure

2.x: Some safe queue implementationsMerge pull request #3172 from akarnokd/RsDependency

RS dependency, some basic Observable/Observer methods.PublishSubject, AsyncSubject and a few helper classesMerge pull request #3185 from akarnokd/PublishSubject2x

PublishSubject, AsyncSubject and a few helper classesDisposable interface and a bunch of general resource containers.Merge pull request #3186 from akarnokd/InternalDisposables

Disposable interface and a bunch of general resource containers.Schedulers (a few) + API, slight modifications to other classes,
incomplete.Merge pull request #3188 from akarnokd/SchedulersBaseAPI

Schedulers (a few) + API, slight modifications to other classes,Added a bunch of basic event sources and helper Subscription
implementations.Merge pull request #3189 from akarnokd/BasicPublisherSources

Added a bunch of basic event sources and helper SubscriptionBasic Subscribers and RxJavaPluginMerge pull request #3190 from akarnokd/BasicSubscribers

Basic Subscribers and plugin classOperators map and flatMapMerge pull request #3191 from akarnokd/OperatorFlatMap2x

Operators map and flatMapConnectableObservable and autoConnectMerge pull request #3193 from akarnokd/ConnectableObservable2x

ConnectableObservable and autoConnectOperators of take (untimed), plugin error reporting fix for other
operatorsMerge pull request #3194 from akarnokd/OperatorTake2x

Operators of take (untimed), plugin error reporting fix for otherOperators of skip (untimed), filter; fix to takeUntilMerge pull request #3195 from akarnokd/OperatorSkip2x

Operators of skip (untimed), filter; fix to takeUntilThe skips and filter operators added to ObservableMerge pull request #3196 from akarnokd/OperatorSkip2xMethods

The skips and filter operators added to ObservableOperator toList and toSortedListMerge pull request #3197 from akarnokd/OperatorToList2x

Operator toList and toSortedListOperators publish, replay and cache.Workaround for another javac 1.8 bug.Merge pull request #3198 from akarnokd/OperatorsPublishReplay

Operators publish, replay and cache.Operators all, any, count, elementAt, singleMerge pull request #3199 from akarnokd/OperatorsAnyAllCount2x

Operators all, any, count, elementAt, singleAll standard schedulers ported and cleaned up.Merge pull request #3200 from akarnokd/SchedulersRest2x

All standard schedulers ported and cleaned up.Operators observeOn, subscribeOn and unsubscribeOnMerge pull request #3202 from akarnokd/ScheduleOn2x

Operators observeOn, subscribeOn and unsubscribeOnOperator concatMap and related convenience methodsMerge pull request #3204 from akarnokd/OperatorConcatMap2x

Operator concatMap and related convenience methodsLambda-based subscription and lifecycle tracking methodsMerge pull request #3205 from akarnokd/LambdaSubscribe2x

Lambda-based subscribe and lifecycle tracking methodsTestSubscriber implementedMerge pull request #3206 from akarnokd/TestSubscriber2x

TestSubscriber implementedSome Repeat + Retry methods, fix to SubscriptionArbiter.Merge pull request #3207 from akarnokd/OperatorRepeat2xPart1

Some Repeat + Retry methods, fix to SubscriptionArbiter.Operators interval and intervalRangeMerge pull request #3208 from akarnokd/IntervalSource2x

Operators interval and intervalRangeOperators onBackpressure(Drop|Buffer|Latest)Merge pull request #3209 from akarnokd/OperatorOnBackpressure2x

Operators onBackpressure(Drop|Buffer|Latest)Operator groupBy.Merge pull request #3212 from akarnokd/OperatorGroupBy2x

Operator groupByOperator zip plus Function3..Function9.Merge pull request #3215 from akarnokd/OperatorZip2x

Operator zip plus Function3..Function9.Strenghtening flatMap against misbehaving sources, TestSubscriber +
methodsMerge pull request #3220 from akarnokd/FixesForReactiveSocket2x

Strenghtening flatMap against misbehaving sources, TestSubscriber +Operator WithLatestFrom, PublishLift to help with operator fusing,
SubscriptionHelper for common validation logic.Merge pull request #3222 from akarnokd/WithLatestFrom2x

Operator WithLatestFrom, PublishLift to help with operator fusing,Fixes to classes, convenience operators mostly.Merge pull request #3223 from akarnokd/OperatorPack2x1

Fixes to classes, convenience operators mostly.Operator distinct, timeInterval, common Timed container.Merge pull request #3224 from akarnokd/OperatorDistinct2x

Operator distinct, timeInterval, common Timed container.Operations doOnX.Merge pull request #3225 from akarnokd/OperatorDoOn2x

Operations doOnX.Operator collect, toMap and toMultimap based on it.Merge pull request #3226 from akarnokd/OperatorCollect2x

Operator collect, toMap and toMultimap based on it.collect: javac is unable to select the right overload for some reasonMerge pull request #3227 from akarnokd/Collect2xJavacWorkaround

collect: javac is unable to select the right overload for some reasonConditionalSubscriber to help fusing filter-like operators into
emission/drain loops.Merge pull request #3228 from akarnokd/ConditionalSubscriber2x

ConditionalSubscriber to help fusing filter-like operators intoOperator sample with time or with another publisherMerge pull request #3229 from akarnokd/OperatorSample2x

Operator sample with time or with another publisherOperato switchIfEmpty, defaultIfEmptyMerge pull request #3230 from akarnokd/OperatorSwitchIfEmpty2x

Operato switchIfEmpty, defaultIfEmptyOperator fromFuture with plain future, blocking by nature.Operator takeLast time + size, skipLast timeMerge pull request #3231 from akarnokd/OperatorTimedLastSkipTake2x

Operator takeLast time + size, skipLast timeOperators first, last, multi-offer for SpscLinkedArrayQueueMerge pull request #3232 from akarnokd/OperatorFirstLast2x

Operators first, last, multi-offer for SpscLinkedArrayQueueOperator switchMap, switchOnNext, added missing merge and concat
overloads, some refactoringsMerge pull request #3234 from akarnokd/OperatorSwitchMap2x

Operator switchMap, switchOnNext, added missing merge and concatOperatorSwitchMap accidental main method.Operator amb, ambWithMerge pull request #3235 from akarnokd/OperatorAmb2x

Operator amb, ambWithOperators onErrorReturn, onErrorResumeNext, onExceptionResumeNextMerge pull request #3237 from akarnokd/OperatorOnErrorNext

Operators onErrorReturn, onErrorResumeNext, onExceptionResumeNextOperator retryWhen, repeatWhen; NotificationMerge pull request #3238 from akarnokd/OperatorRedo

Operator retryWhen, repeatWhen; NotificationOperator takeWhileTakeWhile: forgot to push new class.Merge pull request #3239 from akarnokd/OperatorTakeWhile2x

Operator takeWhileOperator sequenceEqualMerge pull request #3240 from akarnokd/OperatorSequenceEquals2x

Operator sequenceEqualOperator combineLatestMerge pull request #3241 from akarnokd/PublisherCombineLatest2x

Operator combineLatestOperator using, some inernal refactorings.Merge pull request #3242 from akarnokd/OperatorUsing2x

Operator using, some internal refactorings.Operator materialize, dematerialize, minor notification fix.Merge pull request #3243 from akarnokd/OperatorMaterialize2x

Operator materialize, dematerialize, minor notification fix.Operators delay, delaySubscription, share.Merge pull request #3244 from akarnokd/OperatorsDerivedPack2x

Operators delay, delaySubscription, share.BlockingObservable, next, latest, mostRecent, first, last, single,
subscribe, stream, forEach, iteratorMerge pull request #3245 from akarnokd/BlockingObservablePart2x

BlockingObservable, next, latest, mostRecent, first, last, single,Operator refCountMerge pull request #3246 from akarnokd/OperatorRefCount2x

Operator refCountUnicastSubject, onBackpressureBuffer-like behavior for a single
subscriber onlyMerge pull request #3247 from akarnokd/UnicastSubject2x

UnicastSubject, onBackpressureBuffer-like behavior for a singleOperators buffer: size, time, size + timeMerge pull request #3248 from akarnokd/OperatorBuffer2x

Operators buffer: size, time, size + timeOperator buffer with boundary and open-close, fixes to the timed
variants. 

Added QueueDrain and QueueDrainSubscriber for common queue-drain
operations. Not applied outside the buffer()s as of now.Merge pull request #3250 from akarnokd/OperatorBufferWithPublisher2x

Operator buffer with boundary and open-close, fixes to the timedWindow with count, count + skip.

Luckily, there is no need to count the emission per subject but just use
arithmetic.Merge pull request #3251 from akarnokd/OperatorWindowSized2x

Window with count, count + skip.Operator window timespan, timespan + count, timespan + timeskip

The timed buffer and window operators are quite complicated in terms of
concurrency. I'm not sure if all corner cases are covered.Merge pull request #3253 from akarnokd/OperatorWindowTimed2x

Operator window timespan, timespan + count, timespan + timeskipOperator debounce (time, selector), throttleWithTimeout (alias)Merge pull request #3254 from akarnokd/OperatorDebounce2x

Operator debounce (time, selector), throttleWithTimeout (alias)Operator scan, reduce. Fixes to TestSubscriber async behavior.Merge pull request #3255 from akarnokd/OperatorScan

Operator scan, reduce. Fixes to TestSubscriber async behavior.Fixed debounce behavior, added throttleFirst, throttleLast aliasMerge pull request #3256 from akarnokd/OperatorDebounceFix2x

Fixed debounce behavior, added throttleFirst, throttleLast aliasOperator timeout, onBackpressureBuffer(onOverflow), fixes to parameter
types.

+ FullArbiter and FullArbiterSubscriber to work with total-ordered
notifications across sources.Merge pull request #3257 from akarnokd/OperatorTimeout2x

Operator timeout, onBackpressureBuffer(onOverflow), fixes to parameterReplaySubject

Has full backpressure support (replays as many elements as requested).Merge pull request #3258 from akarnokd/ReplaySubject2x

ReplaySubjectRxJavaPlugins extended with handler registration and reset supportMerge pull request #3259 from akarnokd/RxJavaPlugins2x

RxJavaPlugins extended with handler registration and reset supportBehaviorSubjectMerge pull request #3260 from akarnokd/BehaviorSubject2x

BehaviorSubjectFixes to ReplaySubject and BehaviorSubject.Merge pull request #3261 from akarnokd/SubjectFixes0901

Fixes to ReplaySubject and BehaviorSubject.Operator window with boundary (exact, selector, exact + supplier).

I'm not 100% certain about the state management: when to let the main
source keep running and when to stop. I.e., the in the selector version,
if the other completes, it means no new window will be opened but the
active should keep receiving values until their closer fires. If all
such closers have fired, the main can be stopped.Merge pull request #3262 from akarnokd/WindowBoundary2x

Operator window with boundary (exact, selector, exact + supplier).Subjects onNext and onError null safetyMerge pull request #3263 from akarnokd/SubjectNullSafe2x

Subjects onNext and onError null safetyAsyncObserver

It is meant to be somewhat a replacement for 1.x rx.Subscriber, but it
doesn't support Subscriber chaining.

I call it Observer because one only needs to implement onNext, onError
and onComplete as with rx.ObserverMerge pull request #3264 from akarnokd/AsyncObserver2x

AsyncObserverRxJavaPlugins performance enabling fix & lockdown.

By using null checks and direct returns we can avoid a dynamic dispatch
on a volatile variable which always more expensive.

I've also added the `lockdown()` method to prevent any further changing
of the plugin handlers. There is a `unlock` package-private method to
allow testing the plugin in the locked state and then return to the
unlocked state as other tests may want to install custom plugins.Merge pull request #3265 from akarnokd/RxJavaPluginsPerfFix

RxJavaPlugins performance enabling fix & lockdown.Forgot static modifier on unlock in Plugins.Operator generate: create an observable that generates values by calling 

a function and handling backpressure/resource cleanup automatically.

The logic is based on @stealthcode 's SyncSubscriber proposal from 1.x
but using only the lambda-form.Merge pull request #3267 from akarnokd/OperatorGenerate2x

Operator generate: create an observable that generates values by callingForgot the parameter null check.generate: don't wrap the counter when cancelling a max value.2.x: Added plugin handler for creating and receiving the new thread
scheduler.Standard disposables, changes to resource containers to support them.Merge pull request #3268 from akarnokd/Disposables2x

Standard disposables, changes to resource containers to support them.UnicastSubject javadoc, support for onCancelled notification.


The cancellation notification will come in handy with window (and in
groupby). It helps with the case when the main source has been cancelled
but the individual windows/groups are still being consumed. If those get
cancelled by their single Subscribers, this notification will reach the
source and once all windows/groups get cancelled, the main source can be
cancelled.

Fix to generator production accounting.Merge pull request #3270 from akarnokd/UnicastSubjectExpansion2x

UnicastSubject javadoc, support for onCancelled notification.First unit test and fixes to operators.Merge pull request #3271 from akarnokd/UnitTestsPreparation

First unit test and fixes to operators.Fix attempt to the firehose test.Sleeping instead of computational waiting.Merge pull request #3273 from akarnokd/FirehoseTestFixAttempt2x

Fix attempt to the firehose test.Simplest combineLatest tests and fix to groupBy.


Forgot to deliver the value inside the GroupedUnicast drain loop.Merge pull request #3275 from akarnokd/CombineLatestTest2x

Simplest combineLatest tests and fix to groupBy.Simplest concat test from 1.x

I've also added convenience overloads to concat 2-9 sources because
`concat(Publisher...)` causes overload resolution conflict with
`concat(Publisher<Publisher>)`Merge pull request #3276 from akarnokd/ConcatTests2x

Simplest concat test from 1.xErrorHandlingTests and EventStream

I've changed them to use `safeSubscribe` because plain RS subscribers
are not expected to throw.Merge pull request #3277 from akarnokd/ErrorHandlingTests2x

ErrorHandlingTests and EventStreamSimplest tests of groupBy, merge and NotificationMerge pull request #3278 from akarnokd/GroupByMergeNotificationTest2x

Simplest tests of groupBy, merge and NotificationConversionTest and DonTestMerge pull request #3279 from akarnokd/TestsToDoOnObservable2x

ConversionTest and DoOnTestObservableTests and bugfixes.Added missing header and fixed javadoc linkMerge pull request #3280 from akarnokd/ObservableTests2x

ObservableTests and bugfixes.Simpler tests for window reduce, scan, starWith.Merge pull request #3282 from akarnokd/WindowReduceTests2x

Simpler tests for window reduce, scan, starWith.SubscriberTests port from 1.xMerge pull request #3283 from akarnokd/SubscriberTest2x

SubscriberTests port from 1.xSimpler tests of throttleLast, throttleWithTimeout, zipMerge pull request #3284 from akarnokd/ThrottleZipTests2x

Simpler tests of throttleLast, throttleWithTimeout, zipMissed a return in case of a null value.BlockingObservable.toFuture cancel races with onSubscribe.Fixes to MpscLinkedQueue, some minor refactorings.Unit test for Blocking operators.Merge pull request #3292 from akarnokd/OperatorTests2xPart1

Unit test for Blocking operators.Test some UnicastSubject, cache, NotificationLite, amb

+ bugfix to cache, skipUntil and takeUnitMerge pull request #3293 from akarnokd/OperatorTests2xPart2

Test some UnicastSubject, cache, NotificationLite, ambMore tests and bugfixes to operators.Merge pull request #3294 from akarnokd/OperatorTests2xPart3

More tests and bugfixes to operators.2.x: unit tests and fixes for fromIterable and rangeMerge pull request #3297 from akarnokd/OperatorFromIterableRange2x

2.x: unit tests and fixes for fromIterable and range2.x: tests for refCount and timer, fixes to flatMap and publish, rangeMerge pull request #3298 from akarnokd/OperatorsTestsRefCountTimer2x

2.x: tests for refCount and timer, fixes to flatMap, publish and range2.x: test for toFuture and using, changes according to the test
expectations

Some tests are now skipped due to being invalid in RS.Merge pull request #3299 from akarnokd/OperatorTestsToFutureUsing2x

2.x: test for toFuture and using, changes according to the test2.x: test for operators all, any, asObservable, fixes to all and anyMerge pull request #3300 from akarnokd/OperatorTestsAllAnyAsObservable

2.x: test for operators all, any, asObservable, fixes to all and any2.x: test for buffer, I'm still missing the boundary-supplier versionMerge pull request #3301 from akarnokd/OperatorBufferTest2x

2.x: test for buffer, I'm still missing the boundary-supplier version2.x: added missing buffer overload (with boundary selector)

+ added AsyncSubscription that allows setting the actual subscription
later and can hold a resource. It has less overhead than
SubscriptionArbiter due to single use.Fixed fromFuture, added headersMerge pull request #3303 from akarnokd/AsyncSubscription2x

2.x: added missing buffer overload (with boundary selector)2.x: classes Single and NbpObservable

`Single` is a deferred single-value emitting Observable.

`NbpObservable` is the non-backpressure Observable, named this way until
the main Observable gets all its tests ported so a refactor can deal
with all of them.

I've implemented the most basic construction and operator methods on
them.Merge pull request #3305 from akarnokd/SingleAndNonBackpressured2x

2.x: classes Single and NbpObservable2.x: operators cast and concat tests

The concat reuses the same inner subscriber to save on its allocation
cost which works only if the inner source conforms with the spec and
doesn't emit any event after an onComplete(). There is a test that
explicitly calls onComplete() twice to test the resilience of concat.
The current workaround makes this test pass but any async non-conforming
source may still bug out the operator. 

This is a tradeoff between safety and performance. If we'd expect such
non-conforming behavior, the current optimization has to be turned into
a regular individually allocated inner subscribers.Merge pull request #3306 from akarnokd/OperatorTestsCastConcat2x

2.x: operators cast and concat tests2.x: Operator debounce and defaultIfEmpty, fix to debounce behaviorMerge pull request #3307 from akarnokd/OperatorTestDebounceDefaultIfEmpty2x

2.x: Operator debounce and defaultIfEmpty, fix to debounce behavior2.x: operator test delay, dematerializeMerge pull request #3308 from akarnokd/OperatorTestsDelayDematerialize

2.x: operator test delay, dematerialize2.x: operator test distinct, distinctUntilChanged and doOnEach


Note: several tests have been ignored due to non-conformance with RSMerge pull request #3309 from akarnokd/OperatorTestDistinctEach

2.x: operator test distinct, distinctUntilChanged and doOnEach2.x: operator test doOn(Request|Subscribe|Unsubscribe).Merge pull request #3310 from akarnokd/OperatorTestDoOn2x

2.x: operator test doOn(Request|Subscribe|Unsubscribe).2.x: operator test elementAt, filter, finally, firstMerge pull request #3311 from akarnokd/OperatorTestElementAtFilterFinally2x

2.x: operator test elementAt, filter, finally, first2.x: operator test flatMap, merge, mergeDelayError

+ added operator flatMap of notifications, fixed a bug in
onBackpressureBufferMerge pull request #3312 from akarnokd/OperatorTestFlatMap2x

2.x: operator test flatMap, merge, mergeDelayError2.x: operator test for groupBy; fix to groupBy and type argument swap
for GroupedObservable

+ added BooleanSubscription to detect cancellation without caring about
requests.

I'm still not 100% convinced the groupBy request coordination works
properly (i.e., no stall due lack of requests from one of the groups).Merge pull request #3313 from akarnokd/OperatorTestGroupBy2x

2.x: operator test for groupBy; fix to groupBy and type argument swap2.x: operator test ignoreElements, last, mapNotificationMerge pull request #3314 from akarnokd/OperatorTestIgnoreLastMapNotif2x

2.x: operator test ignoreElements, last, mapNotification2.x: operator test map, materialize

  - OperatorMulticastTest is empty because it is not supported
  - Fixed headers
  - increased wating time in RefCount test
testConnectUnsubscriberRaceCondition
  - fixed bugs in toFuture, materialize2.x: operator test observeOn and related bugfixesMerge pull request #3315 from akarnokd/OperatorTestObserveOn2x

2.x: operator test observeOn2.x: operator test onBackpressure(Buffer|Drop|Latest) and their bugfixMerge pull request #3316 from akarnokd/OperatorTestOnBackpressure2x

2.x: operator test onBackpressure(Buffer|Drop|Latest) and their bugfix2.x: operator test onError and onException, relevant bugfixesMerge pull request #3317 from akarnokd/OperatorTestOnError2x

2.x: operator test onError and onException, relevant bugfixes2.x: operator tests: publish, reduce, repeat + fixes

+ added toSingle and toNbpObservable to Observable
+ fixed bugs in many operators and in the IO scheduler's release logicMerge pull request #3318 from akarnokd/OperatorTestPublishReduceRepeat2x

2.x: operator tests: publish, reduce, repeat + fixes2.x: operator test for replay

Note that testIssue_2191_SchedulerUnsubscribe had to change the call
count to pass. I don't understand this test and the over-mocking (but
recognize the style).Merge pull request #3319 from akarnokd/OperatorTestReplay2x

2.x: operator test for replay2.x: operator test: retry, retryWhen

+ retry with bipredicate
+ fixed map not checking the returned value for null
+ since RS doesn't allow throwing other than NPE, temporarily subscribe
and lift will throw NPE with the actual error as cause so we don't miss
an operator bug due to swallowed exceptions.Merge pull request #3320 from akarnokd/OperatorTestRetry2x

2.x: operator test: retry, retryWhen2.x: operator tests: sample, scan and sequenceEqual + their bugfixesMerge pull request #3321 from akarnokd/OperatorTestSampleScanEquals

2.x: operator tests: sample, scan and sequenceEqual + their bugfixes2.x: operator test: serialize, single + SerializedSubscriber fixMerge pull request #3322 from akarnokd/OperatorTestSerializeSingle2x

2.x: operator test: serialize, single + SerializedSubscriber fix2.x: operator test: skip variants and bugfix

Note that since we know have time unit in schedulers, one must be
careful with the time unit of the timed skip operators. The timestamps
will be calculated via this unit and may not return the expected values. 

For example, a skipLast of 1 second will not skip the value 0.5 seconds
before completion because its timestamp is rounded down to the start of
the second. But if one uses 1000 milliseconds, the value will be
skipped.Merge pull request #3323 from akarnokd/OperatorTestSkip2x

2.x: operator test: skip variants and bugfix2.x: operator test: switchIfEmpty, switchMap + bugfixesMerge pull request #3324 from akarnokd/OperatorsTestSubscribeOnSwitch2x

2.x: operator test: switchIfEmpty, switchMap + bugfixes2.x: operator tests: take family + fixesMerge pull request #3325 from akarnokd/OperatorTestsTake2x

2.x: operator tests: take family + fixes2.x: operator throttleFirst, timeInterval and timeout + bugfixesMerge pull request #3326 from akarnokd/OperatorTestsThrottleFirstTimeIntervalTimeout2x

2.x: operator throttleFirst, timeInterval and timeout + bugfixes2.x: operator tests: timestamp, toMap, toMultiMap, toList, toSortedListWorkaround for javac, added missing headers.Merge pull request #3327 from akarnokd/OperatorTestsPack2x

2.x: operator tests: timestamp, toMap, toMultiMap, toList, toSortedList2.x: operator tests unsubscribeOn, withLatestFrom, zip (partial)

+ fixed cancellation behavior of observeOn, subscribeOn and
unsubscribeOn (when and what to call cancel on)
+ fixed infinite loop in ScheduledRunnable
+ fixed zip not quitting eagerly if one of the sources was shorter
+ added specific ZipIterable because zip-iterable tests expect it to be
not prefetching any of the sources (the plain zip does prefetch)
+ made the fromIterable more resilient to Iterable/Iterator crashes and
added null-value checksMerge pull request #3328 from akarnokd/OperatorTestsPack2xPart2

2.x: operator tests unsubscribeOn, withLatestFrom, zip (partial)2.x: operator test: window variants

I had to adjust some test slightly due to the a new behavior: if one
cancels a source which is windowed, as long as the windows are active,
the source has to stay active. However, there are more subtle
possibilities that need new tests.Merge pull request #3329 from akarnokd/OperatorTestWindow2x

2.x: operator test: window variants2.x: operator test zip and SafeSubscriberTestMerge pull request #3330 from akarnokd/OperatorsTestZipFinish2x

2.x: operator test zip and SafeSubscriberTest2.x: scheduler tests (no single() yet).Merge pull request #3331 from akarnokd/SchedulersTests2x

2.x: schedulers test of classic schedulers2.x: subject tests and bugfixesFixed testNestedAsyncConcat not waiting for the parent to complete and
misses the last onCompleteMerge pull request #3332 from akarnokd/SubjectTests

2.x: subject tests and bugfixes2.x: subscribers/observers tests

I had to ignore many tests because it either tests with null or throws
an exception from a Subscriber method which are not allowed with RSMerge pull request #3333 from akarnokd/SubscribersTests2x

2.x: subscribers/observers tests2.x: disposable unit tests + fix to RefCountDisposable behavior

+ sorted `Observable` and added `@BackpressureSupport` and
`SchedulerSupport` annotations.
+ created `@Beta` and `@Experimental` annotations, nothing is marked
with them because I intent everything to be standard at this point.Merge pull request #3334 from akarnokd/DisposableTests2x

2.x: disposable unit tests + fix to RefCountDisposable behavior2.x: scalar flatMap optimization enabled

+ I wanted to make sure the slow path passes all tests before enabling
the scalar optimization.
+ Fixed headers for internal classesMerge pull request #3335 from akarnokd/ScalarFastPathEnable2x

2.x: scalar flatMap optimization enabledCreate DESIGN.md

Initial start with terminology and types as a place to begin evolving the design of RxJava v2.

I have bootstrapped this doc with things that should not be controversial, just statements of fact of what exists. If any are controversial, I apologize, please open a PR with the recommended change.

Further proposals to this document will come via PRs for discussion and approval.Flowable/Observable

Proposed separation of `Observable` and `Flowable` along with description of each and their characteristics.2.x Design: Subject

Clarification of `Subject` that affects implementation. 

Related to discussion in https://github.com/ReactiveX/RxJava/pull/3345.2.x Design: Creation/Destruction

How to create and destroy streams.

The wording of this can become much better once agreement occurs in https://github.com/ReactiveX/RxJava/pull/3348/files

The intent of this is:

1) Specify how to create streams (Observable/Flowable) of the various flavors, and account for flow control.
2) Evolve towards what the creation/generation APIs are
3) Specify that it is not the responsibility of the final Subscriber to call unsubscribe/cancel upstream2.x: perf checks for flatMap and mergeMerge pull request #3352 from akarnokd/MergePerf2x

2.x: perf checks for flatMap and mergeMerge pull request #3350 from ReactiveX/v2-design-lifecycle

2.x Design: Creation/Destruction2.x: range perf + added missing header.Merge pull request #3353 from akarnokd/RangePerf2x

2.x: range perf + added missing header.2.x: perf change wait to spin-loop for short async benchmarksMerge pull request #3354 from akarnokd/PerfAwaitFix2x

2.x: perf change wait to spin-loop for short async benchmarks2.x: perf: comparison of range and flatMap between Observable,
NbpObservable and Single.Merge pull request #3349 from ReactiveX/v2-design-subject

2.x Design: SubjectMerge pull request #3348 from ReactiveX/v2-design-flowable

2.x Design: Flowable/Observable2.x: non-backpressure NbpObservable all relevant operators + tests.Merge pull request #3371 from akarnokd/NbpObservableOps2x

2.x: non-backpressure NbpObservable all relevant operators + tests.2.x: Single class + operators and test from 1.x + extra operators.Merge pull request #3358 from akarnokd/SingleOperators2x

2.x: Single class more operators + test from 1.x2.x: perf comparing Observable, NbpObservable, Stream and ParallelStream2.x: fix take() reentrancy problem.

Discovered by @mgp in #3346 and using his supplied fix. I've already
applied it to NbpObservable's take this Monday so all that's left was
the unit test.2.x: CombineLatest removed leftover debug field + better cleanup2.x: fix SpscLinkedArrayQueue leaves 1 slot null just before growingMerge pull request #3377 from akarnokd/TakeReentrancyFix2x

2.x: fix take() reentrancy problem.Merge pull request #3382 from akarnokd/SpscLinkedArrayQueueCapacityUse2x

2.x: fix SpscLinkedArrayQueue leaves 1 slot null just before growingMerge pull request #3376 from akarnokd/RxVsStreamPerf2x

2.x: perf comparing Observable, NbpObservable, Stream and ParallelStreamRemove duplication of Optional API behavior.

get() throws NSE when absent and orElse(T) returns the provided value when absent.Merge pull request #3449 from JakeWharton/jw/delete-code

2.x: Remove duplication of Optional API behavior.Merge pull request #3380 from akarnokd/CombineLatestCleanup2x

2.x: CombineLatest removed leftover debug field + better cleanup#3618 adding source links for @Beta and @ExperimentalMerge pull request #3623 from adam-arold/2.x

1.x: adding source links for @Beta and @Experimental2.x: full JDK 6 compatible backport + including bugfixes up to todayMerge pull request #3668 from akarnokd/Java6Backport

2.x: full JDK 6 compatible backport + including bugfixes up to today2.x: fix SchedulerLifecycle.testStartIdempotence vs cached threads dyingMerge pull request #3671 from akarnokd/SchedulerTestFix2x

2.x: fix SchedulerLifecycle.testStartIdempotence vs cached threads dyingUpdate nebula gradle pluginMerge pull request #3693 from stevegury/2.x

Update nebula gradle pluginRework of the design decisions for the 2.x branch2.x: rename and refactor classes to match the design documentMerge pull request #3783 from akarnokd/DesignRefactorMain2x

2.x: rename and refactor classes to match the design documentChanged the wording of the Consumable and Fusion sectionsMerge pull request #3782 from stevegury/stevegury/2.x-design

2.x design decisionsClean-up of the 2.x Design.md document (#3935)

* Take OS comments into account

* Remove dead sentence.2.x: Design.md +extension +fusion (#3980)

* 2.x: Design.md +extension +fusion

* Flatten the create-table

* Update create naming to avoid overload conflicts

* Add missing explanation, remove words2.x: Add support for concurrently inserting actions while advancing time (#3648)

* 2.x: Adding support for concurrently inserting actions while advancing time

* Removing the unit test proving the thread safety of
a BlockingPriorityQueue.2.x: first step switching to the reduced-allocation architecture (#4030)Update groupID and readme. (#4031)2.x: factor out consumer types, add XConsumable, update ops2.x: Update Observable's ops to work with ObservableConsumable (#4041)2.x: Use XCompletable in Completable and Single (#4042)2.x: factor out Completable ops, unify disposed markers (#4043)

* Some operators extracted

* 2.x: factor out Completable ops, make them direct, fix disposed markers2.x: Single operators factored out, headers added (#4045)2.x: Publish code coverage results to codecov.io (#4048)2.x: make Flowable operators extend Flowable directly to reduce allocation (#4049)

* Converting the Publisher-based operators to direct

* Update remaining operators to implement Flowable directlyConvert SchedulerSupport annotation to accept a string value. (#4053)Update conversion method name to reflect new base type names. (#4055)Use DisposableHelper and SubscriptionHelper to reduce duplication. (#4058)

A lot of operators contained their own marker instance and class definition of Disposable or Subscription. This changes almost all of them to use the shared instance provided by their respetive helper class. Some duplication still exists but can be cleaned up in a subsequent change.2.x: cleanup a few additional SubscriptionHelper locations (#4059)Remove second type parameter from Subject and FlowProcessor. (#4069)Inline last uses of caching DisposableHelper's constant. (#4071)Dereference atomic ref before identity comparison. (#4072)

This returns false 100% of the time otherwise.Merge SerialDisposable and MultipleAssignmentDisposable. (#4070)Use more DisposableHelper and SubscriptionHelper in operators. (#4074)Some small tweaks to Disposables. (#4076)

* Use BooleanDisposable for Runnables.
* Change BooleanDisposable to use null for disposed instead of keeping a marker instance.
* Eliminate static factory for CompositeDisposable since its constructors are already public.Re-use the single empty Disposable instance everywhere. (#4078)Replace custom empty Disposables with global instance. (#4080)Do not leak the DISPOSED marker instance into public API. (#4081)

If this were to be used by public code it could have have Very Bad™ effects by causing operators to think that they already disposed resources when they actually had not. Since `Disposable` is stateless it's safe for `disposed()` and `empty()` to be synonymous, although that might change in the future so both methods are retained.More uses of SubscriptionHelper. (#4084)Normalize request validation using SubscriptionHelper. (#4087)Merge NbpCancelledSubscriber into NbpEmptySubscriber. (#4085)Merge CancelledSubscriber into EmptySubscriber. (#4083)Ignore PMD and android studio, also check if push is still enabled.Remove EmptySubscriber, start to remove NbpEmptySubscriber. (#4094)Invert request validation return type for better semantics. (#4095)2.x: convert Observable OnSubscribe to direct implementation (#4096)2.x: Add PMD (#4100)Switch a SerialResource use to SerialDisposable. (#4101)2.x: prepare the operator-fusion enhancement (#4103)Expose isDisposed method on Disposable. (#4102)Remove some superfluous reads before writes. (#4105)Remove explicit cancel flags where it can be inferred. (#4106)Invert subscription validation return type for better semantics. (#4108)2.x: make sure the helper returns true if the pre-swap value was null (#4107)Switch the last SerialResource to manual resource management. (#4112)Case IO acronym like a word. (#4114)Simplify boolean disposables which run code on dispose. (#4111)Remove explicit cancel flags where it can be inferred. (#4110)2.x: Add Findbugs (#4116)2.x: provide an explanation why certain tests are ignored (#4120)Parallelize unit test execution for speed! (#4113)Refactor ConditionalSubscriber, add base fuseable Subscribers (#4122)Switch some Observable ops to direct, map fuseable (#4124)Remove XResource classes (#4126)Correct method name for Flowable-->Observable. (#4127)Reduce the visibility of internal methods. (#4128)2.x: cleanup of PMD suggestions (#4129)2.x: run Findbugs on main only (#4130)2.x: cleanup and test renames (#4134)2.x: enable fuseable sources, adjust operators (#4136)2.x: fix flaky tests (#4139)2.x update branch and year in contributing and readme md (#4135)

* 2.x update branch and year in contributing md

* Also (C) 2013-20162.x: upgrade to Gradle 2.14 (#4141)

* 2.x: upgrade to Gradle 2.14

* Regenerate wrapperObservable direct rest (#4145)

* Switch the remaining Observable operators to direct impl.

* Last set of operators, test renames2.x: enable scalar and async fuseable sources and intermediates (#4151)2.x: Enable fusion-consumers (#4157)

* 2.x: Enable fusion-consumers

* Fix observeOn leaking the worker

* Code cleanup2.x: enable op-fusion on GroupBy, doOnX, fix mistakes in map and filter (#4160)2.x: fix wrong reference check in FlattenIterable (#4165)2.x: measure overhead of toBlocking() first and last (#4166)2.x: reduce overhead of blocking first/last/single (#4167)2.x: introduce op-fusion to Observable + disposable-chaining fixes2.x: implement concat(Map)Eager(DelayError) and expose concat(Map)DelayError overload (#4190)

* 2.x: implement concat(Map)Eager(DelayError) and expose
concat(Map)DelayError overload

* Make sure cancel means cancel.

* Replenish main source

* Update if-structure

* Wrong expression2.x: +fromAsync, distinctUC, skip, take overloads, fix TestSubscriber API (#4192)

* 2.x: +fromAsync,distinctUC,skip,take overloads, fix TestSubscriber API

* Address review comments2.x: sync unit tests of Completable, add missing features (#4195)

* 2.x: sync unit tests of Completable, add missing features

* Fix small documentation errors2.x: test sync + cleanup (#4204)

* 2.x: test sync + cleanup

* Adjust header copyright year

* Disable PMD; eats to much memory and prone to travis kill-9

* Add missing headers

* Trace scheduler leak

* Fix a scheduler leak in AbstractSchedulerTests2.x: use generic type instead of Object in combineLatest and zip (#4211)2.x: Test sync, +groupJoin, +join, +onTerminateDetach (#4217)

* 2.x: test sync, +groupJoin, +join

* Finish up the observable variants2.x: subscribeOn allow cancelling before the actual subscription happens (#4222)

(just like 1.x)2.x: add dedicated concat for array of publishers (#4266)2.x: test sync and bugfixes (#4268)2.x: test sync and missing operators (8/02) (#4273)2.x: Functional interfaces now throw (#4278)

* 1.x: use throwing functional interfaces + changes

* Fix remaining classes

* Fix mistakes.Remove defunct 'Nbp' prefix from Observable interfaces. (#4285)Elide ObservableWrapper for empty and never. (#4287)2.x: move Exceptions to public area, + ExceptionHelper (#4288)Elide more create/callback wrappers in favor of direct Observables. (#4289)Actually apply custom scheduler when applying future. (#4292)

Correct annotatoin declaration as well.Inline generic-free runnable and long consumer method. (#4294)Correct default subscriber name. (#4293)Add serialized single subscriber wrapper. (#4295)2.x: Observable.range fix Exception message (#4296)2.x: Rename Single Base Interface Types for consistency (#4297)2.x: Rename Flowable Base Interface Types for consistency (#4299)2.x: Rename ObservableSource to ObservableWithUpstream (#4301)2.x: Rename Completable Base Interface Types for consistency (#4302)2.x: Rename Observable Base Interface Types for consistency (#4300)Move single and completable observers to correct package. (#4303)2.x: Add missing license headers (#4304)Promote lift implementations to top-level types. (#4307)Promote Observable to Single/Flowable adapters to top-level types. (#4308)2.x: fix SubscriptionArbiter reentrancy/cancel bug (#4310)

* 2.x: fix SubscriptionArbiter reentrancy/cancel bug

* Use an infinite source with timeout as 1G element takes only 2 secs.Promote anonymous Observables to top-level types. (#4291)Rename source/publisher wrapper class to more semantic 'from' name. (#4305)Hotfix compilation error and missing genericsRename FlowableSource to FlowableWithUpstream to match ObservableWithUpstream. (#4314)2.x: Remove unused exceptions in public API (#4309)Use ArrayListSupplier in more places, add HashMapSupplier. (#4315)Normalize empty and never sources. (#4316)Rename create to unsafeCreate, add "safe" create methods. (#4317)

This change is built around one goal: make the `create` methods actually usable by developers!

Currently the advice given to most developers using 1.x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation, and even then avoid it if possible. This is a trap that most new developers fall into. _The method is named "create", after all, so it must be how I create these things!_ I want to make that not only correct, but advisable (at least when the still-convenient "from" methods are not suitable, such as when wrapping callback-based APIs).

Because `Observable`, `Single`, and `Completable` are backpressure-free, this amounts to just suppressing downstream notifications when disposed. This doesn't seem too controversial.

The most controversial part is that I have renamed `Flowable.fromAsync` to `Flowable.create` thus making it the canonical way for users to create `Flowable`s directly. I'm much less opinionated on this change, but it felt wrong to have an `Flowable.unsafeCreate` with no associated `create` and `fromAsync` is the "safest" version we have.Switch (almost) all chain operators to FlowableWithUpstream. (#4318)Switch (almost) all chain operators to ObservableWithUpstream. (#4319)No scheduler change happens for timeInterval() and timestamp(). (#4323)Skip static factories when converting between stream types. (#4324)

Also rename Publisher->Completable factory method and operator implementation to match other stream types.Extract 'WithUpstream' interfaces. (#4326)

This allows use with types that do not extend directly from their base stream types.Fix compilation warningsAdd 'WithUpstream' interfaces to connectable implementations. (#4333)2.x: Clarify behavior of RxJavaPlugins.reset() in javadoc (#4298)2.x: move DisposableObserver to public area, add some javadocs (#4337)Remove conditional resource management from async listeners. (#4338)

Rename them to have a 'Resource' prefix.2.x: sync javadoc of Flowable (#4342)2.x: Fix some typos in Flowable + Observer documentation (#4344)2.x: sync Javadoc of Observable (copy&adjust Flowable's) (#4346)2.x: Observable + Flowable fix some typos (#4349)2.x: Sync Single javadoc with 1.x (#4352)Accept subclasses of Throwable for asserting failure. (#4353)2.x: sync Completable javadoc and related changes (#4355)2.x: switch to throwing Action, switchMapDelayError (#4357)Add missing @Test annotation (#4358)2.x: factor out inner classes from the base reactive types (#4360)2.x: test sync, fix retryWhen/redoWhen/publish(Function) (#4361)

* 2.x: test sync, fix retryWhen/redoWhen/publish(Function)

* Fix spelling error, use common parameter validation at more places2.x: add withLatestFrom many, cleanups and other enhancements (#4368)2.x: remove Try+Optional, introduce Notification (#4370)2.x: move blocking operators into the base classes (#4371)Implement ObservableHide for also masking the Disposable. (#4372)2.x: added missing ops, cleanup 8/19-1 (#4375)2.x: implement ops, add javadoc, remove unused components 8/19-2 (#4378)Remove test scheduler factory. (#4380)

This method is misleading in that it's a factory next to a bunch of accessor methods to shared resources. The TestScheduler constructor is public and can be used directly.Move single-use top-level type to nested class of its only use. (#4379)Correct factory method name for converting an RS Publisher. (#4381)Correctly dereference subscription before comparing against null. (#4382)Remove double dash on RxThreadFactory thread names. (#4383)

Also optimize name creation to avoid StringBuilder having to expand its underlying char[].Do not promise a new instance where we return a singleton. (#4384)Remove reference counted Disposable public type. (#4388)

This is a very specific use case to provide as a first-party type which can always be added back later should there be sufficient demand.Free upstream resources when default observer/subscriber is canceled. (#4385)Move error consumer helper to internal API. (#4386)Remove unused test methods from safe observer/subscriber. (#4387)Remove explicit StackOverflow check as its a VirtualMachineError. (#4391)

Looks like [the linked comment][1] was misinterpreted (but not in a way that affected the implementation) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal. As such, its explicit check was redundant.

 [1]: https://github.com/ReactiveX/RxJava/issues/748#issuecomment-324714952.x: Single.test dispose TestSubscriber when wanted (#4394)2.x: Completable.test cancel TestSubscriber when wanted (#4395)Avoid potential NPE when onError throws. (#4398)

t2 was only initialized if canceling threw an exception. In the happy path it would have never been initialized so when onError threw the call to suppress() would NPE.2.x: add missing ops, cleanup, fusion fixes (#4403)

* 2.x: add missing ops, cleanup, fusion fixes

* Fix scalar handling in flatMaps, rename Objects to ObjectHelper2.x collect - handle post-terminal events properly (#4364)2.x: cleanup, enhancements 8/23-1 (#4410)Fix missing javadoc type argument2.x: API removals and renames (#4413)2.x: add assembly tracking, minor fixes and cleanup (#4417)

* 2.x: add assembly tracking, minor fixes and cleanup

* Add missing header, add more time to test2.x: fixes, cleanups, renames (#4421)

* 2.x: fixes, cleanups, renames

* Rename a few more parameters2.x: add subscribeWith to get back the subscriber/observer fluently (#4422)Update changes.md and readme.mdFix bad javadoc linkAdd missing cssFix link to 2.x javadoc2.x - collect - handle post-terminal events for Observable (#4428)2.x Improve coverage, fix bugs (#4430)

* 2.x Improve coverage, fix bugs

* Update to ExceptionHelper.wrapOrThrow2.x: coverage, fixes, cleanup 8/27-1 (#4431)Fix typo. (#4433)2.x: cleanup, bugfixes, coverage 8/27-2 (#4434)2.x: cleanup, behavior clarifications, fixes, coverage 8/28-1 (#4435)2.x: Subject/Processor improvements & small cleanup (#4437)Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy
Fix drop strategy logic in FlowableOnBackpressureBufferStrategy
Add unit test for FlowableOnBackpressureBufferStrategy, copied from FlowableOnBackpressureBufferTest, there is still some work needed to have a better coverageFix FlowableOnBackpressureBufferStrategy

Move the call to drain out of the synchronized block
Cleaned up unit tests to follow recommendations from akarnokdFix FlowableOnBackpressureBufferStrategy (#4441)

* Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy
Fix drop strategy logic in FlowableOnBackpressureBufferStrategy
Add unit test for FlowableOnBackpressureBufferStrategy, copied from FlowableOnBackpressureBufferTest, there is still some work needed to have a better coverage

* Fix FlowableOnBackpressureBufferStrategy

Move the call to drain out of the synchronized block
Cleaned up unit tests to follow recommendations from akarnokd2.x: fixes, cleanup, coverage 8/31-1Merge pull request #4450 from akarnokd/CleanupFixes831

2.x: fixes, cleanup, coverage 8/31-1Add a maybe type as a lazy Optional type. (#4436)2.x: start reimplementing Maybe with up-to-date javadoc, tests and algo (#4454)rename Observable and Single #doOnCancel to #doOnDispose (#4458)

* rename Observable/Single #doOnCancel to #doOnDispose

* align naming of Completable onDispose arguments

* aligns javadoc2.x: add more Maybe operators, fix a few javadoc mistakes (#4467)2.x: coverage, bugfixes, 9/03-1 (#4468)2.x: coverage and fixes 9/03-2 (#4469)Update changes.md and readme.mdReplace all occurrences 'TestSubscriber'  by 'TestObserver' in TestObserver class (#4478)2.x: Add doOnEvent to Single & Completable (#4479)2.x: Completable enhance doOnEvent to reduce allocations (#4486)2.x: Flowable.reduce() to return Single, macro fusion (#4484)

* 2.x: Flowable.reduce() to return Single, macro fusion

* Fix javadoc copy-paste not updated to mention Observable

* Fix "a Observable"s2.x: add new methods to Maybe, Observable and Single from 4481 (#4488)

* 2.x: add new methods to Maybe, Observable and Single from 4481

* Fix javadoc mistakesrename emitters #isCancelled to #isDisposed (#4490)2.x: reduce blockingX overhead, move internal observers to common pkg (#4491)2.x: more Maybe operators, minor cleanups 9/07-1 (#4493)2.x: Remove trailing whitespace (#4496)Add Checkstyle for Trailing Whitespace (#4497)2.x: Ignore Checkstyle failures (#4505)2.x: Add Disposable Observer for Maybe, Completable & Single (#4504)Replace `finallyDo` references with `doAfterTerminate` (#4502)2.x: fix operator RefCount, disable FindBugs (due to Travis OOM) (#4506)2.x: Add exception message in SingleFromCallable (#4508)2.x: add Reactive-Streams TCK infrastructure and couple of tests (#4507)2.x: add system properties to adjust thread priorities of Schedulers (#4503)2.x: Adjust some JavaDoc in Emitters (#4509)

* 2.x: Adjust some JavaDoc in Emitters

* Fix one place

* Adjust another one

* Fix a/anFix wrong javadoc tag.2.x: fix switchMap bad cancellation (#4513)2.x: cleanup and coverage 9/08-12.x: fix Single.using, add unit tests and coverage (#4516)2.x: add more Maybe operators 9/09-1 (#4519)2.x: Add missing Resource Observer for Maybe, Completable & Single and adjust some Javadoc (#4518)

* 2.x: Add missing Resource Observer for Maybe, Completable & Single and adjust some Javadoc

* Add empty test for Maybe

* Remove cancel methodsObservable/Flowable/Completable/Single.delay should always call onError on the provided Scheduler (#4522)

* Provide failing test case for Observable/Flowable/Completable/Single.delay

* Call Observable/Flowable/Completable/Single onError on proper scheduler

* Fix CompletableTest.delayErrorImmediatelyFix compilation error in Eclipse2.x: Fix Generics T[] in Zip & CombineLatest (#4525)

* 2.x: Fix Generics T[] in Zip & CombineLatest

* Add Single zipIterableObject test

* Add combineLatestObject test to Flowable + Object

* Add Javadoc explanation

* Add it to Single too2.x: More usage of ObjectHelper (#4526)2.x: Remove unused declarations (#4527)Fix compile warnings2.x: add Maybe operators, add annotation and source code checker tests (#4528)2.x: PublishSubject enhance NPE when onNext(null) is called (#4531)2.x: cleanup 9/12-1, more Maybe operators, more source code checking (#4530)2.x: more cleanup and fixed checker, Maybe.takeUntil (#4533)2.x: Fix MaybeTimber by using scheduler and unit (#4529)

* 2.x: Fix MaybeTimber by using scheduler and unit

* Address issues

* Use Star importsObservable/Flowable should unsubscribe from underlying subscription on dispose (#4536)2.x: last Maybe operators (#4537)2.x: add most relevant ~100 operators' Reactive-Streams TCK tests (#4538)2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases (#4540)2.x: small cleanup and TCK fix (#4541)2.x: cleanup of some javadoc errors and mentions of 'Nbp' (#4542)2.x: cleanup of style and other minor things, 9/14-1 (#4552)

* 2.x: cleanup of style and other minor things, 9/14-1

* Disable the other checks2.x: make internal naming consistent, refactor some classes 9/14-2 (#4554)2.x: Fix typo in Single + Maybe defer() (#4560)2.x: Enhance NPE message in Create functions of all Base Reactive Types (#4561)Fix flaky MaybeUnbsubscribeOnTest.normalAdd extra Maybe iterable Amb tests for overlapped emissions (#4567)

- Asserting that downstream will get the results of the first source that began emission, even if multiple sources have overlapped emissions
- Testing Success and Error pathsFix wrong upstream type.2.x: last() to return Single (#4570)2.x: make any() and all() return Single, patch up tests (#4573)2.x: collect, toList, toSortedList, toMap, toMultimap to return Single (#4574)2.x: count, elementAt, ingoreElements, last, single, reduce, reduceWith (#4576)

to return non-Flowable2.x: convert the Observable operators to return Single/Maybe (#4579)2.x: Add missing Maybe tests for concatWith & onErrorResumeNext (#4582)2.x: Remove some dead code (#4581)Remove unused import2.x fix Flowable.create() not reporting null values properly, unify (#4583)

exception msg across2.x: Add error assertion with predicate to TestSubscriber and TestObserver (#4586)

* Add error assertion with predicate (#4498)

* Add error assertion with predicate to TestObserver (#4498)Update changes.md for RC3Highlight RC3 as done2.x: Report errors from onError to Plugin when done (#4590)2.x: UnicastSubject fix onTerminate (#4592)2.x: Add singleOrError, firstOrError, lastOrError & elementAtOrError to Observable and Flowable (#4589)

* 2.x: Add singleOrError, firstOrError, lastOrError & elementAtOrError to Observable and Flowable

* Address issues2.x: Enhance NPE messages (#4593)2.x: Remove takeFirst(predicate) in Observable & Flowable (#4595)Remove mention of blocking from the package-infos2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases (#4601)2.x: don't show started unit tests (#4600)

* 2.x: don't show started unit tests

* This setting works locally2.x: Add missing @Test annotation on tests (#4597)

* 2.x: Add missing @Test annotation on tests

* Fix testRemove unused imports2.x: benchmark just() and fromCallable() throughput (#4602)2.x: RxJavaPlugins - Don't pass null throwable down to Error Handler (#4603)2.x: Evaluate Schedule initialization via Callable (#4585)

* Evaluate Schedule initialization via Callable

* Clarify docs that Schedulers are initialized by the return value of the Callable

* Enforce non-null Callable Scheduler and Scheduler

* Add remaining tests and tidy

* Expand relevant Javadoc

* Make error messages more consistent

* Correct Exception naming

* Add test for Exception message to verify root cause

* Add tests for alternative initialization path

* Simplify statement

* Use holder pattern for default Scheduler instances

* Use correct scheduler when verifying reset

* Make onInitHandler functions lazy and enforce non null.2.x: Verify same onNext / onError null behavior across all Subjects and Processors (#4606)2.x: TestSubscriber & TestObserver add assertValue(Predicate) (#4607)

* 2.x: TestSubscriber & TestObserver add assertValue(Predicate)

* Adjust2.x: Factor out typical TestObserver/TestSubscriber methods (#4609)

* 2.x: Factor out typical TestObserver/TestSubscriber methods

* Move BaseTestConsumer into the public so its javadoc is available2.x: Add Completable.andThen(MaybeSource) (#4616)

* 2.x: Add Completable.andThen(MaybeSource)

* Add missing import

* Requested changes2.x: Add Maybe.flatMapSingle (#4614)

* 2.x: Add Maybe.flatMapSingle

* Changes

* Fix generics2.x: improve performance of Observable.flatMapIterable (#4612)Add missing type argument documentation2.x: Add Single.flatMapMaybe (#4617)2.x: Make CompositeExcpetion thread-safe like 1.x and also fix some issues. (#4619)

Right now CompositeExcpetion has several issues:

- `CompositeException(Throwable... exceptions)` doesn't deduplicate exceptions and flatten CompositeExceptions like `CompositeException(Iterable<? extends Throwable> errors)`
- If using `CompositeException(Iterable<? extends Throwable> errors)` to create CompositeException, `suppress` cannot be used.
- `suppress` doesn't update `cause`.
- `suppress` doesn't deduplicate exceptions and flatten CompositeExceptions.
- `suppress` and `Throwable.addSuppressed` are pretty confusing for Java 7+ users. Without looking at the implementation, it's hard to figure out the differences.

This PR made the following changes:

- Remove `CompositeException.suppress` so that it's easy to make CompositeException thread-safe.
  - This may cause some performance lost in some path rarely happening, e.g., an excpetion is thrown from `onError`, but that's not a big deal.
  - Since `suppress` is removed, it doesn't make sense to create an empty CompositeException, so `isEmpty` is removed and defense codes are added.
- Defense codes for bad exceptions.
- Deduplicate excepctions and flatten CompositeExceptions for `CompositeException(Throwable... exceptions)`.2.x: enable operator fusion in onBackpressureBuffer (#4622)2.x: Use predicates in BaseTestConsumer assertError(Class/Throwable) to remove duplicate code, tests tweaks to remove few IDE warnings (#4627)

* BaseTestConsumer use predicates in assertError with class and exception to remove duplicate code

* TestObserver & TestSubscriber tests cleanup to remove IDE warningsReplace 'resource' observers with plain 'disposable' observers in tests. (#4625)2.x: Add Completable.fromRunnable() (#4629)Don't wrap with CompositeException when there is only one error (#4631)2.x: add flattenAs{Observable,Flowable} to Single and Maybe (#4604)Cleanup warningsForce cast to U again2.x: Clean up SingleFlatMap (#4632)allow more graceful memory use in MaybeTestMerge branch '2.x' of https://github.com/ReactiveX/RxJava.git into 2.xUpdate Mockito to 2.1.0-RC.2 (#4636)2.x: Remove unused methods in BasicFuseableObserver (#4637)2.x: fix Mockito 2.1 changes using deprecated API of its own (#4639)Signal NPE ObservableAmb FlowableAmb (#4645)2.x: Merge AmbArray and AmbIterable into Amb for Single, Maybe and Completable types (#4647)Switch Maybe and Single to use their Transformers in compose() (#4651)

* Switch Maybe and Single to use their Transformers in compose()

Resolves #4650

* Update compose() testsUpcast ConcurrentHashMap to Map to avoid compatibility issue (#4654)

* Upcast ConcurrentHashMap to Map to avoid compatibility issue

Resovles #4653

See http://stackoverflow.com/a/32955708/61158

* Fix imports, remove now-unnecessary animalsniffer suppression2.x: Observable.compose to use ObservableTransformer (#4658)2.x: cleanup and coverage 10/03 (#4661)2.x: cleanup and fixes 10/03-2 (#4663)2.x: coverage and cleanup 10/04-1 (#4666)2.x: flatMap{Completable, Maybe, Single} operators (#4667)

* 2.x: flatMapCompletable operator

* Jacoco to ignore TCK

* Add remaining flatMap{Single, Maybe} to Flowable/Observable

* Fix active counting race conditionLimit gradle memory (#4668)2.x: Fix javadoc for Single.flatMapObservable (#4669)2.x Remove Function from transformer interfaces to allow a single obj… (#4672)

* 2.x Remove Function from transformer interfaces to allow a single object to implement multiple transformers

* Fix missing Exception declarations from transformers2.x: add javadoc and unit test to the recently changed XTransformers (#4674)

* 2.x: add javadoc and unit test to the recently changed XTransformer

* Use uppercase F2.x: fix flatMapX calling SpscLinkedArrayQueue.offer concurrently (#4678)Release 2.0.0-RC42.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources (#4681)Update Mockito to 2.1.0 (#4682)2.: Fix flatMapX over-cancellation in case of an inner error (#4686)2.x: Test static from methods and add Maybe.fromSingle & fromCompletable (#4685)2.x: coverage and cleanup 10/11-1 (#4689)2.x: Add Observable.rangeLong & Flowable.rangeLong (#4687)

* 2.x: Add Observable.rangeLong & Flowable.rangeLong

* Clean up cast

* Adjust Long overflow checks

* Add test for rangeLong count 1

* Fix ObservableRangeLongTest.testRangeWithOverflow52.x: BaseTestConsumer add assertValueAt(index, Predicate<T>) (#4690)2.x: coverage, fixes and cleanup 10/11-2 (#4692)2.x - improve timer javadoc (#4694)2.x: CompositeException fix order of Exceptions (#4695)

* 2.x: CompositeException fix order of Exceptions

* Take out Completable classes2.x: coverage and cleanup 10/12-1 (#4696)2.x: Clean up null usages by using ObjectHelper.requireNonNull (#4699)Fix unnecessary import.2.x: coverage and cleanup 10/13-1 (#4701)2.x: coverage, cleanup fixes 10/14-1 (#4705)2.x: cleanup, coverage, fixes 10/14-2 (#4706)

* 2.x: cleanup, coverage, fixes 10/14-2

* Fix NPEs2.x: Fix Flowable.elementAt on empty sources. Plus sync tests (#4707)2.x: coverage, fixes, cleanup 10/15-1 (#4708)

* 2.x: coverage, fixes, cleanup 10/15-1

* Fix error message.Decouple stream operators from Function interface. (#4711)

This allows a single class to implement itself as an operator for all stream types. A similar change was recently made to the transformer types.2.x: coverage, cleanup, fixes 10/15-2 (#4712)

* 2.x: coverage, cleanup, fixes 10/15-2

* Add missing header2.x: test sync from Observable to Flowable 10/16-1 (#4714)2.x: coverage and cleanup 10/17-1 (#4717)2.x: Distinct Operator - delegate null Collection down to onError (#4718)2.x: remove variance from the input source of retryWhen (#4720)2.x: coverage, fixes, enhancements, cleanup 10/18-1 (#4723)Fix code coverage linkMerge FlowableEmitter.BackpressureMode into BackpressureStrategy (#4729)

* Merge FlowableEmitter.BackpressureMode into BackpressureStrategy

* Cleanup code2.x: coverage, fixes, cleanup, copy to Flowable 10/19-1 (#4730)Remove checked exceptions from transformer interfaces. (#4710)

These functions are for transforming the stream shape, not doing work. Any operation that would throw a checked exception should happen inside the stream, not when shaping it.2.x: fix warnings2.x: Delegate null Collections down to onError in toList (#4731)2.x: coverage, minor fixes, cleanup 10/19-2 (#4732)2.x: cleanup, fixes, coverage 10/20-1 (#4736)2.x: coverage, fixes, cleanup 10/20-2 (#4738)

* 2.x: coverage, fixes, cleanup 10/20-2

* Fix Generate not saving the stateUpdate changes and readme2.x: coverage, fixes, cleanup 10/21-1 (#4742)2.x: Fixed Javadoc for Disposables.fromFuture (#4744)

* Fixed Javadoc for Disposables.fromFuture

* Missed a runnable2.x: distinctUntilChanged to store the selected key instead of the value (#4747)

* 2.x: distinctUntilChanged to store the selected key instead of the value

* Fix null test and whitespacesNew 2.x marble diagrams (#4749)Add more new marble diagrams & update old ones (#4752)2.x: fix Flowable.concatMapEager hang due to bad request management (#4751)

* 2.x: fix Flowable.concatMapEager hang due to bad request management

* Missed negation of check2.x: Remove some unused fields (#4754)2.x: fix window-timed test leaking an MBE that affects unrelated tests (#4755)2.x: Add Single.fromObservable(ObservableSource) (#4760)

* 2.x: Add Single.fromObservable(ObservableSource)

* Add Null test2.x: cleanup, fixes, coverage 10/24-1 (#4761)

* 2.x: cleanup, fixes, coverage 10/24-1

* Add missing default method.2.x: cleanup & coverage 10/24-2 (#4763)2.x: cleanup, fixes and coverage 10/25 (#4766)Rename BackpressureStrategy.NONE to MISSING (#4767)2.x: allow subscribeOn to work with blocking create (#4770)Update readme and changes.md2.x: fix Observable.repeatWhen & retryWhen not disposing the inner (#4783)2.x: Fix exceptions in javaDoc (#4793)

* 2.x: correct exceptions in Flowable javaDoc

* 2.x: correct exceptions in Observable javaDoc

* 2.x: correct exceptions in Maybe javaDoc

* 2.x: correct exceptions in Single javaDocdocumentation updates (#4798)

* documentation updates

* Update Observable.javaUpdate ObservableEmitter.java (#4803)Subtle change in Completable's documentation for retryWhen. (#4810)fix typo in javadoc of Maybe::toSingle (#4815)2.x: Observable.repeatWhen fix for onError (#4819)2.x: add doFinally for handling post terminal or cancel cleanup (#4831)Porting the Scheduler.when operator from 1.x to 2.x (#4827)2.x: Fix javadoc and style errors2.x: add doFinally to the rest of the reactive base classes (#4832)2.x: add `Flowable.doAfterNext` operator + 3 doX TCKs (#4833)

* 2.x: add `Flowable.doAfterNext` operator + 3 doX TCK

* Fix operator name in the scheduler javadoc2.x: add doAfterNext & doAfterSuccess to the other types (#4835)2.x: add fluent requestMore to TestSubscriber (#4838)2.x: javadoc: fix wording of some operators, remove @throws implications (#4839)

* 2.x: javadoc: fix wording of some operators, remove @throws implications

* Fix some introduced mistakesRelease 2.0.12.x: add Maybe.flatMapSingleElement returning MaybeMerge pull request #4858 from akarnokd/FlatMapSingleElement

2.x: add Maybe.flatMapSingleElement returning Maybe2.x: TestObserver shouldn't clear the upstream disposable on terminatedMerge pull request #4873 from akarnokd/TestObserverFix

2.x: TestObserver shouldn't clear the upstream disposable on terminatedRemove empty list item from `io.reactivex.package-info.java` (#4874)2.x: Apply missing RxJavaPlugins.onAssembly on ops (#4877)Add equals() to the unit test to satisfy checkstyle2.x: Common test classes for Processors. (#4882)Add CheckReturnValue annotation (#4881)

* Add CheckReturnValue method

* Add annotation to more methods

* Java 6 Compatibility2.x: dedicated reduce() op implementations (#4885)

* 2.x: dedicated reduce() op implementations

* Fix unnecessary duplicate assignment, remove trailing spaces

* Check for more terminal stateFix code style.2.x: fix firstOrError back conversions not signalling NSE2.x: Issue and PR "welcome" templates (#4891)2.x: fix compilation errors when using Java 8 (#4893)

* Fix Java 8 compilation problems

* Suppress warnings for java 62.0.2FlowableScanSeed - prevent post-terminal events (#4899)2.x: Fix typo in DisposableHelper (#4900)FlowableScan - prevent multiple terminal emissions (#4901)doAfterNext - prevent post-terminal emission (#4903)Observable.scan no seed fix post-terminal behaviour (#4904)Whitespace fixesUse t instead of value to allow for IDE naming (#4907)2.x: fix & update Observable.repeatWhen and redoWhen (#4911)2.x: fix TestSubscriber/Observer message texts (#4921)2.x: Change Completable to CompletableSource (#4924)Update CHANGES.md

Release 2.0.3Release 2.0.32.x: fix timer() ISE due to bad resource mgmt (#4927)eaadb540dad556cb524a7376b5bc6f07f108b93d (#4930)2.x: add safeguards to generate() (#4932)

* 2.x: add safeguards to generate()

* Fix typo in the test name2.x: fix publish(Function) not replenishing its queue (#4943)2.x: fix timeout with fallback not cancelling the main source (#4945)2.x: Fixed Javadoc for SingleToObservable, MaybeToObservable, CompletableToObservable (#4946)fix javadoc for BehaviorSubject (#4951)

-fix examples for creating BehaviorSubject with or without initial value.Release 2.0.42.x: fix minor javadoc errors2.x: fix LambdaObserver calling dispose when terminating (#4957)2.x: add sample() overload that can emit the very last buffered item (#4955)2.x: fix takeUntil() other triggering twice (#4962)2.x: add strict() operator for strong RS conformance (#4966)

* 2.x: add strict() operator for strong RS conformance

* Fix javadoc and annotation2.x: add subjects for Single, Maybe and Completable (#4967)

* 2.x: add subjects for Single, Maybe and Completable

* Add CheckReturnValue, rename local test vars2.x: Add @CheckReturnValue to create methods of Subjects + Processors (#4971)Improve compose() generics (#4972)

Resolves #49502.x: Add Completable.hide() (#4973)2.x: fix withLatestFrom null checks, lifecycle (#4970)readme.md with links to 1.x and a quick guideFixed a typo and other cosmetics issues. (#4976)Add newline to end of files missing a newline (#4979)

This is to get rid of the "No newline at end of file" warning.Update Copyright to 'RxJava Contributors' (#4980)

See https://github.com/ReactiveX/RxJava/issues/4978 for more information.Update copyright2.x: fix Observable.concatMapEager bad logic for immediate scalars (#4982)

* 2.x: fix Observable.concatMapEager bad logic for immediate scalars

* Don't print-log2.x: fix cross-boundary invalid fusion with observeOn & zip (#4984)2.x: make Obs.combineLatest consistent with Flowable + doc cornercase (#4987)

* 2.x: make Obs.combineLatest consistent with Flowable + doc cornercase

* early termination to cancel the other sources2.x: Fix Observable.singleElement doc (#4989)2.x: Update marble diagrams for sample overloads (#4990)

* 2.x: Update marble diagrams for sample overloads

* Add Maybe and switchIfEmpty diagrams2.x: A.flatMapB to eagerly check for cancellations before subscribing (#4992)2.x: assertNever(T value) / assertNever(Predicate<T> valuePredicate) (#4994)

* 2.x: assertNever(T value) / assertNever(Predicate<T> valuePredicate)

* fixed Java compatibility issuesJ

* fixed Java type compatibility issues

* changes according to PR review

* changes according second PR review2.x: ExecutorScheduler.scheduleDirect to report isDisposed on complete (#5005)2.x: add Flowable.parallel() and parallel operators (#4974)

* 2.x: add ParallelFlowable

* Fix groupBy benchmark2.x: improve the parallel() mode test coverage, improve its code (#5006)Override RS dependency to compile, replace owner info (#5015)Fix copyright instructions (#5017)Give more time to delay tck test2.x: Add scheduler creation factories (#5002)

* Add scheduler creation factories

Resolves #4993

This is a pretty vanilla copy from RxJava 1's implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.

We had talked about borrowing from project reactor's APIs for different overloads, let me know if you think we should add more fine-grained controls through these.

* Add `@since` info

* Change failure string to "is null"

* Move to RxJavaPlugins

* Remove no-arg overloads

* Rename to make it clearer about creation

Added scheduler because we're not in Scheduler anymore. Changed to "create" because "newNewThread" was weird

* Add tests (WIP)

* Remove unnecessary nullcheck

* Remove double try

* Fix tests, make them more robust with integration flow

* Shut down custom schedulers when done2.x: option to fail for using blockingX on the computation scheduler (#5020)

* 2.x: option to fail for using blockingX on the computation scheduler

* Increase sleep time in XFlatMapTest

* Add a custom RxJavaPlugins callback onBeforeBlockingRelease 2.0.52.x: dedicated Single.zip implementation, no dispose on all-success (#5027)Annotate function interfaces. (#5023)2.x: reintroduce OnErrorNotImplementedException for 0-1 arg subscribe() (#5036)2.x: add parallel hooks to RxJavaPlugins, add missing params validation (#5043)Add StackOverflow links (#5046)Document and test amb subscription ordering. (#5047)Feature/#4876 nonnull annotations (#5051)

* add @Nullable annotations to RxJavaPlugins

* add @NonNull annotations to schedulers

* javadoc for NonNull/Nullable annotationsadd nullable annotation to simple queue (fixes #5053) (#5054)2.x: disable codecov-checks on PRs (#5057)

* 2.x: disable codecov-checks on PRs

* Try with different filename extensionAnother adjustment to codecov.yml2.x: document (internal) SimpleQueue (#5056)2.x: Feature/#4876 more null checks (#5055)

* add NotNull annotations
add assertion to help static code analysis

* avoid false positive

* add annotations and assert statement to help static code analysis

* remove redundant check

* mark parameter as nullable

* add test to reproduce npe

* add null check for avoid npe

* parameter time unit marked as @NonNull

* add annotations and assert to help static code analysis

* remove assert statements

* add missing annotation

* add comment for test caseuse bounded wildcards for errorHandler (fixes #5045) (#5049)

* use bounded wildcards for errorHandler (fixes #5045)

* add test to ensure signature2.x: update readme parallel example (#5062)2.x: fix replay() cancel/dispose NPE (#5064)2.x: increase sleep time in XFlatMapTestUpdate codecov.yml (#5066)Update README.md (#5068)

* Update README.md

Error:(13, 38) java: variable v is already defined in method main(java.lang.String[])

* Update README.md2.x: compatibility fixes (JDK 9 & IntelliJ 2017.1 EAP) (#5069)2.x: cancel upstream first, dispose worker last (#5075)Feature/#5045 more generics in RxJavaPlugins (#5058)

* widen bounds

* widen bounds

* add test to ensure generics

* use wildcard import for io.reactivex2.x: fix imports and raw type usage.Removed documentation leftover (#5076)

That wrongly states that the error will be swallowedFix javadoc sentence warning2.x: measure performance of 0-1 length inner source to flatMap2.x: wrap undeliverable errors (#5080)

* 2.x: wrap undeliverable errors

* Add CompositeException to isBug, add test for isBugCorrect marble diagram dimensions (#5087)

2.x: Correct marble diagram dimensions2.x: fix CI load sensitive BlockingNextTests retry with backoff (#5088)

2.x: fix CI load sensitive BlockingNextTests, XFlatMapTest2.x: fix scan(seed, f) to emit accumulated values asap (#5090)Add doAfterTerminate callback to the Single type. (#5093)

* Add doAfterTerminate callback to the Single type.

* Mark the doAfterTerminate() experimental since 2.0.6Release 2.0.62.x: fix Maybe.concat() subscribe-after-cancel, verify others (#5101)Added missing @NonNull attribute to Function7. (#5102)2.x: fix doOnSubscribe signalling Undeliv.Exception instead of onError (#5103)2.x: fix window(time, size) not completing windows on timeout (#5106)2.x: Flowable as a Publisher to be fully RS compliant (#5112)2.x: benchmark the new strict/interop mode (#5115)

* 2.x: benchmark the new strict/interop mode

* consider CPU usage2.x: fix Obs.combineLatest to dispose eagerly (#5114)Add more prominent javadoc links2.x: fix Observable.zip to dispose eagerly (#5121)2.x: improve coverage, remove unused code (#5119)2.x: add ParallelFlowable.sequentialDelayError (#5117)

* 2.x: add ParallelFlowable.sequentialDelayError

* Fix javadoc, make sure failed rails are ignored.2.x cleanup: add missing override annotations.2.x: update javadoc of flatMap() overloads (#5127)2.x: fix flatMap not cancelling the upstream eagerly (#5133)2.x: fix repeatWhen and retryWhen signatures (#5136)2.x: add TestSubscriber.withTag (#5137)2.x: fix timed replay-like components replaying outdated items (#5140)2.x: Java 9 compatibility fixes (March 3) (#5153)Add @NonNull to the methods of Emitter (#5156)2.x: improve BaseTestConsumer with awaitCount & timeout (#5155)

* 2.x: improve BaseTestConsumer with awaitCount & timeout

* Improve diff coverage2.x: add missing <T> javadocRelease 2.0.7Fix JFrog broken link, also trigger snapshot build2.x: Single.subscribe() to report isDisposed() true on success/error (#5163)add Observable.switchMapSingle (#5161)2.x: fix LambdaObserver not cancelling the upstream (#5170)2.x: WIP removes anonymous inner classes. (#5174)

* removes anonymous inner classes from flowable

* address comments

* remove remaining private classes

* cleanups in observable

* cleanups in operators2.x: fix private field access, few generics problems (#5176)removes all anonymous inner classes (#5177)2.x: Minor generics fix to Functions2.x: fix replay().refCount() leaking items between connections (#5182)2.x: test to disallow anonymous inner classes (#5183)2.x: reflection-based parameter validator & fixes (#5187)2.x: fix concatMapEager should accept 0 for prefetch (#5189)2.x: fix flatMap emitting the terminal exception indicator on cancel (#5188)2.x: add offer() method to Publish & Behavior Processors (#5184)

* 2.x: add offer() method to Publish & Behavior Processors

* Sleep instead of yield.Correct java doc for refCount() return type. (#5191)2.x: Add a few more @Nullable & @NonNull annotations to public interfaces. (#5196)2.x: add ParallelTransformer interface, params-validation (#5197)

* 2.x: add ParallelTransformer interface, params-validation

* Add explicit requireNonNull calls.2.x: increase timeout on parallel & completable tests (#5199)Fix a small typo in ParallelFlowable2.x: fix images of firstElement, flattenAsX, flatMapIterable (#5208)

* 2.x: fix images of firstElement, flattenAsX, flatMapIterable

* +UnicastSubject, +UnicastProcessor2.x: better documentation on the abstract consumer classes (#5210)2.x: prevent tasks to self interrupt on the standard schedulers (#5207)2.x: fix window() with time+size emission problems (#5213)[2.x] UnicastSubject fail fast support (#5217)

* [2.x] Unicast subject fail fast support

* follow up: mark new factory methods experimental, remove excessive constructor, fix typos

* follow up: test coverage

* follow up: add @since for new methods2.x: add resilient versions of parallel map(), filter() & doOnNext() (#5202)2.x: safeguard against building with v1 tags (#5219)2.x: Minor checkstyle fixesFix grammar, add imports to some examples.2.x: improve the documentation of Schedulers utility class. (#5223)2.x: cleanup based on IntelliJ 2017.1 inspections (#5222)

* 2.x: cleanup based on IntelliJ 2017.1 inspections

* Restore indexed for-loop and make other loops indexed as well.2.x UnicastProcessor fail-fast support (#5226)

* [2.x] UnicastProcessor fail-fast support

* follow-up: remove constructor, add onTerminate non-null checks to factory methods, fixed typo2.x: Fix whitespacesFix wrong comments in Functions.java “Function3” -> “BiFunction” (#5230)

* Fix wrong comments in Functions.java “Function3” -> “BiFunction”

* Add “toFunction” fail test from Bifurcation to Function9

* Update FunctionsTest.java

Fix interface naming

* Change comments “BiFunction..Function9” - > “BiFunction, Function3..Function9”

* Add @SuppressWarnings({"unchecked", "rawtypes"}) into Functions fail testAdd TimeUnit null check test case in Timed (#5231)

* Add TimeUnit null check test case in Timed

* Correct ugly formatting in BasicIntQueueDisposable

* Reformatting line

* Add blockingIterable’s negative buffer size fail test

* Modify BlockingMultiObserver field’s modfier to private

* revert style, modifier

* Remove duplicated test case.

* Remove no need annotation and variable2.x: fix CallbackCompletableObserver calling onError, ResourceX wording (#5240)Release 2.0.82.x: fix DisposableX copy-paste error in javadoc2.x: fix Flowable.toList() onNext/cancel race (#5247)Add nullPointerException comments and ObjectHelper test code. (#5255)

* Add NullPointerException comments for doc.

* Add test code for ObjectHelper.java2.x: fix flatMapIterable appearing to be empty when fused (#5256)More nullability annotations (#5251)

* More nullability annotations

* Refactored imports

* Changes based on akarnokd's review

* A few more annotations

* Changes based on akarnokd's 2nd reviewRemove @NonNull annotations in BiConsumer (#5257)2.x: fix whitespacesFixed broken links (#5262)

Fixed broken links for @Beta and @Experimental annotationsremove commented out code from IoScheduler (#5268)2.x: enable link to external JDK, fix Schedulers style (#5271)2.x: Single.subscribe(BiConsumer) consistent isDisposed (#5277)2.x: BehaviorProcessor & Subject terminate-subscribe race (#5281)

* 2.x: BehaviorProcessor & Subject terminate-subscribe race

* Use assertFailure.2.x: cleanup for text and javadoc 04/15 (#5286)2.x: fix Flowable.flatMapMaybe/Single maxConcurrency not requesting more (#5287)2.x: add/remove empty lines in ConnectableObservable and Observable (#5288)

* Multiple lines

* Less line of spaceImprove doOnDispose JavaDoc (#5296)

* correct javadoc note in Observable.doOnDispose()

The note was claiming Observable.doOnDispose() would be called for
terminal events of the Observable, which is not the case

* small improvement to .doOnDispose javadocs to refer to Actions

* add @throws mentions to doOnDisposed javadocsFix JavaDoc image for Single#flatMapObservable (#5297)

`Single.flatMapObservable.png` should be used for `Single#flatMapObservable` instead of `Single.flatMap.png`.2.x: add Single.unsubscribeOn() (#5302)

* 2.x: add Single.unsubscribeOn()

* Fix experimental marker locationCorrect documented return type of Single#flatMapObservable Function argument (#5304)2.x: more detailed no-multi-subscribe with std consumers error message (#5301)

* 2.x: more detailed no-multi-subscribe with std consumers error message

* Improve coverage of the new contentRelease 2.0.92.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. (#5306)2.x: Apply promotions for v2.1 (#5307)2.x: Fix Javadoc of Flowable.toObservable (#5309)2.x: improve coverage of some classes (no functional changes) (#5310)Release 2.1.0Mark VolatileSizeArrayList as RandomAccess list (#5324)Add missing bracket (#5326)

Difficult to count those with all the java 7 boilerplate!Fix Javadoc for Maybe.toSingle (#5343)2.x: add tryOnError to create/XEmitter API (#5344)

* 2.x: add tryOnError to create/XEmitter API

* Fix indentation.Fix javadoc for FunctionX (#5347)2.x: update some marbles of Observable (#5351)2.x: Fix typo in error message. (#5354)2.x: Replace Action1 with Consumer in docs2.x: make sure interval+trampoline can be stopped (#5367)2.x: make SingleMap not allow map function return null (#5378)Fixed Javadoc for SingleFlatMapIterableObservable. (#5383)2.x: add missing null checks on values returned by user functions (#5379)Changed minimum value of rx2.buffer-size to 1 (#5391)

Before the minimum value you could set with the system variable `rx2.buffer-size` was 16. With this commit, that is changed to 1.2.x: add subscribeOn overload to avoid same-pool deadlock with create (#5386)Update README.md (#5395)

* Update README.md

Reordered and regrouped communication channels. (Grouped by type)
Added Gitter.im chat for support.

* Update README.mdFix documentation. (#5403)DefaultObserver javadoc fix: use subscribe, remove disposable code (#5405)DefaultSubscriber javadoc sample fix (#5407)

* change sample such that it compiles

* fix: remove assignmentFix javadoc for Observable.reduce() and Observable.reduceWith() (#5406)

* fix javadoc sample code for Observable.reduce() to compile

* update javadoc for Observable.reduceWith()

* fix javadoc sample code for Flowable.reduce() to compile

* update javadoc for Flowable.reduceWith()

* remove one more word to be similar to Observable.reduce()

* fix Publisher.defer() to Flowable.defer()

* add example using reduceWith() to Observable.reduce() and Flowable.reduce()

* add @see reduceWith() to reduce()#5382 Corrected Single.delay documentation (#5409)

* #5382 Corrected Single.delay documentation 

Corrected Single.delay documentation that says that success or error signals will be delayed by the specified amount, but in fact errors are not delayed, only successes.

* #5382 Corrected Single.delay documentation

Corrected Single.delay documentation that says that success or error signals will be delayed by the specified amount, but in fact errors are not delayed, only successes.2.x: Fix a small typo in Single.delay2.x: fix doOnNext failure not triggering doOnError when fused (#5415)

* 2.x: fix doOnNext failure not triggering doOnError when fused

* Remove whitespace2.x: attempt to fix a few time-sensitive tests. (#5421)

* 2.x: attempt to fix a few time-sensitive tests.

* Add more time to a merge test, always cancel2.x: fix periodic scheduling with negative period causing IAE (#5419)2.x: more eager cancellation in flatMapX (#5422)

* 2.x: more eager cancellation in flatMapX

* Add more eager check to Observable.flatMapX2.x: fix buffer(time, maxSize) duplicating buffers on time-size race (#5427)Release 2.1.12.x: fix time bounded replaySubject getValue() inconsistency with getValues() on old items (#5434)

* Add breaking test for expected peek behavior in a time bound replay subject.

* Add possible fix for fixing peek behavior.

* Add test & fix for ReplayProcessor::getValue.

* Roll-back auto-formatted imports.2.x: fix/clarify the Observable class' javadoc (#5432)

* 2.x: fix/clarify the Observable class' javadoc

* extends -> implementsRun GC before the TestNG to avoid kill 137, hopefullyGradle to use less memory, missed an export command (#5436)2x: Fix wording in Async and Publish processors javadoc. (#5444)Remove @NonNull annotation in Consumer method parameter (#5447)

This fixes #54422.x: concat to report isDisposed consistently with termination (#5440)2.x: fix periodic scheduler purging config not honored (#5441)Remove the @NonNull annotation from Function (#5449)

As per per the discussion in #54472.x: Add empty source clauses to javadocs of combineLatest operators accepting unspecified number of sources. This commit resolves #5412 (#5413)2.x: add missing 'the' to the changed sentences of 5413[REF] replace duplicate calling method setAccessible on the same object (#5454)2.x: fix Javadoc mistakes and some style (#5460)Refactoring SingleSchedulerTest. Now it extends AbstractSchedulerTests, so redundant tests could be removed in favor of abstract tests. (#5462)use a mutable field in FlowableTimeoutTimed instead of an AtomicReference (#5466)2.x: fix wording of toList, fix a/an in subscribeOn (#5465)removing commented code from tests (#5467)2.x: See if sudo required results in consistent build times (#5457)Fix Javadoc for Flowable and Observable reduce. (#5476)Corrected return type in doc for F.reduce(seed, reducer), F.reduceWith(seedSupplier, reducer) and O.reduce(seed, reducer) (#5478)Fix a typo in the changelog (#5481)2.x: small note on Maybe.defaultIfEmpty regarding toSingle (#5486)Indent comments (#5492)

* Indent comments

* Remove unused ignored fileFlowableWithLatestFrom forgets request (#5494)

* FlowableWithLatestFrom forgets request

* Add unit test and correct testBackpressure

* Revert indentation change

* Revert import change2.x: fix ReplayProcessor backpressure and NotificationLite emission bug (#5493)

* 2.x: fix ReplayProcessor backpressure and NotificationLite emission bug

* Restore coverage2.x: fix Schedulers.io() javadoc {link missing the @ symbolMerge branch '2.x' of https://github.com/ReactiveX/RxJava.git into 2.x2.x: make withLatestFrom conditional subscriber, test cold consumption (#5495)

* 2.x: make withLatestFrom conditional subscriber, test cold consumption

* Cleanup internal logic, improve coverage2.x: fix SpscLAQ nepotism, FlowableRefCountTest.testRefCountAsync flaky (#5507)Remove unnecessary generic type parameters for delaySubscription methods in Single (#5511)Release 2.1.22.x: add missing null check to fused Observable.fromCallable (#5517)2.x: add/update Observable marbles (07/30) (#5524)2.x: Try fixing Travis CI lack of java (#5531)

* 2.x: Try fixing Travis CI lack of java

* Force dist: precise

* Oracle JDK 8 is thenAdd assertValueAt(int, value) to TestObserver (#5529)

* Add assertValueAt(int, value) to TestObserver

* Fix test to call correct method

* David's comments

* Artem's comments

* 2.x: Try fixing Travis CI lack of java (#5531)

* 2.x: Try fixing Travis CI lack of java

* Force dist: precise

* Oracle JDK 8 is then2.x: Fix flaky MaybeFromCallableTest.noErrorLoss (#5541)

* 2.x: Fix flaky MaybeFromCallableTest.noErrorLoss

* Fix the same error in 2 other Maybe tests.2.x: upgrade Reactive-Streams dependency to 1.0.1 (#5546)Update Schedulers.java (#5552)Release 2.1.32.x: fix Obs.combineLatestDelayError sync initial error not emitting (#5560)

* 2.x: fix Obs.combineLatestDelayError sync initial error not emitting

* Remove unused method.2.x: Add assertValuesOnly to BaseTestConsumer. (#5568)

* 2.x: Add assertValuesOnly to BaseTestConsumer.

* Address comments.Added formatting to license section (#5571)

* Added formatting to license section

* Update README.mdRemove unnecessary git command from build instructions (#5572)Add NullPointerException comment (#5578)implement Maybe.switchIfEmpty(Single) (#5582)

* implement Maybe.switchIfEmpty(Single)

* switchIfEmpty(Single) returns single; remove all changes unrelated to the PR

* add 'experimental' annotation2.x: fix Single.timeout unnecessary dispose calls (#5586)

* 2.x: fix Single.timeout unnesessary dispose calls

* Route to RxJavaPlugins.onError2.x: fix assertValueSequence reversed error message (#5594)

* 2.x: fix assertValueSequence reversed error message

* Fix variable naming instead

* Adjust according to the feedbackImplement LambdaConsumerIntrospection (#5590)

* Implement HasDefaultErrorConsumer

Followup from #5569, and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one.

* Add `@since`

* Add tests

* Add support in relevant completable observers

* Add support in ConsumerSingleObserver

* Add support in MaybeCallbackObserverTest

* Add support in LambdaSubscriber

* Switch to CompositeObserver and onErrorImplemented()

* Update wording to use Introspection

* Update tests and flip implementation logic to match namingUpdating JavaDoc with correct return types (#5600)2.x: Fix Observable.concatMapEager queueing of source items (#5609)Release 2.1.4Add missing license headers (#5615)2.x: Fix Observable.delay & Flowable.delay javadoc (#5617)2.x: Add Single.delay overload that delays errors (#5616)2.x: fix incorrect error message at SubscriptionHelper.setOnce (#5623)2.x: add onTerminateDetach to Single and Completable (#5624)

* 2.x: add onTerminateDetach to Single and Completable

* Improve coverage, fix lack of nulling out the downstream2.x: Upgrade to Gradle 4.2, remove nebula, custom rls (#5633)2.x: fix "full" mode gradle code2.x: fix bintray repo and name config2.x: RC4 fix maven-POM generation againFixing JavaDoc warnings (#5637)Added Automatic-Module-Name instruction in build.gradle (#5644)2.x: additional warnings for fromPublisher() (#5640)

* 2.x: additional warnings for fromPublisher()

* Add "that is" to the sentences2.x: Readme.md update snapshot links (#5645)

* 2.x: Readme.md update snapshot links

* Use plain link and only the current snapshot dependencyRelease 2.1.5 changes.md update2.x: improve package JavaDoc (#5648)2.x: Fix subscribeWith documentation examples (#5647)2.x Add concatMapCompletable() to Observable (#5649)

* Initial implementation of Observable.concatMapCompletable()

* Update serialVersionUID

* Fix javadoc and verify prefetch is positive

* Put back auto-changed whitespace

* Put back more whitespace intellij is removing

* More javadoc fixes

* switch from testng to junit

* Add experimental annotation and change prefetch to capacityHint2.x: update Obs.just(2..10) & switchOnNextDelayError marbles (#5651)2.x: inline disposability in Obs.concatMap(Completable) (#5652)Fix mistakes in observers package info, fix genericsUpgrade testng to get method names to show up in gradle console when skipping, and in testng html output. (#5653)Fix broken license link (#5662)2.x: improve Flowable.timeout() (#5661)

* 2.x: improve Flowable.timeout()

* Remove the now unused FullArbiter(Subscriber)

* Don't read the volatile twiceFix a misleading documentation of Observable.singleElement() (#5668)

* Fix a misleading documentation of Observable.singleElement()

* Reduce the first part of Observable.singleElement() JavaDoc to a single sentence.

* Update the Marble diagram of Observable.singleElement()2.x: fix PublishProcessor cancel/emission overflow bug (#5669)2.x: coverage, add SingleToFlowableTest (#5673)2.x: Add PublishProcessor JMH perf comparison (#5675)2.x: make parallel() a fusion-async-boundary (#5677)2.x: add limit() to limit both item count and request amount (#5655)

* 2.x: add limit() to limit both item count and request amount

* Address some feedback.

* Use the cancelled constant value.2.x: More Observable marble fixes (10/18) (#5680)2.x: Add TCK test for limit() (#5683)Release 2.1.6Update 'java' → 'java-library' Gradle plugin, update deps configurations. (#5682)2.x: fix Completable.concat to use replace (don't dispose old) (#5695)

* 2.x: fix Completable.concat to use replace (don't dispose old)

* Remove comments from original issue reportMoved tests to FromCallableTest from FromCompletableTest (#5705)Remove mentions of Main thread from Schedulers.single() javadoc. (#5706)2.x: Improve Javadocs of flatMapSingle and flatMapMaybe (#5709)2.x: BaseTestConsumer values() and errors() thread-safety clarifications (#5713)2.x: Javadocs: add period to custom scheduler use sentences (#5717)2.x: Add a sentence to documentation of take() operator. (#5718)

* Add a sentence to documentation of take() operator

* Rephrase java doc for take() methodRemove duplicate nullity check line (#5723)2.x : Rename variable name "subject" to "processor" for exact expression (#5721)2.x: distinguish between sync and async dispose in ScheduledRunnable (#5715)

* 2.x: distinguish between sync and async dispose in ScheduledRunnable

* Coverage improvement and fix a missing state change

* Add test case for the parent-done reordered check2.x: Implement as() (#5729)

* Implement Observable.as()

* Implement Single.as()

* Implement Maybe.as()

* Implement Flowable.as()

* Implement Completable.as()

* Add Experimental annotations

* Add throws doc

* Fix docs and validation errors

* Add @since 2.1.7 - experimental

* ParallelFlowable.as()

* Start ConverterTest

* Fix tests and update validator

* Remove exceptions from signatures

* Remove exception signature from implementations

* Assert the full execution of extend() tests

* Use test() helpersRestore license to correct text. (#5735)

This section is a template on how to apply the header and not something that actually should have been changed.Improved code formatting for README.md (#5737)correct javadoc for ConnectableFlowable, GroupedFlowable, FlowableAutoConnect (#5738)2.x: marbles for Observable all, fromPublisher, zipArray (#5740)Check isDisposed before emitting in SingleFromCallable (#5743)

Previously SingleFromCallable did not check if the subscriber was
unsubscribed before emitting onSuccess or onError. This fixes that
behavior and adds tests to SingleFromCallable, CompletableFromCallable,
and MaybeFromCallable.

Fixes #5742Release 2.1.72.x: API to get distinct Workers from some Schedulers (#5741)2.x: SchedulerMultiWorkerSupport version fix to 2.1.8 - exp2.x: improve wording and links in package-infos + remove unused imports (#5746)

* 2.x: improve wording and links in package-infos

* Remove unused imports2.x: Fix TrampolineScheduler not calling RxJavaPlugins.onSchedule(), add tests for all schedulers. (#5747)2.x: add/update Observable marbles 11/28 (#5745)2.x: RxJavaPlugins unwrapRunnable (#5734)

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable-javadoc

* 2.x: RxJavaPlugins unwrapRunnable-Enhancement and test coverage

* 2.x: RxJavaPlugins unwrapRunnable-Enhancement and test coverage

* 2.x: RxJavaPlugins unwrapRunnable-Enhancement and test coverage

* 2.x: RxJavaPlugins unwrapRunnable-Enhancement and test coverage

* 2.x: RxJavaPlugins unwrapRunnable-Enhancement and test coverage

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable

* 2.x: RxJavaPlugins unwrapRunnable2.x: fix javadoc link in observables/package-info2.x: Add marbles for Observable (12/06) (#5755)2.x: Check runnable == null in *Scheduler.schedule*(). (#5748)

* 2.x: Check runnable == null in *Scheduler.schedule*().

* "run is null".

* sudo "run is null".2.x: improve autoConnect() Javadoc + add its marble (#5756)2.x: Add retry(times, predicate) to Single & Completable and verify behavior across them and Maybe. (#5753)

* 2.x: Add retry(times, predicate) to Single & Completable and verify behavior across them and Maybe.

* Adjust ParamValidationCheckerTest for the 2 newly added methods.

* Add AtomicInteger for checking the number of subscribe calls.

* Fix copy pasta mistake.2.x: add a couple of @see to Completable (#5758)

* 2.x: add a couple of @see to Completable

* Enable @see in JavadocWording verifier2.x: marble additions and updates (12/11) (#5759)2.x: fix timed exact buffer calling cancel unnecessarily (#5761)2.x: Subject NPE fixes, add UnicastProcessor TCK (#5760)

* 2.x: add Subject/Processor refCount(), Subject NPE fixes

* Fix wording

* Move RefCountProcessor into tests

* Improve style2.x: Upgrade to Reactive Streams 1.0.2 final (#5771)Rename interface parameters (#5766)

Signed-off-by: shaishavgandhi05 <shaishgandhi@gmail.com>2.x: Improve JavaDoc of retryWhen() operators (#5773)

* 2.x: Improve JavaDoc of retryWhen() operators

* Fix example to use emitter.

* Fix factory class name

* Fix example termination logic, proper blockingX()2.x: Improve BehaviorProcessor JavaDoc (#5778)

* 2.x: Improve BehaviorProcessor JavaDoc

* Use &gt; in the first exampleUpdate CHANGES.md2.x: Fix JavaDoc wording of onTerminateDetach (#5783)2.x: Improve BehaviorSubject JavaDoc + related clarifications (#5780)

* 2.x: Improve BehaviorSubject JavaDoc + related clarifications

* Fix grammar, add wiki link2.x: Describe merge() error handling. (#5781)2.x: Update Maybe doOn{Success,Error,Complete} JavaDoc (#5785)Remove apostrophe to correct grammar. (#5793)

In this case we want the 3rd person present form of "let", not the contraction "let us".2.x: improve request accounting overhead in retry/repeat (#5790)

* 2.x: improve request accounting overhead in retry/repeat

* Test repeatUntil cancelled case2.x: Fix flatMap inner fused poll crash not cancelling the upstream (#5792)

* 2.x: Fix flatMap inner fused poll crash not cancelling the upstream

* Verify Observable.flatMapIterable2.x: add error handling section to merge() operator docs (#5786)

* 2.x: add error handling section to merge() operator docs

* Change to "UndeliverableException errors"2.x: More marbles 01/08-a (#5795)2.x: Observable marble fixes 01/08-b (#5797)2.x: Observable.replay(Function, ...) marble fixes (#5798)2.x: Add missing {Maybe|Single}.mergeDelayError variants (#5799)

* 2.x: Add missing {Maybe|Single}.mergeDelayError variants

* In javadoc, use "a SingleSource to be merged"2.x: Improved XSubject JavaDocs (#5802)

* 2.x: Improved XSubject JavaDocs

* Remove "still"2.x: More Observable marbles, 01/10-a (#5804)2.x: Final planned Observable marble additions/fixes (#5805)2.x: Fix buffer(open, close) not disposing indicators properly (#5811)

* 2.x: Fix buffer(open, close) not disposing indicators properly

* Unify boundary error methods, fix cleanup, fix last buffer orders

* Fix nits.2.x: Add Subject and Processor marbles (#5816)Release 2.1.92.x: Improve the wording of the share() JavaDocs (#5824)

* 2.x: Improve the wording of the share() JavaDocs

* Fix typo.2.x: Fix O.blockingIterable(int) & add O.blockingLatest marbles (#5826)2.x: Document size-bounded replay emission retention caveat (#5827) (#5828)2.x: Reword the just() operator and reference other typical alternatives (#5830)

* 2.x: Reword the just() operator and reference other typical alternatives

* Fix a/an2.x: Fix Observable.switchMap main onError not disposing the current inner source (#5833)

* 2.x: Fix Obs.switchMap main onError not disposing the current inner src

* Fix error-error race test2.x: Fix copy-paste errors in SingleSubject JavaDoc (#5834)Add JavaDoc links to the base reactive classes to Getting started (#5836)Added nullability annotation for completable assembly (#5838)2.x: Detail distinct() & distinctUntilChanged() in JavaDoc (#5837)

* 2.x: Detail distinct() & distinctUntilChanged() in JavaDoc

* Address feedback2.x: Improve JavaDoc of XObserver types. (#5841)

* 2.x: Improve JavaDoc of XObserver types.

* Use "disposing", add missing space

* Add more explanation about throwing exceptions.2.x: Expand the JavaDocs of the Scheduler API (#5843)

* 2.x: Expand the JavaDocs of the Scheduler API

* Fix typo and grammar.2.x: Explain the properties of the XEmitter interfaces in detail (#5844)2.x: Improve the wording of the Maybe.fromCallable JavaDoc (#5848)2.x: Add efficient concatWith(Single|Maybe|Completable) overloads (#5845)

* 2.x: Add efficient concatWith(Single|Maybe|Completable) overloads

* Correct the concatWith(Completable) TCK file name

* Increase coverage

* Change local variable names.2.x: Unify race test loop counts and invocations (#5857)remove unnecessary comment from Observable.timeInterval(TimeUnit) (#5858)2.x: Add efficient mergeWith(Single|Maybe|Completable) overloads. (#5847)

* 2.x: Add efficient mergeWith(Single|Maybe|Completable) overloads.

* Compact tests, use named constants2.x: Add finite requirement to various collector operators JavaDoc (#5856)

* 2.x: Add finite requirement to various collector operators

* Updated wording to "accumulator object"2.x: groupBy add overload with evicting map factory (#5860)2.x: Cleanup after the new groupBy additions2.x: Fix Javadoc warnings, links to the JDK types (#5861)Release 2.1.102.x: Expand the documentation of the Flowable.lift() operator (#5863)enhance test for groupBy with evicting map factory (#5867)2.x: Improve the JavaDoc of the other lift() operators (#5865)2.x: Add Flowable.concatMapCompletable{DelayError} operator (#5871)2.x: Add Flowable.switchMapCompletable{DelayError} operator (#5870)2.x: Add Flowable.concatMap{Maybe,Single}{DelayError} operators (#5872)

* 2.x: Add Flowable.concatMap{Maybe,Single}{DelayError} operators

* Fix typo in the JavaDocs

* Fix the JavaDoc wording of concatMapSingle2.x: Add Flowable.switchMap{Maybe,Single}{DelayError} operators (#5873)2.x: Add note about NoSuchElementException to Single.zip(). (#5876)

* 2.x: Add note about NoSuchElementException to Single.zip().

* Address code review comments.2.x: Add Observable switchMapX and concatMapX operators (#5875)

* 2.x: Add Observable switchMapX and concatMapX operators

* Rename local variables to match their datatype better.2.x: Improve coverage and fix small mistakes/untaken paths in operators (#5883)2.x: Upgrade the algo of Observable.timeout(time|selector) operators (#5886)2.x: Fix window(Observable|Callable) upstream handling (#5887)2.x: Fix Flowable.window(Publisher|Callable) upstream handling (#5888)2.x: Cleanup, coverage and related component fixes (#5889)Added nullable annotations to subjects (#5890)2.x: Improve coverage & related cleanup 03/05 (#5891)

* 2.x: Improve coverage & related cleanup 03/05

* Fix camelCase local variable naming errors in tests.Fix buffer() documentation to correctly describe onError behaviour (#5895)

* Corrected documentation for buffer onError behaviour

The operator does not emit the buffer in case of error. Suspect these
docs were copied over to 2.x before the fix from #3561 was merged.

* Corrected documentation for Flowable.buffer onError behaviour

* Update boundary buffer documentation to change source -> supplied

The word 'source' is incorrect here, since the buffer is emitted
whenever the supplied Publisher emits an item2.x: clarify dematerialize() and terminal items/signals (#5897)2.x: Fix the extra retention problem in ReplaySubject (#5892)

* 2.x: Fix the extra retention problem in ReplaySubject

* Cover the already-trimmed case.2.x: Fix Observable.flatMap scalar maxConcurrency overflow (#5900)2.x: Fix publish(-|Function) subscriber swap possible data loss (#5893)2.x: Fix excess item retention in the other replay components (#5898)2.x: Fix Flowable.singleOrError().toFlowable() not signalling NSEE (#5904)2.x: Perf measure of Flowable flatMap & flatMapCompletable (#5902)2.x: Coverage improvements, logical fixes and cleanups 03/08 (#5905)2.x: Add public constructor for TestScheduler that takes the time. (#5906)

* 2.x: Add public constructor for TestScheduler that takes the time.

* Wording.2.x: Cleanup test local variable names (#5907)

* 2.x: Cleanup test local variable names

* Check for Observable c2.x: Improve coverage, fix operator logic 03/12 (#5910)2.x: Benchmark X-Map-Z operators (#5914)2.x: Optimize ObservableConcatMapCompletable (#5915)2.x: Improve the scalar source perf of Obs.(concat|switch)MapX (#5918)2.x: Add fusion (perf++) to ObservableSwitchMap inner source (#5919)2.x: Fix JavaDoc warnings of buffer(Publisher|Callable) (#5923)Release 2.1.112.x: Update Single.flatMapPublisher marble (#5924)Add @Nullable annotations to Processors (#5925)2.x: Expand the Getting Started (#5926)

* 2.x: Expand the Getting Started

* Some text got accidentally deletedFix broken table in "Using an overload with ..."2.x: Fix concatMapSingle & concatMapMaybe dispose-cleanup crash (#5928)Release 2.1.12Add @NonNull annotations to create methods of Subjects and Processors (#5930)Fix Completable.toMaybe() @return javadoc. (#5936)fix typo `ingored` (#5938)

just fix few typo.2.x: Also allow @SchedulerSupport on constructors. (#5940)Removed TERMINATED check in onNext (#5942)

* Removed pointless code.

* Removed unnecessary TERMINATED check.Fix Observable javadoc (#5944) (#5948)

* Replace `doOnCancel` by `doOnDispose`2.x: blockingX JavaDoc to mention wrapping of checked Exc (#5951)Fixed conditional iteration breaking. (#5952)Add missing parenthesis on README.md (#5955)2.x: Add Single.ignoreElement, deprecate toCompletable (#5957)

* 2.x: Add Single.ignoreElement, deprecate toCompletable

* Fix javadoc method name

* Have Single.ignoreElement standard from the startFix typo (#5960)

Update 'Dependend sub-flows' to 'Dependent sub-flows'2.x: Fix some grammar mistakes (#5959)

* 2.x: Fix some grammar mistakes

* Fix additional a/an mistakes2.x: Workaround for Objects.requireNonNull inserted by javac (#5966)Fix few typos in readme. (#5967)2.x: Fix Observable.concatMapSingle dropping upstream items (#5972)Release 2.1.13Adding eager concats to Single (#5976)

* Adding eager concats to Single

* Removing unnecessary class - the utility already exists

* Covering publisher sequence

* Correcting javadoc

* Correcting javadoc

* Fixing javadoc "Single sources" -> "SingleSources"

* Fixing javadoc "Maybe sources" -> "MaybeSources"2.x: Fix refCount() connect/subscribe/cancel deadlock (#5975)

* 2.x: Fix refCount() connect/subscribe/cancel deadlock

* Add more coverage.

* Improve logic and coverage.

* Factor out common cleanup code.

* Fix termination cleanup.2.x: Maybe/Single Javadoc; annotation cleanup (#5977)2.x: Flowable.take to route post-cancel errors to plugin error handler (#5978)2.x: improve JavaDocs of the subscribeActual methods (#5981)2.x: deprecate getValues() in Subjects/Processors (#5982)2.x: Cleanup in the Scheduler class (#5985)2.x: Add blockingSubscribe JavaDoc clarifications (#5984)Add marble diagrams to a few Single.doOnX methods. (#5987)

* Add marble diagrams to a few Single.doOnX methods.

* Use correct marble diagram urls for couple of Single.doOnXX methodsObservable javadoc cleanup (#5992)

The sample code in the Observable javadoc erroneously uses onNext(Integer t) for a DisposableObserver<String>
This has been corrected to be onNext(String t)2.x: Fix switchMap to indicate boundary fusion (#5991)2.x: Automatically publish the generated JavaDocs from CI (#5996)

* Experiment: auto publish JavaDocs

* Fix script error, add logging

* Have all package-list staged

* Fix another scripting error

* Fix copy paths

* Real pushback on snapshot builds.

* Pull requests should not trigger snapshot pushbacks

* Rename push.sh to push_javadoc.shImplement 'toString' method for some Emitters (#5995)

* Implement 'toString' method for Emitters

* Add tests to check that toString method of Emitters contains class name

* Add 'assertEmpty' to prevent catching assertions by 'onError'

* Add test to ensure that SerializedEmitter delegates 'toString' to parent emitter

* Override emitter's 'toString' method

* Add tests to check 'toString' method contains Emitter's class name

* Add test for 'toString' method of SerializedEmitter2.x: Add refCount with count & disconnect timeout (#5986)

* 2.x: Add refCount with count & disconnect timeout

* Ensure coverageFix typo (#6003)2.x: readme: mention 1.x eol; 2.x snapshot javadoc url (#5997)2.x: Javadoc space cleanup (#6005)

* 2.x: Remove excessive whitespaces from generated javadocs on build

* Fix html before javadocJar, fix other space patterns

* Fix replay subject/processor html2.x: Add throttleLatest operator (#5979)2.x: Add MulticastProcessor (#6002)

* 2.x: Add MulticastProcessor

* Improve coverage, fix NPE before upstream arrives

* Address review feedback.2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber (#6010)

* 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber.

* Experimental

* Lowercase2.x: Fix & prevent null checks on primitives (#6014)Release 2.1.142.x: benchmark (0..1).flatMap and flattenAs performance (#6017)2.x: Fix Single.takeUntil, Maybe.takeUntil dispose behavior (#6019)2.x: Add TCK for MulticastProcessor & {0..1}.flatMapPublisher (#6022)2.x: add full implementation for Single.flatMapPublisher so doesn't batch requests (#6015) (#6021)2.x: More time to BehaviorProcessor & Interval TCK tests (#6023)2.x: Dedicated {Single|Maybe}.flatMap{Publisher|Observable} & andThen(Observable|Publisher) implementations (#6024)

* 2.x: Dedicated {0..1}.flatMap{Publisher|Obs} & andThen implementations

* Fix local variable name.2.x fix group-by eviction so that source is cancelled and reduce volatile reads (#5933) (#5947)2.x: Fix MulticastProcessor JavaDoc warnings (#6030)2.x: Upgrade to Gradle 4.3.1, add TakeUntilPerf (#6029)2.x: Improve Observable.takeUntil (#6028)2.x: Inline CompositeDisposable JavaDoc (#6031)Remove whitespaces.Update DESIGN.md (#6033)

I've just read the DESIGN.md and noticed some things that I could do to improve the quality of the DESIGN.md. So as a result of my "proofreading" I mainly:
- Added periods at the ending of some sentences.
- Did case matching of certain types and terms. e.g. `OnSubscribe` -> `onSubscribe` OR flowable -> `Flowable`.

Hope it helps! :smile:2.X: Fix disposed LambdaObserver onError to route to global error handler (#6036)fix MulticastProcessor javadoc comment (#6042)Fix Flowable.blockingSubscribe is unbounded and can lead to OOME (#6026)Fix check that would always be false (#6045)

Checking `BlockingSubscriber.TERMINATED` (`new Object()`) against `o` would always be false since `o` is a publisher. Since `v` comes from the queue this is presumably the variable that should be checked.

However the check might even be redundant with this change since that variable can only appear in the queue after the subscriber has been cancelled. I am not familiar enough with the memory model to say whether the object appearing in the queue implies the cancelled subscriber is visible.2.x: Add the wiki pages as docs (#6047)Make it explicit that throttleWithTimout is an alias of debounce (#6049)

* Make it explicit that throttleWithTimout is an alias of debounce

* feedback

* fixed marble images#5980 made subscribeActual protected (#6052)2.x: Add Maybe marble diagrams 06/21/a (#6053)2.x: Use different wording on blockingForEach() JavaDocs (#6057)2.x: Expand {X}Processor JavaDocs by syncing with {X}Subject docs (#6054)

* 2.x: Expand {X}Processor JavaDocs by syncing with {X}Subject docs

* A-an

* Fix javadoc warningsRelease 2.1.152.x: Fix concatMap{Single|Maybe} null emission on dispose race (#6060)Release 2.1.162.x: Fix Javadoc warnings on empty <p>Fix links for Single class (#6066)

* Change observable.html to single.html
* Delete completable.html link which doesn't exist2.x: Adjust JavaDocs dl/dd entry stylesheet (#6070)Add marble diagram to the Single.never method (#6074)

* Add marble diagram to the Single.never method

* Use correct marble diagram URL for Single.never methodAdd marble diagram to the Single.filter method (#6075)

* Add marble diagram to the Single.filter method

* Use correct marble diagram URL for Single.filter method2.x: Add Maybe.hide() marble diagram (#6078)Add marble diagrams to the Single.delay method (#6076)

* Add marble diagrams to the Single.delay method

* Update marbles for Single.delay with error events

* Use correct marble diagram URLs for Single.delay methods2.x: Add Completable.takeUntil(Completable) operator (#6079)Add marble diagram for Single.hide operator (#6077)

* Add marble diagram for Single.hide operator

* Use correct marble diagram URL for Single.hide method2.x: Improve class Javadoc of Single, Maybe and Completable (#6080)2.x: Add Completable marble diagrams (07/17a) (#6083)Add marble diagrams for Single.repeat operators (#6081)

* Add marble diagrams for Single.repeat operators

* Use correct marble diagram URLs2.x: More Completable marbles, add C.fromMaybe (#6085)Add marble diagram for Single.repeatUntil operator (#6084)

* Add marble diagram for Single.repeatUntil operator

* Use proper URL for marbleAdd marbles for Single.from operators (#6087)Single error operators marbles (#6086)

* Add marbles for Single.error operators

* Add marbles for Single.onError operators

* Use proper URLs for marble diagrams2.x: Add missing Completable marbles (07/18a) (#6090)Add marbles for Single.amb operators (#6091)2.x: Improve Completable.delay operator internals (#6096)2.x: Add missing Completable marbles (+19, 07/19a) (#6097)2.x: Fix aspect of some Completable marbles.2.x: Several more Completable marbles (7/19b) (#6098)Update TestHelper.java: trivial typo fix (#6099)2.x: Final set of missing Completable marbles (#6101)2.x: Adjust JavaDoc stylesheet of dt/dd within the method details (#6102)2.x: Fix Completable mergeX JavaDoc missing dt before dd (#6103)Fixing javadoc's code example of Observable#lift. (#6104)Release 2.1.172.x: Promote all Experimental/Beta API to standard (#6105)Release 2.22.x: Update Readme.md about the parallel() operator (#6117)6108 changed README to use Gradle's implementation instead of compile (#6116)2.x: Test cleanup (#6119)

* 2.x: Test error printout, local naming, mocking cleanup

* Fix additional local variable names

* Fix Observers with wrong variable names

* Fix nit

* More time to MulticastProcessorRefCountedTckTestFixed broken link under RxJS in docs/Additional-Reading.md (#6125)

* Fixed broken link in docs/Additional-Reading.md

* updated broken-link in docs/Additional-reading.md2.x: Improve Completable.onErrorResumeNext internals (#6123)

* 2.x: Improve Completable.onErrorResumeNext internals

* Use ObjectHelperAdd marbles for Single.timer, Single.defer and Single.toXXX operators (#6095)

* Add marbles for Single.timer, Single.defer and Single.toXXX operators

* Correct image height for marbles2.x: Flowable.onErrorResumeNext improvements (#6121)2.x: Remove fromEmitter() in wiki (#6128)2.x: Update _Sidebar.md with new order of topics (#6133)Initial clean up for Combining Observables docs (#6135)

* Initial clean up for Combining Observables docs

This patch updates the style of the combining observables documentation
to be similar to that of #6131 and adds examples for most of the
operators therein. Refs #6132.

* Address comments2.x: Expand Creating-Observables.md wiki (#6131)Update RxJava Android Module documentation (#6134)

This patch updates the RxJava Android wiki page to point to the
RxAndroid project and the RxAndroid wiki page. This refs #6132.2.x: Update Getting started docs (#6136)

* Remove troubleshooting guide.

* Getting Started, all artifacts point to RxJava2.

* Fix JFrog links to point to 2.x2.x: Add marbles for Single.concat operator (#6137)

* Add marbles for Single.concat operator

* Update URL for Single.concat marble diagram

* Update Single.concat marble's height2.x: Update Mathematical and Aggregate Operators docs (#6140)

* Update document structure; remove obsolete operators

* Add examples

* Change formatting

* Include 'Flowable' in the introduction

* Add additional notes to the mathematical operators

* Rename section; add additional note

* Create additional sections2.x: Cleaunp - rename fields to upstream and downstream (#6129)

* 2.x: Cleaunp - rename fields to upstream and downstream

* Make links in MaybeEmitter.setDisposableAdd marble diagrams for various Single operators (#6141)2.x: Add concatArrayEagerDelayError operator (expose feature) (#6143)

* 2.x: Add concatArrayEagerDelayError operator (expose feature)

* Change text to "Concatenates an array of"2.x: Fix boundary fusion of concatMap and publish operator (#6145)Grammar fix (#6149)

Scheduler description is grammatically error. Replaced "an unifrom" with "a uniform"2.x: cleanup newline separation, some field namings (#6150)

* 2.x: cleanup newline separation, some field namings

* Fix missed two-empty-line cases2.x: Clarify TestObserver.assertValueSet in docs and via tests (#6152)

* 2.x: Clarify TestObserver.assertValueSet in docs and via tests

* Grammar.2.x: Fix marble of Maybe.flatMap events to MaybeSource (#6155)2.x: Make Flowable.fromCallable consitent with the other fromCallables (#6158)

2.x: Make Flowable.fromCallable consistent with the other fromCallablesError handle on Completable.fromCallable with RxJavaPlugins (#6165)Update `unsubscribeOn` tests to avoid the termination-cancel race2.x: Make observeOn not let worker.dispose() called prematurely (#6167)

* 2.x: Make observeOn not let worker.dispose() called prematurely

* Merge in master.Remove unused importsRelease 2.2.12.x: Add explanation text to Undeliverable & OnErrorNotImplemented exs (#6171)

* 2.x: Add explanation text to Undeliverable & OnErrorNotImplemented exs

* Link to the wiki instead of the docs directory due to broken [[]] links

* Reword OnErrorNotImplementedAuto-clean up RxJavaPlugins JavaDocs HTML (#6173) (#6174)2.x: explain null observer/subscriber return errors from RxJavaPlugins in detail (#6175)Update Additional-Reading.md (#6180)

* Update Additional-Reading.md

Check existing links, add new links about RxAndroid

* Update Additional-Reading.md

Add code version marks where possible2.x: Cleanup multiple empty lines in sources (#6182)2.x: Fix refCount termination-reconnect race (#6187)

* 2.x: Fix refCount termination-reconnect race

* Add/restore coverage

* Update ResettableConnectable interface and definitions#6195 Fix Flowable.reduce(BiFunction) JavaDoc (#6197)

Empty source does not signal NoSuchElementException.Add "error handling" java docs section to from callable & co (#6193)

* #6179 Adding Error handling javadocs to Observable#fromCallable(), Single#fromCallable(), and Completable#fromCallable().

* #6179 Adding Error handling javadocs to Maybe#fromAction() and Completable#fromAction().

* #6179 Removing cancellation language since only the `Flowable` type has `cancel()`

* #6179 Adding error handling JavaDocs to Flowable#fromCallable()2.x: Fix toFlowable marbles and descriptions (#6200)

* 2.x: Fix toFlowable marbles and descriptions

* Adjust wordingFix terminology of cancel/dispose in the JavaDocs (#6199)

* #6196 Fixing terminology of cancel/dispose in the JavaDocs for Completable.

* #6196 Fixing terminology of cancel/dispose in the JavaDocs for Maybe.

* #6196 Fixing terminology of cancel/dispose in the JavaDocs for Observable.

* #6196 Fixing terminology of cancel/dispose in the JavaDocs for Single.

* #6196 Switching from subscribers to observers in `Completable.fromFuture()` JavaDocRelease 2.2.22.x: Assert instead of print Undeliverable in some tests (#6205)

* 2.x: Assert instead of print Undeliverable in some tests

* Fix error count not guaranteed to be 4.2.x JavaDocs: Remove unnecessary 's' from ConnectableObservable (#6220)Fix typos (#6223)

- Add space on README.md page2.x: Cleanup Observable.flatMap drain logic (#6232)Add timeout and unit to TimeoutException message (#6234)

* Add timeout and unit to TimeoutException message

* New timeout message, add testsFix docs typos (#6235)2.x: Adjust Undeliverable & OnErrorNotImpl message to use full inner (#6236)2.x Wiki: Remove mention of i.r.f.Functions (#6241)

The `io.reactivex.functions.Functions` utility method has been made internal a long ago and should not be mentioned.Add Nullable annotations for blocking methods in Completable (#6244)Add delaySubscription() methods to Completable #5081 (#6242)

* Add delaySubscription() methods to Completable #5081

* fix parameter test and documentation for delaySubscription()

* add tests to delayCompletable()

* remove mocked observer from delaySubscription() tests for Completable2.x: Expand and fix Completable.delaySubscription tests (#6252)2.x: Fix flaky sample() backpressure test, improve coverage (#6254)2.x: Cleanup code style, commas, spaces, docs (#6255)2.x: Add C.delaySubscription marble, fix some javadoc (#6257)Release 2.2.3Add generate examples to Creating-Observables.md in Wiki (#6260)

Add documentation and example to the wiki for generate.Use JUnit's assert format for assert messages to enable better suppor… (#6262)

* Use JUnit's assert format for assert messages to enable better support in IDEs

* remove unnecessary < and > since it's not matched by IntelliJ's regex2.x: Fix cancel/dispose upon upstream switch for some operators (#6258)

* 2.x: Fix cancel/dispose upon upstream switch for some operators

* Restore star importsInline SubscriptionHelper.isCancelled() (#6263)2.x: Update Creating Observables docs (#6267)

* Add "generate" section to the outline

* Fix(image link broken)2.x: Call the doOn{Dispose|Cancel} handler at most once (#6269)Fix broken markdown (#6273)2.x: Update Error Handling Operators docs (#6266)

* Change document structure; update operator list

* Add examples

* Clarify which handler is invoked

* Use consistent wording in the descriptions

* Cleanup2.x: Improve the Observable/Flowable cache() operators (#6275)

* 2.x: Improve the Observable/Flowable cache() operators

* Remove unnecessary casting.

* Remove another unnecessary cast.2.x: Improve the package docs of i.r.schedulers (#6280)2.x: Fix Observable.flatMap to sustain concurrency level (#6283)2.x: Expose the Keep-Alive value of the IO Scheduler as System property. (#6279) (#6287)2.x: Add materialize() and dematerialize() (#6278)

* 2.x: Add materialize() and dematerialize()

* Add remaining test cases

* Correct dematerialize javadoc

* Use dematerialize selector fix some docs2.x: Add dematerialize(selector), deprecate old (#6281)

* 2.x: Add dematerialize(selector), deprecate old

* Restore full coverage

* Fix parameter namingAdd missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe (#6301)

Happened to notice these todayFix(incorrect image placement) (#6303)2.x: Update Transforming Observables docs (#6291)

* Change document structure; revise descriptions

* Add examples

* Add more operators2.x: Fix refCount eager disconnect not resetting the connection (#6297)

* 2.x: Fix refCount eager disconnect not resetting the connection

* Remove unnecessary comment.Javadoc : Explain explicitly about non-concurrency for Emitter interface methods (#6305)Javadoc updates for RXJava Issue 6289 (#6308)

* Javadoc updates for RXJava Issue 6289

* With review comments on issue 6289Javadoc: explain that distinctUntilChanged requires non-mutating data to work as expected (#6311)

* Javadoc : Explain distinctUntilChanged requires non-mutating data type in flow(Observable)

Add few tests for scenarios related to mutable data type flow in distinctUntilChanged() methods for Observable

* Javadoc : Explain distinctUntilChanged requires non-mutating data type in flow(Flowable)

Add few tests for scenarios related to mutable data type flow in distinctUntilChanged() methods for Flowable

* Remove tests and fix typo in javadocChange javadoc explanation for Mutable List (#6314)Fix Flowable#toObservable backpressure support (#6321)Release 2.2.4#6323 Java 8 version for Problem-Solving-Examples-in-RxJava (#6324)

* #6323 Java 8 version for Project Euler problem

* #6323 Java 8 version for Generate the Fibonacci Sequence

* #6323 Java 8 version for Project Euler problem
 - Fix name of variable

* #6324 Fixing for code review.2.x: Update Filtering Observables docs (#6343)

* Update operator list; revise descriptions

* Add examplesFix: use correct return type in Javadoc documentation (#6344)Adding NonNull annotation (#6313)Replace indexed loop with for-each java5 syntax (#6335)

* Replace indexed loop with for-each java5 syntax

* Restore code as per @akarnokd code review

* Keep empty lines as per @akarnokd code reviewJavadoc: fix examples using markdown instead of @code (#6346)Update outdated java example in wiki #6331 (#6351)

* Update outdated java example in wiki #6331

* update wiki page similar to README

* keep the original exampleRelease 2.2.5docs(README): Use 'ignoreElement' to convert Single to Completable (#6353)2.x: Fix the error/race in Obs.repeatWhen due to flooding repeat signal (#6359)2.x: Fix Completable.andThen(Completable) not running on observeOn scheduler. (#6362)

* 2.x: Fix Completable.andThen(Completable) not running on scheduler defined with observeOn.

* 2.x: Fix Completable.andThen(Completable) not running on scheduler defined with observeOn.

* 2.x: Fix Completable.andThen(Completable) not running on scheduler defined with observeOn.2.x: Fix publish not requesting upon client change (#6364)

* 2.x: Fix publish not requesting upon client change

* Add fused test, rename test methodIndicate source disposal in timeout(fallback) (#6365)2.x: Add interruptible mode to Schedulers.from (#6370)2.x: Fix bounded replay() memory leak due to bad node retention (#6371)2.x: Don't dispose the winner of {Single|Maybe|Completable}.amb() (#6375)

* 2.x: Don't dispose the winner of {Single|Maybe|Completable}.amb()

* Add null-source test to MaybeAmbTestFix bug in CompositeException.getRootCause (#6380)

* Fix bug in CompositeException.getRootCause 

The original code use to be `if (root == null || root == e)`, but apparently after some refactoring it ended up as `if (root == null || cause == root)`, which I believe is a bug.

This method should probably be `static` (that would have prevented the bug).

* Update unit tests for CompositeException.getRootCauseRelease 2.2.6Expand `Observable#debounce` and `Flowable#debounce` javadoc (#6377)

Mention that if the processing of a task takes too long
and a newer item arrives then the previous task will
get disposed interrupting a long running work.

Fixes: #6288Add doOnTerminate to Single/Maybe for consistency (#6379) (#6386)2.x: Fix concatEager to dispose sources & clean up properly. (#6405)2.x: Fix window() with start/end selector not disposing/cancelling properly (#6398)

* 2.x: Fix window() with s/e selector not disposing/cancelling properly

* Fix cancellation upon backpressure problem/handler crashImproving Javadoc of flattenAsFlowable and flattenAsObservable methods (#6276) (#6408)Release 2.2.73.x: Adjust infrastructure version markers (#6421)

* 3.x: Adjust infrastructure version markers

* Do not update the /javadoc yet.

* Update "RxJava 2" to "RxJava 3"3.x: Merge in changes from 2.x since the initial branching (#6498)3.x: Sync up with 2.2.10 snapshot (#6507)

* 3.x: Sync up with 2.2.10 snapshot

* Add the Flowable javadoc changes too.3.x: Widen functional interface throws, replace Callable with Supplier (#6511)

* 3.x: Widen functional interface throws, replace Callable with Supplier

* Fix typo and wrong link in Supplier, some style cleanup

* Some cleanup3.x: Merge as() into to() (#6514)

* 3.x: Merge as() into to()

* Fix as() mentioned in the javadocs3.x: remove getValues() from some subjects/processors (#6516)3.x: Various small API changes and removals (#6517)3.x: ConnectableFlowable/ConnetableFlowable redesign (#6519)3.x: Remove methods from test consumers, make internal versions (#6526)3.x: remove `test` from `testXXX` method names, create a validator (#6525)

* Add a check to verify there are no methods with the prefix "test" in the name

* Automatically rename methods "testXXX" to "xxx"

* Do not remove comments

* Run check on CI, but do not change the files

* Do not automatically rename methods for now

* Ignore test prefix check for now3.x: Fix concatMapDelayError not continuing on fused inner source crash (#6523)Rename test methods and enable the check (#6528)

* Rename test methods

* Enable TestPrefixInMethodName check3.x: Add X.fromSupplier() (#6529)

* 3.x: Add X.fromSupplier()

* Correct some missing callable-supplier name changes3.x: disambiguate startWith+1 to startWithItem & startWithIterable (#6530)3.x: add marbles to X.fromSupplier (#6531)3.x: Remove Changes.md (#6533)3.x: Add eager truncation to bounded replay() to avoid item retention (#6532)

* 3.x: Add eager truncation to bounded replay() to avoid item retention

* Those eager tests are in their separate files already3.x: JavaDocs: clarify create emitters are per consumer (#6535)3.x: Make using() resource disposal order consistent with eager-mode (#6534)3.x: Promote Beta/Experimental to Standard (#6537)3.x: Add concatMap with Scheduler guaranteeing where the mapper runs (#6538)3.x: remove no-arg, dematerialize(); remove replay(Scheduler) variants (#6539)#6543 Fixing version tag since `Schedulers.from(Executor, boolean)` has been promoted. (#6544)3.x: Simplify JUnit tests with more appropriate assert methods (#6549)3.x: remove unnecessary static imports from unit tests (#6550)3.x rename on error resume next methods to disambiguate when calling from kotlin (#6551) (#6556)

* #6551 Renaming Observable.onErrorResumeNext to Observable.onErrorResumeWith, removing unnecessary cast from null tests, and updating Observable.onErrorResumeWith's JavaDoc to reference correct parameter name, renamed test classes since the distinctions in their names are no longer necessary.

* #6551 Renaming Maybe.onErrorResumeNext(MaybeSource) to Maybe.onErrorResumeWith(MaybeSource), renamed some of the affected unit tests, and updated JavaDoc.

* #6551 Renaming Single.onErrorResumeNext(Single) to Single.onErrorResumeWith(Single), renamed an affected unit test, updated JavaDoc, and removed redundant casts.

* #6551 Changing Single.onErrorResumeWith parameter from Single<? extends T> to SingleSource<? extends T>

* #6551 Renaming Flowable.onErrorResumeNext(Publisher) to Flowable.onErrorResumeWith(Publisher), renaming some affected tests, deleted duplicated unit test that arose from being able to remove redundant casts, updated JavaDocs.Fix NPE when debouncing empty source (#6559)3.x: remove buffer/window with supplier & onExceptionResumeNext (#6564)3.x: fix wording in Single javadocs (#6566)3.x: Code verification fixes for javac's generated switchmap classes (#6570)

* 3.x: Code verification workarounds for Java 13+ compilation artifacts

* Gradle/IntelliJ output dir corrections3.x: fix switchMaps inconsistency swallowing errors when cancelled (#6572)3.x: travis use openjdk8 as oraclejdk8 stopped working? (#6574)Fix issue #6576 - ObservableBlockingSubscribe compares BlockingObserver.TERMINATED with wrong object (#6577)3.x: Add more time for GC in RefCountTest.publishNoLeak (#6581)

* 3.x: Add more time for GC in RefCountTest.publishNoLeak

* Some test restructuring and dynamic GC wait3.x: widen throws on the XOnSubscribe interfaces (#6579)3.x: Fix truncation bugs in replay() and ReplaySubject/Processor (#6582)

* 3.x: fix truncation bugs in replay() and ReplaySubject/Processor

* Remove impossible condition now that size is correctly checked/computed

* Undo the last commit as it somehow hangs the CI, offline is okay.Create a base test class and have all unit tests extend it (#6589)

This commit creates the `RxJavaTest` class defining a default
timeout to 5 minutes. An ignored test announce itself for each
running class extending it preventing Travis CI from killing the
build.

Have `Completable` tests extend from `RxJavaTest`.
Have `Disposable` tests extend from `RxJavaTest`.
Have `Exception` tests extend from `RxJavaTest`

Related: #6583Have unit tests extends `RxJavaTest` - 2 (#6594)

This commit updates the unit tests of the following operators:
* flowable
* maybe
* observable
* disposable
* observer
* parallel
* processors
* schedulers

and RxJava plugin.

Related: #6583Have unit tests extends `RxJavaTest` - 3 (#6595)

This commit updates the unit tests of the following operators:
* single
* subjects
* subscribers
And for internal operators:
* internal.disposable
* internal.fuctions
* internal.observers
* internal.queue
* interanl.schedulers
* internal.subscribers
* internal.subscriptions
* internal.operator.completable

Related: #65833.x: Fix mergeWith not cancelling the other source if the main errors (#6598)

* 3.x: Fix mergeWith not cancelling the other source if the main errors

* Fix typo in the test nameHave `internal.operator.flowable` unit tests extends `RxJavaTest` - 4 (#6600)

This commit updates the unit tests for `internal.operator.flowable`

Related: #65833.x: Have unit tests extends `RxJavaTest` - 5 (#6604)

This commit updates the unit tests of the following operators:
* internal.operators.maybe
* internal.operator.mixed
* internal.operator.single

Related: #65833.x: Have `internal.operator.observable` unit tests extends `RxJavaTest` - 6 (#6607)

This commit updates the unit tests for `internal.operator.observable`

Related: #65833.x: Fix refCount not resetting when termination triggers cross-cancel (#6609)3.x: Fix many operators swallowing undeliverable exceptions (#6612)

* 3.x: Fix many operators swallowing undeliverable exceptions

* Add Completable.merge variants too3.x: Fix switchMap incorrect sync-fusion & error management (#6616)elementAt, first - constrain upstream requests  (#6620)

* constrain upstream requests by FlowableElementAtMaybe

* constrain upstream requests by FlowableElementAtSingle

* update first(default) and firstElement BackpressureSupport type to reflect upstream request constraints

* set BackpressureSupport for Flowable.firstOrError to FULL

* update javadoc on backpressure for elementAt and first3.x: Refactor to io.reactivex.rxjava3.** (#6621)

* 3.x: Refactor to io.reactivex.rxjava3.**

* fix javadoc cleanup gradle

* javadoc gradle again

* Fix package location in text3.x: better leak detection via GC/sleep loop (#6628)

* 3.x: better leak detection via GC/sleep loop

* Remove the unnecessary sleeps3.x: Fix blockingIterable not unblocking when force-disposed (#6626)

* 3.x: Fix blockingIterable not unblocking when force-disposed

* Update src/main/java/io/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable.java

Co-Authored-By: Niklas Baudy <niklas.baudy@vanniktech.de>

* Update src/main/java/io/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable.java

Co-Authored-By: Niklas Baudy <niklas.baudy@vanniktech.de>

* missed a volatileUpdate Readme.md with the new package locations (#6631)3.x: Upgrade Gradle & dependency versions (#6632)

* 3.x: Upgrade Gradle & dependency versions

* Add checkstyle version string to the top, fix JMH class3.x: Upgrade to Rective Streams 1.0.3 (#6633)3.x: Remove vararg overloads for combineLatest in Observable + Flowable (#6635)

Fix tests.3.x: Avoid using System.getProperties() due to security restrictions (#6637)3.x: Rename zipIterable, remove zip(O(O)), adjust concatMapX arg order (#6638)3.x: Cleanup addThrowable, "2.x" and null-value error messages (#6639)3.x: Rename combineLatest methods that take an array to combineLatestArray (#6640)3.x: Fix groupBy not canceling upstream due to group abandonment (#6642)

* 3.x: Fix groupBy not canceling upstream due to group abandonment

* Add codecov retry on connection refused

* Retry connrefused

* Connrefused not supported?3.x: Fix takeLast(time) last events time window calculation. (#6648)3.x: constrain upstream requests from take (#6569) (#6650)3.x: Fix size+time bound window not creating windows properly (#6652)3.x: Multiple empty line detection to ignore whitespace (#6662)

* 3.x: style check for two subsequent empty lines in source files

* Remove the separate file.Update Additional Docs to include Reactive Programming on Android with RxJava (#6665)3.x: Fix groupBy group emission in some cases (#6664)

* 3.x: Fix Observable.groupBy group emission in some cases

* Test non-fresh group with value selector failure3.x: Add missing marble diagams to Single (#6668)Add Export-Package declarations for OSGi headers (#6675)

This adds the necessary declarations to the Bnd plugin to export all
non-internal packages for use in an OSGi environment.

Affects: https://github.com/ReactiveX/RxJava/issues/66713.x: Fix concurrent clear() calls when fused chains are canceled (#6676)3.x: Fix window(time) possible interrupts while terminating (#6674)

* 3.x: Fix window(time) possible interrupts while terminating

* I don't think the DISPOSE token is necessary after all3.x: Fix type inference problem when compiling with newer JDKs (#6682)3.x: Update Backpressure.md3.x: Update javadoc for observeOn to mention its eagerness (#6700)

* Update javadoc for observeOn to mention its eagerness

* Update javadoc orderCherry-pick fixes from #6683 (#6699)Fix formatting mistake3.x: Embed R8 ProGuard rules to ignore Flow* interfaces in RS 1.0.3 (#6706)

* 3.x: Embed R8 ProGuard rules to ignore Flow* interfaces in RS 1.0.3

* Fix wording3.x: Fix concurrent clear in observeOn while output-fused (#6708)3.x: cleanup of some Javadoc parts (#6709)3.x: Upgrade to Gradle 5.6.4 (#6711)3.x: Fix MulticastProcessor not requesting more after limit is reached (#6714)

* 3.x: Fix MulticastProcessor not requesting more after limit is reached

* Test for more prefetch values and patterns.3.x: Fix parallel() on grouped flowable not replenishing properly (#6719)

* 3.x: Fix parallel() on grouped flowable not replenishing properly

* Remove accidental import

* Avoid calling `isEmpty`

* Undo some of the parallel changes

* Undo all changes to ParallelFromPublisher

* Again, undo3.x: observeOn and Schedulers.from eagerness javadoc updates (#6723)3.x: Fix self-see references, some comments (#6729)3.x: Update Single.zip marble diagrams (4 cases) (#6732)3.x: Add Maybe marble diagrams (14 cases) (#6730)Bump jmh-gradle-plugin from 0.5.0-rc-2 to 0.5.0 (#6733)

Bumps jmh-gradle-plugin from 0.5.0-rc-2 to 0.5.0.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>Bump guava from 28.0-jre to 28.1-jre (#6734)

Bumps [guava](https://github.com/google/guava) from 28.0-jre to 28.1-jre.
- [Release notes](https://github.com/google/guava/releases)
- [Commits](https://github.com/google/guava/commits)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>Bump biz.aQute.bnd.gradle from 4.2.0 to 4.3.1 (#6738)

Bumps biz.aQute.bnd.gradle from 4.2.0 to 4.3.1.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>Bump mockito-core from 3.0.0 to 3.2.0 (#6737)

Bumps [mockito-core](https://github.com/mockito/mockito) from 3.0.0 to 3.2.0.
- [Release notes](https://github.com/mockito/mockito/releases)
- [Commits](https://github.com/mockito/mockito/compare/v3.0.0...v3.2.0)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>Bump build-info-extractor-gradle from 4.5.2 to 4.11.0 (#6736)

Bumps build-info-extractor-gradle from 4.5.2 to 4.11.0.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>Bump gradle-bintray-plugin from 1.7.3 to 1.8.4 (#6735)

Bumps gradle-bintray-plugin from 1.7.3 to 1.8.4.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>3.x: Mockito fix deprecated API use after bump to 3.2.0 (#6739)3.x: Upgrade to Gradle 6.0.1 (#6741)3.x: Make DisposableContainer public API (#6745)3.x: Add fair mode overload to Schedulers.from(Executor) (#6744)3.x: Change Flowable.groupBy to signal MBE instead of possibly hanging (#6740)

* 3.x: Change Flowable.groupBy to signal MBE instead of possibly hanging

* Update groupBy javadocs

* Update backpressure annotation to ERROR, add some see links

* Correct javadocs typos

* Improve coverage of changes3.x: Update observeOn docs with links and +backpressure explanation (#6750)3.x: Change how the cause of CompositeException is generated (#6748)

* 3.x: Change how the cause of CompositeException is generated

* Fix reoccurrence formatting.

* Fix a mistake in the unit test3.x: Do not update snapshot Javadocs from secondary branches (#6752)

* 3.x: Do not update snapshot Javadocs from secondary branches

* Also disable creating snapshots for secondary branches

* Fix TRAVIS_BRANCH is the same as TRAVIS_TAG for releases case

* Space needed after [ and before "3.x: Fix Observable amb, combineLatest & zip ArrayStoreException (#6756)Fix typo in Flowable javadoc (#6760)

Fix compilation error in example code in javadoc3.x: Fix Flowable.window (size, time) cancellation and abandonment (#6758)3.x: Fix Observable.window (size & time) cancellation and abandonment (#6761)Bump mockito-core from 3.2.0 to 3.2.4 (#6764)

Bumps [mockito-core](https://github.com/mockito/mockito) from 3.2.0 to 3.2.4.
- [Release notes](https://github.com/mockito/mockito/releases)
- [Commits](https://github.com/mockito/mockito/compare/v3.2.0...v3.2.4)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>3.x: Fix window (boundary, start/end) cancel and abandonment (#6762)3.x: [Java 8] Upgrade to Java 8, add Flowable.fromX operators (#6765)

* 3.x: [Java 8] Upgrade to Java 8, add Flowable.fromX operators

* Add NonNull annotation to the new fromX methods

* Annotate return type argument to Flowable<@NonNull T>Remove deprecated method from 2.x (#6769)Replace some ObjecsHelpers methods with Java 8 APIs (#6770)Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)Add FunctionalInterface annotations. (#6773)3.x: Javadocs package-info made nicer, update README regarding Java 8 (#6778)3.x: [Java 8] Implement mapOptional, collector, first/last/single stage (#6775)

* 3.x: [Java 8] Implement mapOptional, collector, first/last/single stage

* Upgrade the Checkstyle plugin3.x: [Java 8] Add AutoCloseable <-> Disposable conversions, nicen docs (#6780)3.x: [Java 8] Add blockingStream & flatMapStream to Flowable (#6779)Migrate Disposables static factories to Disposable interface (#6781)3.x: [Java 8] Add fromOpt/Stage, mapOptional, toCompletionStage to M/S/C (#6783)3.x: Cleanup and prettify Javadocs, widen XOperator throws (#6785)

* 3.x: Cleanup and prettify Javadocs, widen XOperator throws

* Fix encoding of § in javadoc

* Fix a wrong tag namediamond operators in unit tests, flowable package (#6787)diamond operators in unit tests, observable package (#6786)Diamond operators in tests (#6788)

* diamond operators in unit tests, small packages in internal/

* diamond operators in unit tests, small packages in internal/operatorsdiamond operators in unit tests, small packages (#6789)3.x: Remove now unnecessary unchecked warning suppressions (#6790)Bump build-info-extractor-gradle from 4.11.0 to 4.12.0 (#6792)

Bumps build-info-extractor-gradle from 4.11.0 to 4.12.0.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>3.x: Add NonNull & SafeVarargs annotations + validator (#6791)3.x: Add missing annotations, fix many diamonds (#6795)

* 3.x: Add missing annotations, fix many diamonds

* Fix accidental JDK 9 API usage

* Fix NPE in unicast due to null-cleanup3.x: [Java 8] Add Observable operators + cleanup (#6797)3.x: [Java 8] Add ParallelFlowable operators + cleanup (#6798)3.x: XProcessor.offer to throw NPE immediately (#6799)3.x: Add blockingForEach(Consumer, int) overload (#6800)3.x: Add missing throwIfFatal calls (#6801)Bump guava from 28.1-jre to 28.2-jre (#6802)

Bumps [guava](https://github.com/google/guava) from 28.1-jre to 28.2-jre.
- [Release notes](https://github.com/google/guava/releases)
- [Commits](https://github.com/google/guava/commits)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>3.x: Fix diamonds, spelling, unnecessary code (#6804)3.x: [Java 8] Add flattenStreamAsX to Maybe/Single (#6805)

* 3.x: [Java 8] Add flattenStreamAsX to Maybe/Single

* Add RS TCK tests for flattenStreamAsFlowable3.x: Prettify Flowable javadoc + validator (#6806)3.x: Improve Javadocs of Completable and some others (#6809)Fix minor Javadoc mistakes3.x: Improve Javadocs of Single (#6812)Bump junit from 4.12 to 4.13 (#6810)

Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.
- [Release notes](https://github.com/junit-team/junit4/releases)
- [Changelog](https://github.com/junit-team/junit4/blob/master/doc/ReleaseNotes4.12.md)
- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>3.x: Fix Junit 4.13 deprecated API use (#6813)3.x: Remove fromFuture(..., Scheduler) overloads (#6814)Deleted Functions.naturalOrder (#6817)3.x: Improve JavaDocs of Maybe (#6815)

* 3.x: Improve JavaDocs of Maybe

* Fix a mistake in Single3.x: Fix Flowable.flatMap not canceling the inner sources on outer error (#6826)3.x: Improve JavaDocs of Observable and fix similar issues elsewhere (#6831)

* 3.x: Javadoc cleanup of Observable

* Another set of cleanups (too many things to fix at once)

* 3.x: Improve JavaDocs of Observable and fix similar issues elsewhere3.x: Cleanup javadoc for parameter validation all around (#6835)

* 3.x: Cleanup javadoc for parameter validation all around

* More cleanup

* Last set of intended changes3.x: Remove a pointless concatMapIterable overload (#6837)3.x: Rename to combineLatestArrayDelayError (#6838)3.x: enable javac parameter saving in class files (#6839)Bump build-info-extractor-gradle from 4.12.0 to 4.13.0 (#6808)

Bumps build-info-extractor-gradle from 4.12.0 to 4.13.0.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>3.x: Add nullability annotations to type arguments (#6840)3.x: Improve wording of operators (#6843)3.x: Remove Maybe.onExceptionResumeNext (#6844)3.x: Add operator matrix wiki + auto-extractor (#6845)

* 3.x: Add operator matrix wiki + auto-extractor

* Skip Object methods

* Only declared in that class

* Remove onExceptionResumeNextFix a minor mistake in the generator and docsDeleted unnecessary NPE tests (#6846)

* Deleted unnecessary NPE tests

* Deleted unnecessary NPE testsOfficial Gradle Wrapper Validation GitHub Action (#6848)

See: https://github.com/gradle/wrapper-validation-actionAdd `pull_request` to Wrapper Validation Triggers (#6849)3.x: Simplify @return sentences in Flowable JavaDocs (#6847)

* 3.x: Simplify @return sentences in Flowable

* Clear Completable

* Clear Single

* Clean Maybe

* Clean Observable3.x: Fix method argument naming across types (#6853)

* 3.x: Fix method argument naming across types

* Remove outdated null-test of blockingMostRecentRename Single.equals to Single.sequenceEqual (#6856)

* Rename Single.equals to Single.sequenceEqual

* Rename Single.sequenceEqual arguments

* Update mentions of renamed parameters3.x: Verify the use of base interfaces in operator inputs & lambdas (#6858)

* 3.x: Verify the use of base interfaces in operator inputs & lambdas

* Add @NonNull annotations too.3.x: [Wiki] Improve Operator-Matrix with links and notes (#6857)Minor fix to the operator matrix.3.x: Add last missing throws tag to JavaDocs (#6860)Bump biz.aQute.bnd.gradle from 4.3.1 to 5.0.0 (#6861)

Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 4.3.1 to 5.0.0.
- [Release notes](https://github.com/bndtools/bnd/releases)
- [Changelog](https://github.com/bndtools/bnd/blob/master/docs/ADDING_RELEASE_DOCS.md)
- [Commits](https://github.com/bndtools/bnd/commits)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>add delayError to Maybe.delay (#6864)3.x: Add Maybe/Single/Completable blockingSubscribe (#6862)

* 3.x: Add Maybe/Single/Completable blockingSubscribe

* Update marble dimensions3.x: Fix many marbles in Maybe (#6866)3.x: Add onErrorComplete to Flowable, Observable and Single (#6867)

* 3.x: Add onErrorComplete to F/O/S

* Add version tags.3.x: Add Completable.onErrorResumeWith (#6868)Update Operator-Matrix generator and output3.x: Add S/C retryUntil + marbles (#6869)3.x: Add Maybe/Single/Completable switchOnNext & switchOnNextDelayError (#6870)

* 3.x: Add M/S/C switchOnNext[DelayError]

* Fix wording of the Completable variantFix minor JavaDocs syntax errorsRefresh operator-matrix3.x: Add Maybe.dematerialize (#6871)3.x: Add many fromX operators + marbles (#6873)3.x: Add timeInterval & timestamp to M/S (#6874)

* 3.x: Add timeInterval & timestamp to M/S

* Fix null not allowed in Timed

* Fix Timed coverage3.x: Add Maybe/Completable toFuture (#6875)

* 3.x: Add Maybe/Completable toFuture

* Fix copy-paste mistakes3.x: Add Single.ofType (#6876)3.x: Add doOnLifecycle to M/S/C (#6877)3.x: Add concatMapX operators (aliases) (#6879)3.x: Add various concatXDelayError operators (#6881)3.x: Add Single.mergeArray & mergeArrayDelayError (#6882)

* 3.x: Add Single.mergeArray & mergeArrayDelayError

* Remove unnecessary shortcut3.x: Add Completable.sequenceEqual (#6884)3.x: Add missing startWith overloads (#6885)

* 3.x: Add missing startWith overloads

* Fix Javadocs copy-paste mistakes3.x: Add Completable.onErrorReturn[Item] (#6886)3.x: Add safeSubscribe to Maybe, Single & Completable (#6887)3.x: Use more appropriate operators when delegating to Flowable ops (#6888)

* 3.x: Use more appropriate operators when delegating to Flowable ops

* Remove now-unused classes3.x: Fix marble dimensions, add program that checks them (#6890)

* 3.x: Fix marble dimensions, add program that checks them

* Remove an empty line.3.x: Swap Maybe.flatMapSingle and Maybe.flatMapSingleElement (#6891)

* Deleted Maybe.flatMapSingle

And replaced tests with flatMapSingle().toSingle()

* Renamed Maybe.flatMapSingleElement to flatMapSingle

* Deleted unused MaybeFlatMapSingle operator

* Renamed operator MaybeFlatMapSingleElement to MaybeFlatMapSingle

* Add Ignore to XFlatMapTest.maybeSingle3.x: Fix groupBy not requesting more if a group is cancelled w/ items (#6895)3.x: Reenable XFlatMapTest.maybeSingle, add missing Single operators (#6893)3.x: Add remaining Maybe marbles (+50) (#6897)3.x: Add concatEagerDelayError across (#6899)

* 3.x: Add concatEagerDelayError across

* Add more since 3.0.0 tags3.x: Add 'Error handling' section to Observable.blockingFirst documentation (#6900) (#6903)3.x: Add missing coverage, fix unused/inconsistent ops (#6901)

* 3.x: Add missing coverage, fix unused/inconsistent ops

* More coverage improvements and cleanup

* Some more coverage

* Observable coverage and cleanup

* Improve Flowable internals and coverage

* More Flowable operator coverage and fixes

* Last set of coverage & cleanup for Flowable operators

* Fix wrong use of j.u.ObservableMissing version tag from Single.concatMapsMore missing version tagsUpdate 2.x maintenance date, include 3.0 wikiUpdate README.md3.x: Fix switchMap not canceling properly during onNext-cancel races (#6917)3.x: Fix replay() not resetting when the connection is disposed (#6921)Bump build-info-extractor-gradle from 4.13.0 to 4.14.1 (#6924)

Bumps build-info-extractor-gradle from 4.13.0 to 4.14.1.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>Fix typos in Backpressure.md (#6927)

Fix lower case generic type declaration in reactive pull backpressure's code sample
Fix typo in the Further reading sectionBump mockito-core from 3.2.4 to 3.3.3 (#6935)

Bumps [mockito-core](https://github.com/mockito/mockito) from 3.2.4 to 3.3.3.
- [Release notes](https://github.com/mockito/mockito/releases)
- [Commits](https://github.com/mockito/mockito/compare/v3.2.4...v3.3.3)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>

Co-authored-by: dependabot-preview[bot] <27856297+dependabot-preview[bot]@users.noreply.github.com>Bump build-info-extractor-gradle from 4.14.1 to 4.15.0 (#6937)

Bumps build-info-extractor-gradle from 4.14.1 to 4.15.0.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>

Co-authored-by: dependabot-preview[bot] <27856297+dependabot-preview[bot]@users.noreply.github.com>Add see annotation for range operators (#6934)Bump build-info-extractor-gradle from 4.15.0 to 4.15.1 (#6940)

Bumps build-info-extractor-gradle from 4.15.0 to 4.15.1.

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>

Co-authored-by: dependabot-preview[bot] <27856297+dependabot-preview[bot]@users.noreply.github.com>Remove unused importsBump biz.aQute.bnd.gradle from 5.0.0 to 5.0.1 (#6941)

Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 5.0.0 to 5.0.1.
- [Release notes](https://github.com/bndtools/bnd/releases)
- [Changelog](https://github.com/bndtools/bnd/blob/master/docs/ADDING_RELEASE_DOCS.md)
- [Commits](https://github.com/bndtools/bnd/commits)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>

Co-authored-by: dependabot-preview[bot] <27856297+dependabot-preview[bot]@users.noreply.github.com>